---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=40&part=snippet,contentDetails&playlistId=PLBO8M-O_dTPEdv9xixE4oH1hequU63wpJ
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:10 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:10 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=40&pageToken=CCgQAA&part=snippet,contentDetails&playlistId=PLBO8M-O_dTPEdv9xixE4oH1hequU63wpJ
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:10 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:10 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=40&pageToken=CFAQAA&part=snippet,contentDetails&playlistId=PLBO8M-O_dTPEdv9xixE4oH1hequU63wpJ
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:11 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:11 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=gWX6zyb_Pkc&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:11 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIjhTNFZWUE1uUUxiYVIwcDJCMVlDTlJqcjFWSSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAicldsdkJpcHVxSEZuOUJBUUJGazliYWluNXVjIiwKICAgICAgImlkIjogImdXWDZ6eWJfUGtjIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMTEtMTBUMjA6MDc6NTdaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkEgQ29tcGxldGUgSGlzdG9yeSBvZiBQb2tlbW9uIFJ1bW9ycyAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFJlbWl4IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIFBva2Vtb24gR2FtZXMg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblJ1bW9ycyBQYXJ0IDIg4pa6IGh0dHBzOi8vYml0Lmx5LzJLTmtNQmZcbk9ic2N1cmUgUG9rZW1vbiBGYWN0cyDilrogaHR0cHM6Ly9iaXQubHkvMnJ0dXU0UlxuXG5JbiB0aGlzIFBhcnQgMSBvZiBhIHR3byBwYXJ0IHZpZGVvIHNlcmllcywgRGlkIFlvdSBLbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgYSBjb21wbGV0ZSBoaXN0b3J5IG9mIFBva2Vtb24gcnVtb3JzLiBPdXIgam91cm5leSBjb3ZlcmluZyBtYWpvciBydW1vcnMgc3RhcnRzIHdpdGggUG9rZW1vbiBSZWQgYW5kIEJsdWUgZm9yIHRoZSBHYW1lIEJveSwgZm9sbG93ZWQgYnkgUG9rZW1vbiBHb2xkIGFuZCBTaWx2ZXIsIFBva2Vtb24gUnVieSBhbmQgU2FwcGhpcmUgZm9yIHRoZSBHYW1lIEJveSBBZHZhbmNlIChHQkEpLCBhbmQgUG9rZW1vbiBEaWFtb25kIGFuZCBQZWFybCBmb3IgdGhlIE5pbnRlbmRvIERTLlxuXG5Gb2xsb3cgRFlLRyBvbjpcblR3aXR0ZXI6IGh0dHA6Ly9iaXQubHkvMm9PYXZzMlxuSW5zdGFncmFtOiBodHRwOi8vYml0Lmx5LzJvTzRqakFcbkZhY2Vib29rOiBodHRwOi8vYml0Lmx5LzJuSXJGcDlcbldlYnNpdGU6IGh0dHA6Ly9iaXQubHkvTnBZRGJEXG5cblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuXG5Tb3VyY2VzL0Z1cnRoZXIgUmVhZGluZzpcbmh0dHBzOi8vZ2FtaW5nLXVyYmFuLWxlZ2VuZHMuZmFuZG9tLmNvbS93aWtpL1BhbGxldF9GaWVsZHNcbmh0dHBzOi8vZ2FtaW5nLXVyYmFuLWxlZ2VuZHMuZmFuZG9tLmNvbS93aWtpL1BvayVDMyVBOWFsbF9CdXR0b25fTWFzaGluZ1xuaHR0cHM6Ly9idWxiYXBlZGlhLmJ1bGJhZ2FyZGVuLm5ldC93aWtpL1MuUy5fQW5uZSNSdW1vcnNcbmh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE1MDkxMzAyNTkwMS9odHRwOi8vd3d3LmJsdWUtcmVmbGVjdGlvbnMubmV0L3JhZ2VjYW5keWJhci9wcm9qZWN0cy9wb2tlZ29kcy8gXG5odHRwOi8vYmxhY2tiYWcuZ2F3a2VyLmNvbS9sYXZlbmRlci10b3duLXRoZS1iaXphcnJlLXBva2Vtb24tY2hpbGQtc3VpY2lkZS1jb25zcGktMTY5MDM5NjQ1MFxuaHR0cHM6Ly93d3cuY29tcGxleC5jb20vcG9wLWN1bHR1cmUvMjAxMy8wMS90aGUtMTAtbW9zdC1iaXphcnJlLXNjaG9vbHlhcmQtcG9rbW9uLXJ1bW9ycy9cbmh0dHA6Ly9oYXJ2ZXN0c3RvbmUudHJpcG9kLmNvbS9ob21lcGFnZV9jb25zb2xlL25ld3Bvay5odG1cbmh0dHBzOi8veW91dHUuYmUvWDFDdkZlcmFSREVcbmh0dHBzOi8vd3d3Lmlnbi5jb20vZmFxcy8yMDAxL3Bva2Vtb24tc25hcC13YWxrdGhyb3VnaGZhcS0yMjIxOTdcbmh0dHBzOi8vdHZ0cm9wZXMub3JnL3Btd2lraS9wbXdpa2kucGhwL1VyYmFuTGVnZW5kT2ZaZWxkYS9Qb2tlbW9uXG5odHRwczovL3ZpZGVvZ2FtZWxpZXMuZmFuZG9tLmNvbS93aWtpL1Bva2Vtb25fc2VyaWVzXG5odHRwczovL2dhbWluZy11cmJhbi1sZWdlbmRzLmZhbmRvbS5jb20vd2lraS9CaWxsJTI3c19TZWNyZXRfR2FyZGVuXG5odHRwczovL2ltZ3VyLmNvbS9hL0V4UHlKXG5odHRwczovL2dhbWluZy11cmJhbi1sZWdlbmRzLmZhbmRvbS5jb20vd2lraS9EcmFnb25pdGVfRXZvbHZlc19JbnRvX1lvc2hpXG5odHRwczovL2dhbWluZy11cmJhbi1sZWdlbmRzLmZhbmRvbS5jb20vd2lraS9NZXdfVW5kZXJfdGhlX1RydWNrXG5odHRwOi8vd3d3LmFuZ2VsZmlyZS5jb20veXQvcG9rZW1hbmlhYzQvZ29sZHNpbHZlci5odG1sXG5odHRwczovL2J1bGJhcGVkaWEuYnVsYmFnYXJkZW4ubmV0L3dpa2kvRmFrZV9Qb2slQzMlQTltb25cbmh0dHBzOi8vd3d3LnNpbGljb25lcmEuY29tLzIwMTkvMDkvMTYvZ2FtZS1mcmVhay1yZXZlYWxzLW5ldy1zZWNyZXRzLWJlaGluZC10aGUtbWFraW5nLW9mLXRoZS1teXRoaWNhbC1jZWxlYmkvXG5odHRwczovL2dhbWluZy5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMzQwMzYyL2RvZXMtc2h1Y2tsZS1yZWFsbHktcHJvZHVjZS1yYXJlLWNhbmRpZXNcbmh0dHA6Ly9tZWdhcmFpY2h1LnRyaXBvZC5jb20vcGlrYWNodS5odG1sXG5odHRwczovL3d3dy5wb2pvLmNvbS92aWRlb2dhbWVzL0dvbGRTaWx2ZXIvTHVnaWEvTHVnaWFSdW1vcnMuaHRtbFxuaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDAxMDI0MTk0MTEzL2h0dHA6Ly93d3cucG9rZW1vbmFib2RlLmNvbS9hcmMzLTIwMDAuaHRtbFxuaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDEwNDEwMDE0OTUwL2h0dHA6Ly93d3cucG9rZW1vbmFib2RlLmNvbS9uZXdzci85ODYxMzQwMTksOTI4OSwuc2h0bWxcbmh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE4MDMxMzExMzMyMC9odHRwczovL3d3dy5zZXJlYmlpLm5ldC9mYWtlcy9cbmh0dHA6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDIwNjA0MTIzNjA1L2h0dHA6Ly93d3cucG9rZW1hc3RlcnMuY29tL25ld3MvMTAxNzY0MTE1MjQ5MS5zaHRtbFxuaHR0cHM6Ly9idWxiYXBlZGlhLmJ1bGJhZ2FyZGVuLm5ldC93aWtpL01vc3NkZWVwX1NwYWNlX0NlbnRlciNSdW1vcnNcbmh0dHA6Ly9mbG9hdHplbC5uZXQvcG9rZW1vbi9wb2tlbW9uX3J1bW9ycy5odG1cbmh0dHBzOi8vYnVsYmFwZWRpYS5idWxiYWdhcmRlbi5uZXQvd2lraS9BcHJpbF9Gb29scyUyN19EYXlfMjAwNVxuaHR0cHM6Ly9idWxiYW5ld3MuYnVsYmFnYXJkZW4ubmV0L3dpa2kvQnVsYmFjYXN0OkVwaXNvZGVzI1NlYXNvbl8xXG4gXG4jUG9rZW1vbiAjUnVtb3JzICNOaW50ZW5kbyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2dXWDZ6eWJfUGtjL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZ1dYNnp5Yl9Qa2MvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZ1dYNnp5Yl9Qa2MvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2dXWDZ6eWJfUGtjL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZ1dYNnp5Yl9Qa2MvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJwb2tlbW9uIiwKICAgICAgICAgICJwb2tlbW9uIHJ1bW9ycyIsCiAgICAgICAgICAicG9rZW1vbiBnYW1lcyIsCiAgICAgICAgICAibmludGVuZG8iLAogICAgICAgICAgImdhbWUgZnJlYWsiLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAiZ2FtaW5nIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIkEgQ29tcGxldGUgSGlzdG9yeSBvZiBQb2tlbW9uIFJ1bW9ycyAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFJlbWl4IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgUG9rZW1vbiBHYW1lcyDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuUnVtb3JzIFBhcnQgMiDilrogaHR0cHM6Ly9iaXQubHkvMktOa01CZlxuT2JzY3VyZSBQb2tlbW9uIEZhY3RzIOKWuiBodHRwczovL2JpdC5seS8ycnR1dTRSXG5cbkluIHRoaXMgUGFydCAxIG9mIGEgdHdvIHBhcnQgdmlkZW8gc2VyaWVzLCBEaWQgWW91IEtub3cgR2FtaW5nIHRha2VzIGEgbG9vayBhdCBhIGNvbXBsZXRlIGhpc3Rvcnkgb2YgUG9rZW1vbiBydW1vcnMuIE91ciBqb3VybmV5IGNvdmVyaW5nIG1ham9yIHJ1bW9ycyBzdGFydHMgd2l0aCBQb2tlbW9uIFJlZCBhbmQgQmx1ZSBmb3IgdGhlIEdhbWUgQm95LCBmb2xsb3dlZCBieSBQb2tlbW9uIEdvbGQgYW5kIFNpbHZlciwgUG9rZW1vbiBSdWJ5IGFuZCBTYXBwaGlyZSBmb3IgdGhlIEdhbWUgQm95IEFkdmFuY2UgKEdCQSksIGFuZCBQb2tlbW9uIERpYW1vbmQgYW5kIFBlYXJsIGZvciB0aGUgTmludGVuZG8gRFMuXG5cbkZvbGxvdyBEWUtHIG9uOlxuVHdpdHRlcjogaHR0cDovL2JpdC5seS8yb09hdnMyXG5JbnN0YWdyYW06IGh0dHA6Ly9iaXQubHkvMm9PNGpqQVxuRmFjZWJvb2s6IGh0dHA6Ly9iaXQubHkvMm5JckZwOVxuV2Vic2l0ZTogaHR0cDovL2JpdC5seS9OcFlEYkRcblxuVmlkZW8gRWRpdGluZyBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cblJlc2VhcmNoL1dyaXRpbmcgYnkgS2VsbGVuIE1jSW50eXJlXG5cblNvdXJjZXMvRnVydGhlciBSZWFkaW5nOlxuaHR0cHM6Ly9nYW1pbmctdXJiYW4tbGVnZW5kcy5mYW5kb20uY29tL3dpa2kvUGFsbGV0X0ZpZWxkc1xuaHR0cHM6Ly9nYW1pbmctdXJiYW4tbGVnZW5kcy5mYW5kb20uY29tL3dpa2kvUG9rJUMzJUE5YWxsX0J1dHRvbl9NYXNoaW5nXG5odHRwczovL2J1bGJhcGVkaWEuYnVsYmFnYXJkZW4ubmV0L3dpa2kvUy5TLl9Bbm5lI1J1bW9yc1xuaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTUwOTEzMDI1OTAxL2h0dHA6Ly93d3cuYmx1ZS1yZWZsZWN0aW9ucy5uZXQvcmFnZWNhbmR5YmFyL3Byb2plY3RzL3Bva2Vnb2RzLyBcbmh0dHA6Ly9ibGFja2JhZy5nYXdrZXIuY29tL2xhdmVuZGVyLXRvd24tdGhlLWJpemFycmUtcG9rZW1vbi1jaGlsZC1zdWljaWRlLWNvbnNwaS0xNjkwMzk2NDUwXG5odHRwczovL3d3dy5jb21wbGV4LmNvbS9wb3AtY3VsdHVyZS8yMDEzLzAxL3RoZS0xMC1tb3N0LWJpemFycmUtc2Nob29seWFyZC1wb2ttb24tcnVtb3JzL1xuaHR0cDovL2hhcnZlc3RzdG9uZS50cmlwb2QuY29tL2hvbWVwYWdlX2NvbnNvbGUvbmV3cG9rLmh0bVxuaHR0cHM6Ly95b3V0dS5iZS9YMUN2RmVyYVJERVxuaHR0cHM6Ly93d3cuaWduLmNvbS9mYXFzLzIwMDEvcG9rZW1vbi1zbmFwLXdhbGt0aHJvdWdoZmFxLTIyMjE5N1xuaHR0cHM6Ly90dnRyb3Blcy5vcmcvcG13aWtpL3Btd2lraS5waHAvVXJiYW5MZWdlbmRPZlplbGRhL1Bva2Vtb25cbmh0dHBzOi8vdmlkZW9nYW1lbGllcy5mYW5kb20uY29tL3dpa2kvUG9rZW1vbl9zZXJpZXNcbmh0dHBzOi8vZ2FtaW5nLXVyYmFuLWxlZ2VuZHMuZmFuZG9tLmNvbS93aWtpL0JpbGwlMjdzX1NlY3JldF9HYXJkZW5cbmh0dHBzOi8vaW1ndXIuY29tL2EvRXhQeUpcbmh0dHBzOi8vZ2FtaW5nLXVyYmFuLWxlZ2VuZHMuZmFuZG9tLmNvbS93aWtpL0RyYWdvbml0ZV9Fdm9sdmVzX0ludG9fWW9zaGlcbmh0dHBzOi8vZ2FtaW5nLXVyYmFuLWxlZ2VuZHMuZmFuZG9tLmNvbS93aWtpL01ld19VbmRlcl90aGVfVHJ1Y2tcbmh0dHA6Ly93d3cuYW5nZWxmaXJlLmNvbS95dC9wb2tlbWFuaWFjNC9nb2xkc2lsdmVyLmh0bWxcbmh0dHBzOi8vYnVsYmFwZWRpYS5idWxiYWdhcmRlbi5uZXQvd2lraS9GYWtlX1BvayVDMyVBOW1vblxuaHR0cHM6Ly93d3cuc2lsaWNvbmVyYS5jb20vMjAxOS8wOS8xNi9nYW1lLWZyZWFrLXJldmVhbHMtbmV3LXNlY3JldHMtYmVoaW5kLXRoZS1tYWtpbmctb2YtdGhlLW15dGhpY2FsLWNlbGViaS9cbmh0dHBzOi8vZ2FtaW5nLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8zNDAzNjIvZG9lcy1zaHVja2xlLXJlYWxseS1wcm9kdWNlLXJhcmUtY2FuZGllc1xuaHR0cDovL21lZ2FyYWljaHUudHJpcG9kLmNvbS9waWthY2h1Lmh0bWxcbmh0dHBzOi8vd3d3LnBvam8uY29tL3ZpZGVvZ2FtZXMvR29sZFNpbHZlci9MdWdpYS9MdWdpYVJ1bW9ycy5odG1sXG5odHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAwMDEwMjQxOTQxMTMvaHR0cDovL3d3dy5wb2tlbW9uYWJvZGUuY29tL2FyYzMtMjAwMC5odG1sXG5odHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAwMTA0MTAwMTQ5NTAvaHR0cDovL3d3dy5wb2tlbW9uYWJvZGUuY29tL25ld3NyLzk4NjEzNDAxOSw5Mjg5LC5zaHRtbFxuaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTgwMzEzMTEzMzIwL2h0dHBzOi8vd3d3LnNlcmViaWkubmV0L2Zha2VzL1xuaHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAwMjA2MDQxMjM2MDUvaHR0cDovL3d3dy5wb2tlbWFzdGVycy5jb20vbmV3cy8xMDE3NjQxMTUyNDkxLnNodG1sXG5odHRwczovL2J1bGJhcGVkaWEuYnVsYmFnYXJkZW4ubmV0L3dpa2kvTW9zc2RlZXBfU3BhY2VfQ2VudGVyI1J1bW9yc1xuaHR0cDovL2Zsb2F0emVsLm5ldC9wb2tlbW9uL3Bva2Vtb25fcnVtb3JzLmh0bVxuaHR0cHM6Ly9idWxiYXBlZGlhLmJ1bGJhZ2FyZGVuLm5ldC93aWtpL0FwcmlsX0Zvb2xzJTI3X0RheV8yMDA1XG5odHRwczovL2J1bGJhbmV3cy5idWxiYWdhcmRlbi5uZXQvd2lraS9CdWxiYWNhc3Q6RXBpc29kZXMjU2Vhc29uXzFcbiBcbiNQb2tlbW9uICNSdW1vcnMgI05pbnRlbmRvIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMjJNMTJTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTExNDcyNiIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyMTY2NCIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI1NDkiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMjA2MiIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:11 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=LDqvzhPOSqA&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:11 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:11 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=TaauU4Qdvao&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:12 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:12 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=MHIEOMjObEc&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:12 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:12 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=qpT3eaTLT1g&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:12 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:12 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=AenY34PMwZo&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:13 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:13 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=c9aR5d_f36w&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:13 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:13 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=t3HPK7Qq8sk&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:13 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:13 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=KC73X0awtpQ&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:14 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:14 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=g7nZrns5FR0&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:14 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:14 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=kHmL2pv7gQA&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:14 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:14 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=Rf4xq6iq25A&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:14 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:14 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=fASEpDvp54k&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:15 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIndSc0JNRDZBYWU2ZVh4SWtjTGNYdjFNRG5kNCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiTWpPTmFKZTR5bE93QS1mM1pfa09pdnd1T0RvIiwKICAgICAgImlkIjogImZBU0VwRHZwNTRrIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTgtMDYtMjNUMTk6MDg6NTBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIldhbHVpZ2kgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBMdWNhaGppbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBWaWRlb3Mg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbldhcmlvIEZhY3RzIOKWuiBodHRwczovL2JpdC5seS8yTVN4MGFaXG5MdWNhaGppbiDilrogaHR0cHM6Ly9iaXQubHkvMk1pYXlxWlxuXG5EdWUgdG8gTmludGVuZG8ncyBjb250aW51ZWQgbGFjayBvZiBhdHRlbnRpb24gdG93YXJkcyBXYWx1aWdpLCBEaWQgWW91IEtub3cgR2FtaW5nIHRha2VzIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzIGFuZCBFYXN0ZXIgZWdncyByZWxhdGluZyB0byBXYWx1aWdpISBXYWx1aWdpIGZpcnN0IGFwcGVhcmVkIGluIE1hcmlvIFRlbm5pcyBvbiB0aGUgTmludGVuZG8gNjQsIGFuZCBoYXMgc2luY2UgYmVlbiBhIHJlZ3VsYXIgY2hhcmFjdGVyIGluIE1hcmlvIHNwaW4tb2ZmIHRpdGxlcyBpbmNsdWRpbmcgdGhlIHJlY2VudCBNYXJpbyBUZW5uaXMgQWNlcy4gV2FsdWlnaSBhbHNvIGhhcyBhIHN0cm9uZyBjb25uZWN0aW9uIHRvIFdhcmlvLCBhbmQgb2Z0ZW4gYXBwZWFycyBhbG9uZ3NpZGUgaGltIGFzIGEgcGFpciwgYnV0IG5vdCBpbiBTdXBlciBTbWFzaCBCcm9zIFVsdGltYXRlLi4uIFdlIHBlcnNvbmFsbHkgYXJlIGhvcGluZyBmb3IgYSBXYWx1aWdpIGdhbWUsIG9yIGV2ZW4gV2FsdWlnaSBnYW1lcyBpbiB0aGUgZnV0dXJlLlxuXG5Gb2xsb3cgRFlLRyBvbjpcblR3aXR0ZXI6IGh0dHA6Ly9iaXQubHkvMm9PYXZzMlxuSW5zdGFncmFtOiBodHRwOi8vYml0Lmx5LzJvTzRqakFcbkZhY2Vib29rOiBodHRwOi8vYml0Lmx5LzJuSXJGcDlcbldlYnNpdGU6IGh0dHA6Ly9iaXQubHkvTnBZRGJEXG5cblZpZGVvIGJ5IFRoZUNhcnRvb25HYW1lclxuXG5Tb3VyY2VzL0Z1cnRoZXIgUmVhZGluZzpcbmh0dHBzOi8vd3d3Lm1hcmlvd2lraS5jb20vV2FsdWlnaSBcbmh0dHBzOi8vd3d3Lm1hcmlvd2lraS5jb20vWW9pY2hpX0tvdGFiZSBcbmh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDAwMDgxNzIzMTQ0MC9odHRwOi8vd3d3Lm5pbnRlbmRvLmNvbTo4MC9uNjQvbWFyaW90ZW5uaXMvd2FsdWlnaS5odG1sIFxuaHR0cHM6Ly90d2l0dGVyLmNvbS9NYXJpb0Jyb3RoQmxvZy9zdGF0dXMvOTY4NTIzNzM2MTA5NTE4ODQ5IFxuaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3lyaWxsaWNfc2NyaXB0I0xldHRlcnMgXG5odHRwczovL3d3dy5tYXJpb3dpa2kuY29tL1dhcmlvJTI3c19XYXJlaG91c2UgXG5odHRwczovL3d3dy5tYXJpb3dpa2kuY29tL0ZvcmVtYW5fU3Bpa2UgXG5odHRwczovL215bmludGVuZG9uZXdzLmNvbS8yMDE3LzA5LzExL2hlcmVzLXdoeS13YXJpby1hbmQtd2FsdWlnaS1kb250LWhhdmUtZ2lybGZyaWVuZHMvIFxuaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDkwMzI0MDkyMTQxL2h0dHA6Ly93aWkua29tYm8uY29tL2FydGljbGUucGhwP2FydGlkPTEyNzI5IFxuaHR0cHM6Ly9zY3JlZW5yYW50LmNvbS9zdXBlci1tYXJpby13YWx1aWdpLWp1c3QtdGhlLXdvcnN0LyBcbmh0dHA6Ly9zdGFydG9mYWRlLnR1bWJsci5jb20vcG9zdC8xNjkzODkwMzUwNTcveHRlYy1maW5uYS1oYWxsaXBpbnlhLWktd2FudC1ldmVyeW9uZS10by1rbm93IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZkFTRXBEdnA1NGsvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9mQVNFcER2cDU0ay9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9mQVNFcER2cDU0ay9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZkFTRXBEdnA1NGsvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9mQVNFcER2cDU0ay9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIndhbHVpZ2kiLAogICAgICAgICAgIndhcmlvIiwKICAgICAgICAgICJtYXJpbyIsCiAgICAgICAgICAibmludGVuZG8iLAogICAgICAgICAgIndhbHVpZ2kgc21hc2ggdWx0aW1hdGUiLAogICAgICAgICAgIndhbHVpZ2kgc21hc2giLAogICAgICAgICAgInN1cGVyIHNtYXNoIGJyb3MiLAogICAgICAgICAgInNtYXNoIGJyb3MiLAogICAgICAgICAgInN1cGVyIHNtYXNoIGJyb3MgdWx0aW1hdGUiLAogICAgICAgICAgIndhbHVpZ2kgZ2FtZSIsCiAgICAgICAgICAid2FsdWlnaSBnYW1lcyIsCiAgICAgICAgICAibWFyaW8gdGVubmlzIiwKICAgICAgICAgICJtYXJpbyB0ZW5uaXMgYWNlcyIsCiAgICAgICAgICAibHVjYWhqaW4iLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZ2FtaW5nIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIldhbHVpZ2kgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBMdWNhaGppbiIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIE5pbnRlbmRvIFZpZGVvcyDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuV2FyaW8gRmFjdHMg4pa6IGh0dHBzOi8vYml0Lmx5LzJNU3gwYVpcbkx1Y2FoamluIOKWuiBodHRwczovL2JpdC5seS8yTWlheXFaXG5cbkR1ZSB0byBOaW50ZW5kbydzIGNvbnRpbnVlZCBsYWNrIG9mIGF0dGVudGlvbiB0b3dhcmRzIFdhbHVpZ2ksIERpZCBZb3UgS25vdyBHYW1pbmcgdGFrZXMgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMgYW5kIEVhc3RlciBlZ2dzIHJlbGF0aW5nIHRvIFdhbHVpZ2khIFdhbHVpZ2kgZmlyc3QgYXBwZWFyZWQgaW4gTWFyaW8gVGVubmlzIG9uIHRoZSBOaW50ZW5kbyA2NCwgYW5kIGhhcyBzaW5jZSBiZWVuIGEgcmVndWxhciBjaGFyYWN0ZXIgaW4gTWFyaW8gc3Bpbi1vZmYgdGl0bGVzIGluY2x1ZGluZyB0aGUgcmVjZW50IE1hcmlvIFRlbm5pcyBBY2VzLiBXYWx1aWdpIGFsc28gaGFzIGEgc3Ryb25nIGNvbm5lY3Rpb24gdG8gV2FyaW8sIGFuZCBvZnRlbiBhcHBlYXJzIGFsb25nc2lkZSBoaW0gYXMgYSBwYWlyLCBidXQgbm90IGluIFN1cGVyIFNtYXNoIEJyb3MgVWx0aW1hdGUuLi4gV2UgcGVyc29uYWxseSBhcmUgaG9waW5nIGZvciBhIFdhbHVpZ2kgZ2FtZSwgb3IgZXZlbiBXYWx1aWdpIGdhbWVzIGluIHRoZSBmdXR1cmUuXG5cbkZvbGxvdyBEWUtHIG9uOlxuVHdpdHRlcjogaHR0cDovL2JpdC5seS8yb09hdnMyXG5JbnN0YWdyYW06IGh0dHA6Ly9iaXQubHkvMm9PNGpqQVxuRmFjZWJvb2s6IGh0dHA6Ly9iaXQubHkvMm5JckZwOVxuV2Vic2l0ZTogaHR0cDovL2JpdC5seS9OcFlEYkRcblxuVmlkZW8gYnkgVGhlQ2FydG9vbkdhbWVyXG5cblNvdXJjZXMvRnVydGhlciBSZWFkaW5nOlxuaHR0cHM6Ly93d3cubWFyaW93aWtpLmNvbS9XYWx1aWdpIFxuaHR0cHM6Ly93d3cubWFyaW93aWtpLmNvbS9Zb2ljaGlfS290YWJlIFxuaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDAwODE3MjMxNDQwL2h0dHA6Ly93d3cubmludGVuZG8uY29tOjgwL242NC9tYXJpb3Rlbm5pcy93YWx1aWdpLmh0bWwgXG5odHRwczovL3R3aXR0ZXIuY29tL01hcmlvQnJvdGhCbG9nL3N0YXR1cy85Njg1MjM3MzYxMDk1MTg4NDkgXG5odHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DeXJpbGxpY19zY3JpcHQjTGV0dGVycyBcbmh0dHBzOi8vd3d3Lm1hcmlvd2lraS5jb20vV2FyaW8lMjdzX1dhcmVob3VzZSBcbmh0dHBzOi8vd3d3Lm1hcmlvd2lraS5jb20vRm9yZW1hbl9TcGlrZSBcbmh0dHBzOi8vbXluaW50ZW5kb25ld3MuY29tLzIwMTcvMDkvMTEvaGVyZXMtd2h5LXdhcmlvLWFuZC13YWx1aWdpLWRvbnQtaGF2ZS1naXJsZnJpZW5kcy8gXG5odHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAwOTAzMjQwOTIxNDEvaHR0cDovL3dpaS5rb21iby5jb20vYXJ0aWNsZS5waHA/YXJ0aWQ9MTI3MjkgXG5odHRwczovL3NjcmVlbnJhbnQuY29tL3N1cGVyLW1hcmlvLXdhbHVpZ2ktanVzdC10aGUtd29yc3QvIFxuaHR0cDovL3N0YXJ0b2ZhZGUudHVtYmxyLmNvbS9wb3N0LzE2OTM4OTAzNTA1Ny94dGVjLWZpbm5hLWhhbGxpcGlueWEtaS13YW50LWV2ZXJ5b25lLXRvLWtub3ciCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTQ0UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjEzODAwNTciLAogICAgICAgICJsaWtlQ291bnQiOiAiMzMyMjkiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiMTA2NSIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI1MjMwIgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:15 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=HIbFTsL1Qns&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:15 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:15 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=EoPYaAmHJMc&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:15 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:15 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=fWyQKk7ptCQ&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:16 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:16 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=8PFg7zrFz34&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:16 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIlI4UzJEWFEyVlZLbkh3Ulo3aUpwMWYwVFBBNCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiVjJNVEdma202QmdUMThib1dReVJNRWhCNGRVIiwKICAgICAgImlkIjogIjhQRmc3enJGejM0IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTctMTItMTZUMjA6MDA6MzRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkN1cGhlYWQgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBUaGVDYXJ0b29uR2FtZXIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgUEMgR2FtZXMgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNvbmljIFNlY3JldHMgJiBDZW5zb3JzaGlwIOKWuiBodHRwOi8vYml0Lmx5LzJqYkpRbnJcblRoZUNhcnRvb25HYW1lciDilrogaHR0cDovL2JpdC5seS8yQ0c1UXowXG5cbkluIHRoaXMgZXBpc29kZSwgRGlkIFlvdSBLbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgRWFzdGVyIGVnZ3MgYW5kIGhpc3RvcnkgZnJvbSBDdXBoZWFkISBUaHJvdWdoIG91ciBhbmFseXNpcyBvZiB0aGUgZ2FtZSwgaXRzIGdhbWVwbGF5IGFuZCBiZXRhIGJ1aWxkcywgd2UgaG9wZSB0byBzaG93IHNvbWUgaW50ZXJlc3RpbmcgZmFjdHMgZnJvbSB0aGUgbWFraW5nIG9mIEN1cGhlYWQgYW5kIGhhdmUgaXRzIGhpc3RvcnkgZXhwbGFpbmVkLlxuXG5Gb2xsb3cgRFlLRyBvbjpcblR3aXR0ZXI6IGh0dHA6Ly9iaXQubHkvMm9PYXZzMlxuSW5zdGFncmFtOiBodHRwOi8vYml0Lmx5LzJvTzRqakFcbkZhY2Vib29rOiBodHRwOi8vYml0Lmx5LzJuSXJGcDlcbldlYnNpdGU6IGh0dHA6Ly9iaXQubHkvTnBZRGJEXG5cblNvdXJjZXMvRnVydGhlciBSZWFkaW5nOlxuaHR0cHM6Ly9rb3Rha3UuY29tL2N1cGhlYWQtZGV2ZWxvcGVycy10YWxrLWN1dC1ib3NzZXMtYW5kLXdoYXRzLWluLXRoZS1jdXAtMTgyMDEyNjMyN1xuaHR0cHM6Ly93d3cuZ2FtZXNwb3QuY29tL2FydGljbGVzL2N1cGhlYWRzLWNyZWF0b3JzLXJldmVhbC10aGVpci1maWdodGluZy1nYW1lLWluZmx1LzExMDAtNjQ1NDM5Ni9cbmh0dHBzOi8va2lsbHNjcmVlbi5jb20vYXJ0aWNsZXMvd2hlcmUtZGlkLWN1cGhlYWQtY29tZS8gXG5odHRwOi8vd3d3LnZnbW9ubGluZS5uZXQva3Jpc3RvZmVyLW1hZGRpZ2FuLWludGVydmlldy8gXG5odHRwOi8vY2EuaWduLmNvbS9hcnRpY2xlcy8yMDE3LzExLzE0L2N1cGhlYWRzLWluY3JlZGlibGUtb3JpZ2luLXN0b3J5LWEtaWduLXVuZmlsdGVyZWQtMjU/d2F0Y2ggXG5odHRwOi8vdGltZS5jb20vNDEyMzE1MC9jdXBoZWFkLXByZXZpZXcvIFxuaHR0cDovL3d3dy5nYW1lc3JhZGFyLmNvbS93ZS1xdWl0LW91ci1qb2JzLXJlbW9ydGdhZ2VkLW91ci1ob3VzZXMtaG93LXJlbGVudGxlc3MtcGFzc2lvbi1tYWRlLWN1cGhlYWQtYS1yZWFsaXR5LyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzhQRmc3enJGejM0L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOFBGZzd6ckZ6MzQvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOFBGZzd6ckZ6MzQvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzhQRmc3enJGejM0L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOFBGZzd6ckZ6MzQvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJjdXBoZWFkIiwKICAgICAgICAgICJjdXBoZWFkIGJvc3MiLAogICAgICAgICAgImN1cGhlYWQgZ2FtZSIsCiAgICAgICAgICAiR2FtaW5nIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImdhbWUgY3VwaGVhZCIsCiAgICAgICAgICAiY3VwaGVhZCBwczQiLAogICAgICAgICAgImN1cGhlYWQgeGJveCIsCiAgICAgICAgICAibXVnbWFuIiwKICAgICAgICAgICJjdXBoZWFkIHhib3ggb25lIiwKICAgICAgICAgICJjdXBoZWFkIHN0ZWFtIiwKICAgICAgICAgICJwYyBnYW1lcyIsCiAgICAgICAgICAiY3VwaGVhZCBnYW1lcGxheSIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAiY3VwaGVhZCBib3NzZXMiLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgImN1cCBoZWFkIiwKICAgICAgICAgICJhbmFseXNpcyIsCiAgICAgICAgICAiYmV0YSIsCiAgICAgICAgICAiZWFzdGVyIGVnZyIsCiAgICAgICAgICAiZWFzdGVyIGVnZ3MiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiQ3VwaGVhZCAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFRoZUNhcnRvb25HYW1lciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIFBDIEdhbWVzIEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5Tb25pYyBTZWNyZXRzICYgQ2Vuc29yc2hpcCDilrogaHR0cDovL2JpdC5seS8yamJKUW5yXG5UaGVDYXJ0b29uR2FtZXIg4pa6IGh0dHA6Ly9iaXQubHkvMkNHNVF6MFxuXG5JbiB0aGlzIGVwaXNvZGUsIERpZCBZb3UgS25vdyBHYW1pbmcgdGFrZXMgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIEVhc3RlciBlZ2dzIGFuZCBoaXN0b3J5IGZyb20gQ3VwaGVhZCEgVGhyb3VnaCBvdXIgYW5hbHlzaXMgb2YgdGhlIGdhbWUsIGl0cyBnYW1lcGxheSBhbmQgYmV0YSBidWlsZHMsIHdlIGhvcGUgdG8gc2hvdyBzb21lIGludGVyZXN0aW5nIGZhY3RzIGZyb20gdGhlIG1ha2luZyBvZiBDdXBoZWFkIGFuZCBoYXZlIGl0cyBoaXN0b3J5IGV4cGxhaW5lZC5cblxuRm9sbG93IERZS0cgb246XG5Ud2l0dGVyOiBodHRwOi8vYml0Lmx5LzJvT2F2czJcbkluc3RhZ3JhbTogaHR0cDovL2JpdC5seS8yb080ampBXG5GYWNlYm9vazogaHR0cDovL2JpdC5seS8ybklyRnA5XG5XZWJzaXRlOiBodHRwOi8vYml0Lmx5L05wWURiRFxuXG5Tb3VyY2VzL0Z1cnRoZXIgUmVhZGluZzpcbmh0dHBzOi8va290YWt1LmNvbS9jdXBoZWFkLWRldmVsb3BlcnMtdGFsay1jdXQtYm9zc2VzLWFuZC13aGF0cy1pbi10aGUtY3VwLTE4MjAxMjYzMjdcbmh0dHBzOi8vd3d3LmdhbWVzcG90LmNvbS9hcnRpY2xlcy9jdXBoZWFkcy1jcmVhdG9ycy1yZXZlYWwtdGhlaXItZmlnaHRpbmctZ2FtZS1pbmZsdS8xMTAwLTY0NTQzOTYvXG5odHRwczovL2tpbGxzY3JlZW4uY29tL2FydGljbGVzL3doZXJlLWRpZC1jdXBoZWFkLWNvbWUvIFxuaHR0cDovL3d3dy52Z21vbmxpbmUubmV0L2tyaXN0b2Zlci1tYWRkaWdhbi1pbnRlcnZpZXcvIFxuaHR0cDovL2NhLmlnbi5jb20vYXJ0aWNsZXMvMjAxNy8xMS8xNC9jdXBoZWFkcy1pbmNyZWRpYmxlLW9yaWdpbi1zdG9yeS1hLWlnbi11bmZpbHRlcmVkLTI1P3dhdGNoIFxuaHR0cDovL3RpbWUuY29tLzQxMjMxNTAvY3VwaGVhZC1wcmV2aWV3LyBcbmh0dHA6Ly93d3cuZ2FtZXNyYWRhci5jb20vd2UtcXVpdC1vdXItam9icy1yZW1vcnRnYWdlZC1vdXItaG91c2VzLWhvdy1yZWxlbnRsZXNzLXBhc3Npb24tbWFkZS1jdXBoZWFkLWEtcmVhbGl0eS8iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTU4UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogInRydWUiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTA5ODY4MyIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyNjMwMiIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI2ODUiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMTQ0MSIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:16 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=0MYNaj5jGFE&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:16 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:16 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=dwF0ezw8evA&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:17 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:17 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=Sk3h7DSu90w&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:17 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:17 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=x6tPkdkmHPY&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:17 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:17 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=piJT6hvZXBQ&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:18 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:18 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=rKXfQa_FRVo&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:18 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:18 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=gGpSLL1ILc0&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:18 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:18 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=OGmACelA2sA&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:18 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:19 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=SmFE1RxgMgc&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:19 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:19 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=dFSdU9PO460&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:19 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:19 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=CEfY2Rq28DM&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:19 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:19 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=98yXiD6T9ag&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:20 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImhuN0VOSjRHRnY2Q05xRFdMWW1rdUZWaE1ObyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAieWV1bk5keGRwQTBNVTZVLUloc2RIckk5cTRFIiwKICAgICAgImlkIjogIjk4eVhpRDZUOWFnIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTctMDEtMjlUMjA6MDA6MTVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlNpbXBzb25zIEdhbWVzIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQ2FkZGljYXJ1cyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgZmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk1vcmUgU2ltcHNvbnMgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMmtHTHRyVFxuQ2FkZGljYXJ1cyDilrogaHR0cDovL2JpdC5seS8yazVpVlpOXG5cbkluIHRoaXMgZXBpc29kZSwgRGlkIFlvdSBLbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgRWFzdGVyIGVnZ3MgYW5kIGhpc3Rvcnkgb2YgU2ltcHNvbnMgR2FtZXMuIFRoZSBTaW1wc29ucyBpcyBhbiBhbmltYXRlZCBzaXRjb20gY3JlYXRlZCBieSBNYXR0IEdyb2VuaW5nIGZvciBGb3guIFRoZSBzZXJpZXMgZm9jdXNlcyBvbiB0aGUgU2ltcHNvbiBmYW1pbHksIGNvbnNpc3Rpbmcgb2YgSG9tZXIsIE1hcmdlLCBCYXJ0LCBMaXNhLCBhbmQgTWFnZ2llLCB3aG8gbGl2ZSBpbiB0aGUgZmljdGlvbmFsIHRvd24gb2YgU3ByaW5nZmllbGQuIFRoZXJlJ3MgYmVlbiBuZWFybHkgMzAgU2ltcHNvbnMgZ2FtZXMsIGFuZCB0aHJvdWdoIG91ciBhbmFseXNpcyBvZiB0aGUgZ2FtZXMsIHRoZWlyIGdhbWVwbGF5IGFuZCBiZXRhIGJ1aWxkcywgd2UgZXhwb3NlIHNvbWUgaW50ZXJlc3Rpbmcgc2VjcmV0cy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblJlc2VhcmNoL1dyaXRpbmcgYnkgRXZlbHluIE1pYW5vd3NraSBAR2Vlek5pY2tcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5TY3JpcHQgRWRpdGluZyBieSBDYXJhIEhpbGxzdG9ja1xuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOTh5WGlENlQ5YWcvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS85OHlYaUQ2VDlhZy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS85OHlYaUQ2VDlhZy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOTh5WGlENlQ5YWcvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS85OHlYaUQ2VDlhZy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgInNpbXBzb25zIiwKICAgICAgICAgICJzaW1wc29ucyBnYW1lcyIsCiAgICAgICAgICAiZ2FtZXMiLAogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAidGhlIHNpbXBzb25zIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgImNhZGRpY2FydXMiLAogICAgICAgICAgInRoZSBzaW1wc29ucyBnYW1lIiwKICAgICAgICAgICJzaW1wc29ucyBnYW1lIiwKICAgICAgICAgICJzaW1wc29ucyBoaXQgYW5kIHJ1biIsCiAgICAgICAgICAiaGl0IGFuZCBydW4iLAogICAgICAgICAgImNhZGR5IiwKICAgICAgICAgICJhbmFseXNpcyIsCiAgICAgICAgICAiZHlrIiwKICAgICAgICAgICJkeWtnIiwKICAgICAgICAgICJkaWQgeW91IGtub3ciLAogICAgICAgICAgImJldGEiLAogICAgICAgICAgImVhc3RlciBlZ2ciLAogICAgICAgICAgImVhc3RlciBlZ2dzIiwKICAgICAgICAgICJ0cml2aWEiLAogICAgICAgICAgImhvbWVyIiwKICAgICAgICAgICJob21lciBzaW1wc29uIiwKICAgICAgICAgICJiYXJ0IiwKICAgICAgICAgICJiYXJ0IHNpbXBzb24iLAogICAgICAgICAgInNpbXBzb24iLAogICAgICAgICAgImRvY3VtZW50YXJ5IiwKICAgICAgICAgICJoaXN0b3J5IiwKICAgICAgICAgICJtYWtpbmcgb2YiLAogICAgICAgICAgImdhbWVwbGF5IiwKICAgICAgICAgICJnYW1lIHBsYXkiLAogICAgICAgICAgImFuaW1hdGlvbiIsCiAgICAgICAgICAiY2FydG9vbiIsCiAgICAgICAgICAiZmFjdHMiLAogICAgICAgICAgInNlY3JldCByYWctdGFnLWFsaW9ubyBmcmllbmRvIiwKICAgICAgICAgICJhbmltYXRlZCIsCiAgICAgICAgICAiZm94IiwKICAgICAgICAgICJNYXR0IEdyb2VuaW5nIiwKICAgICAgICAgICJzcHJpbmdmaWVsZCIsCiAgICAgICAgICAibWFyZ2UiLAogICAgICAgICAgImxpc2EiLAogICAgICAgICAgIm1hZ2dpZSIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJTaW1wc29ucyBHYW1lcyAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIENhZGRpY2FydXMiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgZmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk1vcmUgU2ltcHNvbnMgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMmtHTHRyVFxuQ2FkZGljYXJ1cyDilrogaHR0cDovL2JpdC5seS8yazVpVlpOXG5cbkluIHRoaXMgZXBpc29kZSwgRGlkIFlvdSBLbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgRWFzdGVyIGVnZ3MgYW5kIGhpc3Rvcnkgb2YgU2ltcHNvbnMgR2FtZXMuIFRoZSBTaW1wc29ucyBpcyBhbiBhbmltYXRlZCBzaXRjb20gY3JlYXRlZCBieSBNYXR0IEdyb2VuaW5nIGZvciBGb3guIFRoZSBzZXJpZXMgZm9jdXNlcyBvbiB0aGUgU2ltcHNvbiBmYW1pbHksIGNvbnNpc3Rpbmcgb2YgSG9tZXIsIE1hcmdlLCBCYXJ0LCBMaXNhLCBhbmQgTWFnZ2llLCB3aG8gbGl2ZSBpbiB0aGUgZmljdGlvbmFsIHRvd24gb2YgU3ByaW5nZmllbGQuIFRoZXJlJ3MgYmVlbiBuZWFybHkgMzAgU2ltcHNvbnMgZ2FtZXMsIGFuZCB0aHJvdWdoIG91ciBhbmFseXNpcyBvZiB0aGUgZ2FtZXMsIHRoZWlyIGdhbWVwbGF5IGFuZCBiZXRhIGJ1aWxkcywgd2UgZXhwb3NlIHNvbWUgaW50ZXJlc3Rpbmcgc2VjcmV0cy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblJlc2VhcmNoL1dyaXRpbmcgYnkgRXZlbHluIE1pYW5vd3NraSBAR2Vlek5pY2tcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5TY3JpcHQgRWRpdGluZyBieSBDYXJhIEhpbGxzdG9ja1xuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUNk00MlMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIxMTYyMjU1IiwKICAgICAgICAibGlrZUNvdW50IjogIjE5NTk4IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjMyNiIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI5NDYiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:20 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=LosGDVzR22o&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:20 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:20 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=CuQAxQ7T4Js&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:20 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:20 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=iHtldAQ3ijg&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:21 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInoxZk9iRThMck40S1RwNDhGUEMyUFUyeUJmdyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiTEV3M0lyLTRKc3g4V092RXhLelVaUGZkYUpFIiwKICAgICAgImlkIjogImlIdGxkQVEzaWpnIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMTItMTlUMjA6MTQ6MDRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkJvd3NlciAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIEVydXB0aW9uIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiR2V0IHlvdXIgb3duIGNyYXRlIGZyb20gTG9vdCBDcmF0ZSBhdCBodHRwOi8vd3d3Lmxvb3RjcmF0ZS5jb20vRFlLRy4gVXNlIGNvZGUgJ0RZS0cnIHRvIHNhdmUgMTAlIVxuU1VCU0NSSUJFIGZvciBtb3JlIE5pbnRlbmRvIGZhY3RzIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5Nb3JlIE1hcmlvIEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzJnV3huVWNcblxuSW4gdGhpcyBlcGlzb2RlIG9mIERpZCBZb3UgS25vdyBHYW1pbmcsIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIEJvd3NlciBmcm9tIHRoZSBNYXJpbyBmcmFuY2hpc2UuIEluIG91ciBhbmFseXNpcyBvZiB0aGUgY2hhcmFjdGVyIGFuZCBNYXJpbyBiZXRhIGFzc2V0cywgd2UgdW5jb3ZlcmVkIHRoYXQgTWFyaW8gY3JlYXRvciBTaGlnZXJ1IE1peWFtb3RvIGRpZG4ndCBjcmVhdGUgdGhlIGRlc2lnbiBmb3IgQm93c2VyIHdlIGtub3cgdG9kYXkuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZWQgYnkgaHR0cDovL2FyY2FkZWEuY29cblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvaUh0bGRBUTNpamcvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9pSHRsZEFRM2lqZy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9pSHRsZEFRM2lqZy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvaUh0bGRBUTNpamcvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9pSHRsZEFRM2lqZy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgImJvd3NlciIsCiAgICAgICAgICAibWFyaW8iLAogICAgICAgICAgInN1cGVyIG1hcmlvIiwKICAgICAgICAgICJzdXBlciIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAiZ2FtaW5nIiwKICAgICAgICAgICJkaWR5b3Vrbm93Z2FtaW5nIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgImRpZCIsCiAgICAgICAgICAieW91IiwKICAgICAgICAgICJrbm93IiwKICAgICAgICAgICJuaW50ZW5kbyIsCiAgICAgICAgICAiZmFjdHMiLAogICAgICAgICAgImVhc3RlciBlZ2ciLAogICAgICAgICAgImVhc3RlciBlZ2dzIiwKICAgICAgICAgICJtYXJpbyBydW4iLAogICAgICAgICAgInN1cGVyIG1hcmlvIHJ1biIsCiAgICAgICAgICAiYmV0YSIsCiAgICAgICAgICAiYW5hbHlzaXMiLAogICAgICAgICAgIm1ha2luZyBvZiIsCiAgICAgICAgICAiZG9jdW1lbnRhcnkiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiQm93c2VyIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gRXJ1cHRpb24iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkdldCB5b3VyIG93biBjcmF0ZSBmcm9tIExvb3QgQ3JhdGUgYXQgaHR0cDovL3d3dy5sb290Y3JhdGUuY29tL0RZS0cuIFVzZSBjb2RlICdEWUtHJyB0byBzYXZlIDEwJSFcblNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBmYWN0cyDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuTW9yZSBNYXJpbyBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yZ1d4blVjXG5cbkluIHRoaXMgZXBpc29kZSBvZiBEaWQgWW91IEtub3cgR2FtaW5nLCB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiBCb3dzZXIgZnJvbSB0aGUgTWFyaW8gZnJhbmNoaXNlLiBJbiBvdXIgYW5hbHlzaXMgb2YgdGhlIGNoYXJhY3RlciBhbmQgTWFyaW8gYmV0YSBhc3NldHMsIHdlIHVuY292ZXJlZCB0aGF0IE1hcmlvIGNyZWF0b3IgU2hpZ2VydSBNaXlhbW90byBkaWRuJ3QgY3JlYXRlIHRoZSBkZXNpZ24gZm9yIEJvd3NlciB3ZSBrbm93IHRvZGF5LlxuXG7ilrogTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2Fcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcbkZhbGxvdXQgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFOdFh3VWtcblxuVm9pY2VkIGJ5IGh0dHA6Ly9hcmNhZGVhLmNvXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuUmVzZWFyY2gvV3JpdGluZyBieSBLZWxsZW4gTWNJbnR5cmVcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDdNMjlTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTQ5MzcxMyIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyODk1MiIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI0NTkiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMTc2OCIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:21 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=aKZ7Uskn5_E&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:21 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:21 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=uoTMIc5uao8&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:21 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImRYLVE3dXlUcllNV3hyUTNEcEFHYXhRamZYTSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiVk5BZXc3X2NSNnRBaVdyYTRFdXJHaXR6VXZFIiwKICAgICAgImlkIjogInVvVE1JYzV1YW84IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMTEtMThUMjA6MDQ6NDRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlBva2Vtb24gU2VjcmV0cyAmIENlbnNvcnNoaXAgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBSZW1peCBvZiBXZWVrbHlUdWJlU2hvdyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblBva2Vtb24gQW5pbWUgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMmY4U1hVb1xuUG9rZW1vbiBHYW1lIEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzJnMGJDUkdcblxuVG8gY2VsZWJyYXRlIHRoZSByZWxlc2Ugb2YgUG9rZW1vbiBTdW4gYW5kIE1vb24sIERpZCBZb3UgS25vdyBHYW1pbmcgdGFrZXMgYSBsb29rIGF0IHNvbWUgb2YgdGhlIGNlbnNvcnNoaXAgYW5kIHNlY3JldHMgb2YgdGhlIFBva2Vtb24gZnJhbmNoaXNlLiBTb21lIG9mIG91ciBjb3ZlcmFnZSBleHBsb3JlcyB0aGUgYmV0YSBvZiB0aGUgb3JpZ2luYWwgUG9rZW1vbiBnYW1lcywgd2hpY2ggcmV2ZWFscyBCcm9jayB3YXNuJ3Qgb3JpZ2luYWxseSB0aGUgZmlyc3QgZ3ltIGxlYWRlci4gV2UgYWxzbyB0YWtlIGEgbG9vayBhdCBzb21lIG9mIHRoZSBuZXcgUG9rZW1vbiBnYW1lcy4gRG9uJ3QgZm9yZ2V0IHRvIGFsc28gY2hlY2sgb3V0IG91ciB2aWRlbyBvbiB0aGUgUG9rZW1vbiBBbmltZSBmb3IgRGlkIFlvdSBLbm93IE1vdmllcyB3aXRoIHJlbWl4IG92ZXIgb24gdGhlIEZpbG0gVGhlb3J5IGNoYW5uZWwuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZWQgYnkgaHR0cDovL3lvdXR1YmUuY29tL3dlZWtseXR1YmVzaG93MlxuVmlkZW8gRWRpdGVkIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuV3JpdGluZyBieSBLZWxsZW4gTWNJbnR5cmVcblNjcml0cCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91b1RNSWM1dWFvOC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3VvVE1JYzV1YW84L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3VvVE1JYzV1YW84L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91b1RNSWM1dWFvOC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3VvVE1JYzV1YW84L21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAicG9rZW1vbiIsCiAgICAgICAgICAic2VjcmV0cyIsCiAgICAgICAgICAiY2Vuc29yc2hpcCIsCiAgICAgICAgICAiYW5pbWUiLAogICAgICAgICAgInN1biIsCiAgICAgICAgICAibW9vbiIsCiAgICAgICAgICAicG9rZW1vbiBzdW4gbW9vbiIsCiAgICAgICAgICAic3VuIG1vb24iLAogICAgICAgICAgInBva2Vtb24gc3VuIGFuZCBtb29uIiwKICAgICAgICAgICJzdW4gYW5kIG1vb24iLAogICAgICAgICAgInBva2Vtb24gc3VuIiwKICAgICAgICAgICJiZXRhIiwKICAgICAgICAgICJwb2tlbW9uIG1vb24iLAogICAgICAgICAgInN1biBhbmQgbW9vbiBwb2tlbW9uIiwKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAiZGlkIiwKICAgICAgICAgICJ5b3UiLAogICAgICAgICAgImtub3ciLAogICAgICAgICAgIm5pbnRlbmRvIiwKICAgICAgICAgICJwb2tlbW9uIGVwaXNvZGUiLAogICAgICAgICAgInJlbWl4IiwKICAgICAgICAgICJlcGlzb2RlIiwKICAgICAgICAgICJ3ZWVrbHl0dWJlc2hvdyIsCiAgICAgICAgICAiZ2FtZSIsCiAgICAgICAgICAiZ2FtZXMiLAogICAgICAgICAgInBva2Vtb24gZ2FtZXMiLAogICAgICAgICAgInZpZGVvIGdhbWUiLAogICAgICAgICAgInZpZGVvIGdhbWVzIiwKICAgICAgICAgICJ2aWRlbyIsCiAgICAgICAgICAicG9rZW1vbiBnbyIsCiAgICAgICAgICAicG9rZW1vbiBzb25nIiwKICAgICAgICAgICJwb2tlbW9uIHRoZW1lIiwKICAgICAgICAgICJwb2tlbW9uIGJhdHRsZSIsCiAgICAgICAgICAicG9rw6ltb24iLAogICAgICAgICAgIm5ldyIsCiAgICAgICAgICAibmV3IHBva2Vtb24iLAogICAgICAgICAgImZhY3RzIiwKICAgICAgICAgICJkaWQgeW91IGtub3cgbW92aWVzIiwKICAgICAgICAgICJkeWttb3ZpZXMiLAogICAgICAgICAgImZpbG0gdGhlb3J5IgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlBva2Vtb24gU2VjcmV0cyAmIENlbnNvcnNoaXAgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBSZW1peCBvZiBXZWVrbHlUdWJlU2hvdyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIE5pbnRlbmRvIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuUG9rZW1vbiBBbmltZSBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yZjhTWFVvXG5Qb2tlbW9uIEdhbWUgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMmcwYkNSR1xuXG5UbyBjZWxlYnJhdGUgdGhlIHJlbGVzZSBvZiBQb2tlbW9uIFN1biBhbmQgTW9vbiwgRGlkIFlvdSBLbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgc29tZSBvZiB0aGUgY2Vuc29yc2hpcCBhbmQgc2VjcmV0cyBvZiB0aGUgUG9rZW1vbiBmcmFuY2hpc2UuIFNvbWUgb2Ygb3VyIGNvdmVyYWdlIGV4cGxvcmVzIHRoZSBiZXRhIG9mIHRoZSBvcmlnaW5hbCBQb2tlbW9uIGdhbWVzLCB3aGljaCByZXZlYWxzIEJyb2NrIHdhc24ndCBvcmlnaW5hbGx5IHRoZSBmaXJzdCBneW0gbGVhZGVyLiBXZSBhbHNvIHRha2UgYSBsb29rIGF0IHNvbWUgb2YgdGhlIG5ldyBQb2tlbW9uIGdhbWVzLiBEb24ndCBmb3JnZXQgdG8gYWxzbyBjaGVjayBvdXQgb3VyIHZpZGVvIG9uIHRoZSBQb2tlbW9uIEFuaW1lIGZvciBEaWQgWW91IEtub3cgTW92aWVzIHdpdGggcmVtaXggb3ZlciBvbiB0aGUgRmlsbSBUaGVvcnkgY2hhbm5lbC5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZvaWNlZCBieSBodHRwOi8veW91dHViZS5jb20vd2Vla2x5dHViZXNob3cyXG5WaWRlbyBFZGl0ZWQgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuU2NyaXRwIEVkaXRpbmcgYnkgQ2FyYSBIaWxsc3RvY2tcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDZNNTdTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTk1MzQ3MSIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyOTUxMyIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI0MDQiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMTY1NiIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:21 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=m1eWduSmLRE&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:22 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImdIZDViNm1FRkxHNTJzN2Y0bklSSDFVZ3pobyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiSWE1VU1jX25vanRhakhqME5yN3RlWVdVMWljIiwKICAgICAgImlkIjogIm0xZVdkdVNtTFJFIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMTAtMjJUMjA6Mzk6MTdaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlByaW5jZXNzIFBlYWNoIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSmltbXkgV2hldHplbCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5OaW50ZW5kbyAzRFMgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMmVFbkUwWFxuTW9yZSBNYXJpbyBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yZVQ2bldIXG5cbkluIHdha2Ugb2YgdGhlIE5pbnRlbmRvIFN3aXRjaCAoTlgpIGFuZCBNYXJpbyByZXZlYWwsIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIE1hcmlvJ3MgUHJpbmNlc3MgUGVhY2guIFByaW5jZXNzIFBlYWNoIFRvYWRzdG9vbCB3YXMgb3JpZ2luYWxseSBjcmVhdGVkIGJ5IFNoaWdlcnUgTWl5YW1vdG8sIGFuZCBsYXRlciByZWRlc2lnbmVkIGJ5IFlvaWNoaSBLb3RhYmUuIEFsdGhvdWdoIFBlYWNoIGhhc24ndCBoYWQgbXVjaCBvZiBhbiBpbXBhY3Qgb24gdGhlIHNlcmllcycgZ2FtZXBsYXksIHNoZSdzIGFwcGVhcmVkIGluIG1vcmUgdmlkZW8gZ2FtZXMgdGhhbiBhbnkgb3RoZXIgZmVtYWxlIGNoYXJhY3RlciBpbiBoaXN0b3J5LCBuZWFyaW5nIDEwMCB0aXRsZXMuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5WaWRlbyBWb2ljZWQgYnkgaHR0cDovL3lvdXR1YmUuY29tL0ppbW15V2hldHplbFxuVmlkZW8gRWRpdGluZyBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cblJlc2VhcmNoL1dyaXRpbmcgYnkgS2VsbGVuIE1jSW50eXJlXG5TY3JpcHQgRWRpdGluZyBieSBDYXJhIEhpbGxzdG9ja1xuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbTFlV2R1U21MUkUvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tMWVXZHVTbUxSRS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tMWVXZHVTbUxSRS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbTFlV2R1U21MUkUvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tMWVXZHVTbUxSRS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgInBlYWNoIiwKICAgICAgICAgICJwcmluY2VzcyBwZWFjaCIsCiAgICAgICAgICAicHJpbmNlc3MiLAogICAgICAgICAgIk1hcmlvIiwKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAiZGlkIiwKICAgICAgICAgICJ5b3UiLAogICAgICAgICAgImtub3ciLAogICAgICAgICAgIk5pbnRlbmRvIiwKICAgICAgICAgICJuaW50ZW5kbyBzd2l0Y2giLAogICAgICAgICAgInN3aXRjaCIsCiAgICAgICAgICAiZG9jdW1lbnRhcnkiLAogICAgICAgICAgImV4cGxhaW5lZCIsCiAgICAgICAgICAidG9hZHN0b29sIiwKICAgICAgICAgICJqaW1teSB3aGV0emVsIiwKICAgICAgICAgICJuaW50ZW5kbyBueCByZXZlYWwiLAogICAgICAgICAgInN1cGVyIG1hcmlvIiwKICAgICAgICAgICJtYXJpbyBicm9zIiwKICAgICAgICAgICJzdXBlciIsCiAgICAgICAgICAiYnJvcyIsCiAgICAgICAgICAicGFwZXIgbWFyaW8iLAogICAgICAgICAgImdhbWVzIiwKICAgICAgICAgICJ2aWRlbyBnYW1lcyIsCiAgICAgICAgICAic3VwZXIgcHJpbmNlc3MgcGVhY2giLAogICAgICAgICAgImdhbWVwbGF5IiwKICAgICAgICAgICJuaW50ZW5kbyBkaXJlY3QiLAogICAgICAgICAgIndpaSB1IiwKICAgICAgICAgICJnYW1lIiwKICAgICAgICAgICJuaW50ZW5kbyBueCIsCiAgICAgICAgICAibngiLAogICAgICAgICAgInZpZGVvIGdhbWUiLAogICAgICAgICAgImRzIiwKICAgICAgICAgICJuaW50ZW5kbyBkcyIsCiAgICAgICAgICAiM2RzIiwKICAgICAgICAgICJuaW50ZW5kbyAzZHMiLAogICAgICAgICAgIndpaSIsCiAgICAgICAgICAiZ2FtZWN1YmUiLAogICAgICAgICAgImx1aWdpIiwKICAgICAgICAgICJtYXJpbyBrYXJ0IiwKICAgICAgICAgICJlYXN0ZXIgZWdnIiwKICAgICAgICAgICJmYWN0cyIsCiAgICAgICAgICAiY29sb3Igc3BsYXNoIiwKICAgICAgICAgICJkaWR5b3Vrbm93Z2FtaW5nIiwKICAgICAgICAgICJkeWtnIiwKICAgICAgICAgICJwbGF5IgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlByaW5jZXNzIFBlYWNoIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSmltbXkgV2hldHplbCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk5pbnRlbmRvIDNEUyBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yZUVuRTBYXG5Nb3JlIE1hcmlvIEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzJlVDZuV0hcblxuSW4gd2FrZSBvZiB0aGUgTmludGVuZG8gU3dpdGNoIChOWCkgYW5kIE1hcmlvIHJldmVhbCwgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgTWFyaW8ncyBQcmluY2VzcyBQZWFjaC4gUHJpbmNlc3MgUGVhY2ggVG9hZHN0b29sIHdhcyBvcmlnaW5hbGx5IGNyZWF0ZWQgYnkgU2hpZ2VydSBNaXlhbW90bywgYW5kIGxhdGVyIHJlZGVzaWduZWQgYnkgWW9pY2hpIEtvdGFiZS4gQWx0aG91Z2ggUGVhY2ggaGFzbid0IGhhZCBtdWNoIG9mIGFuIGltcGFjdCBvbiB0aGUgc2VyaWVzJyBnYW1lcGxheSwgc2hlJ3MgYXBwZWFyZWQgaW4gbW9yZSB2aWRlbyBnYW1lcyB0aGFuIGFueSBvdGhlciBmZW1hbGUgY2hhcmFjdGVyIGluIGhpc3RvcnksIG5lYXJpbmcgMTAwIHRpdGxlcy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIFZvaWNlZCBieSBodHRwOi8veW91dHViZS5jb20vSmltbXlXaGV0emVsXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuUmVzZWFyY2gvV3JpdGluZyBieSBLZWxsZW4gTWNJbnR5cmVcblNjcmlwdCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTM0UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjEyNDI1MTYiLAogICAgICAgICJsaWtlQ291bnQiOiAiMjUwMzciLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiMjk2IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjE5NTYiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:22 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=wmXBD_fOgv0&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:22 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIjJJZXhjb1FnOV83cm9ReFQ2NGVTcHBCa2NqdyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAieTVFOEwtN0E1Q01FNTE3X1hPa1Jrd1NibmpzIiwKICAgICAgImlkIjogIndtWEJEX2ZPZ3YwIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMTAtMDlUMTk6MDI6MjJaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkJhbmpvLUthem9vaWUgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBUaGVDYXJ0b29uR2FtZXIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgTmludGVuZG8gRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbkNvbmtlciBGYWN0cyDilrog4pa6IGh0dHA6Ly9iaXQubHkvMmRYaXJScVxuTmludGVuZG8gNjQgRmFjdHMg4pa6aHR0cDovL2JpdC5seS8yZFVwVDBlXG5cbkluIGFudGljaXBhdGlvbiBvZiBZb29rYSBMYXlsZWUsIERpZCBZb3Uga25vdyBHYW1pbmcgdGFrZXMgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBFYXN0ZXIgZWdncyBvZiB0aGUgQmFuam8tS2F6b29pZSBmcmFuY2hpc2UuIEJhbmpvLUthem9vaWUgd2FzIGNyZWF0ZWQgYnkgUmFyZSBhbmQgcHVibGlzaGVkIGJ5IE5pbnRlbmRvIGZvciB0aGUgTmludGVuZG8gNjQgKE42NCkuIFRoZSBnYW1lLCBhbG9uZyB3aXRoIGl0J3Mgc2VxdWVsIEJhbmpvLVRvb2llIHdhcyByZS1yZWxlYXNlZCBmb3IgdGhlIFhib3ggMzYwLCBhbmQgbGF0ZXIgdGhlIFhib3ggT25lIHZpYSBSYXJlIFJlcGxheS4gVGhlIHNlcmllcycgcGxhdGZvcm1pbmcgZ2FtZXBsYXkgd2FzIHJldmlzZWQgZm9yIHRoZSB0aGlyZCBnYW1lIGluIHRoZSBzZXJpZXMsIE51dHMgYW5kIEJvbHRzLiBCYW5qby1LYXpvb2llJ3MgZ2FtZSBwbGF5IGFuZCBkZXNpZ24gY2hhbmdlZCBkcmFzdGljYWxseSBjb21wYXJlZCB0byB0aGUgaXRzIGJldGEsIGFuZCB0aGUgZ2FtZSBoYXMgcG9zc2libGUgY29ubmVjdGlvbnMgdG8gRG9ua2V5IEtvbmcgNjQuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5WaWRlbyBFZGl0ZWQgYnkgVGhlQ2FydG9vbkdhbWVyXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IENldGggUmVpdHNjaCBcbkFkZGl0aW9uYWwgUmVzZWFyY2ggYnkgVGhlQ2FydG9vbkdhbWVyXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS93bVhCRF9mT2d2MC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3dtWEJEX2ZPZ3YwL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3dtWEJEX2ZPZ3YwL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS93bVhCRF9mT2d2MC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3dtWEJEX2ZPZ3YwL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiYmFuam8iLAogICAgICAgICAgImthem9vaWUiLAogICAgICAgICAgImJhbmpvIGthem9vaWUiLAogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJkaWQgeW91IGtub3cgZ2FtaW5nIiwKICAgICAgICAgICJkaWQiLAogICAgICAgICAgInlvdSIsCiAgICAgICAgICAia25vdyIsCiAgICAgICAgICAidG9vaWUiLAogICAgICAgICAgImJhbmpvIHRvb2llIiwKICAgICAgICAgICJuaW50ZW5kbyIsCiAgICAgICAgICAibmludGVuZG8gNjQiLAogICAgICAgICAgIm42NCIsCiAgICAgICAgICAiNjQiLAogICAgICAgICAgImdhbWVwbGF5IiwKICAgICAgICAgICJnYW1lIiwKICAgICAgICAgICJwbGF5IiwKICAgICAgICAgICJiYW5qby1rYXpvb2llIiwKICAgICAgICAgICJyYXJlIiwKICAgICAgICAgICJiYW5qby10b29pZSIsCiAgICAgICAgICAiZ2FtZXMiLAogICAgICAgICAgInhib3giLAogICAgICAgICAgInJhcmUgcmVwbGF5IiwKICAgICAgICAgICJ4Ym94IDM2MCIsCiAgICAgICAgICAieGJveDM2MCIsCiAgICAgICAgICAiMzYwIiwKICAgICAgICAgICJ4Ym94IG9uZSIsCiAgICAgICAgICAib25lIiwKICAgICAgICAgICJtYWtpbmcgb2YiLAogICAgICAgICAgImJldGEiLAogICAgICAgICAgImJrIiwKICAgICAgICAgICJnYW1lIHBsYXkiLAogICAgICAgICAgInNuZXMiLAogICAgICAgICAgIm1pY3Jvc29mdCIsCiAgICAgICAgICAiYmFuam8gYW5kIGthem9vaWUiLAogICAgICAgICAgIm51dHMgYW5kIGJvbHRzIiwKICAgICAgICAgICJiYW5qbyBrYXpvb2llIDY0IiwKICAgICAgICAgICJ5b29rYSBsYXlsZWUiLAogICAgICAgICAgImJhbmpvIGthem9vaWUgbXVzaWMiLAogICAgICAgICAgImJhbmpvIGthem9vaWUgdGhlbWUiLAogICAgICAgICAgInJhcmV3YXJlIiwKICAgICAgICAgICJtdW1ibyIsCiAgICAgICAgICAiZG9ua2V5IGtvbmciLAogICAgICAgICAgImRvbmtleSBrb25nIDY0IiwKICAgICAgICAgICJkazY0IiwKICAgICAgICAgICJhbmQiLAogICAgICAgICAgInJldHJvIiwKICAgICAgICAgICJkeWtnIiwKICAgICAgICAgICJqb250cm9uIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIkJhbmpvLUthem9vaWUgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBUaGVDYXJ0b29uR2FtZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBGYWN0cyDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuQ29ua2VyIEZhY3RzIOKWuiDilrogaHR0cDovL2JpdC5seS8yZFhpclJxXG5OaW50ZW5kbyA2NCBGYWN0cyDilrpodHRwOi8vYml0Lmx5LzJkVXBUMGVcblxuSW4gYW50aWNpcGF0aW9uIG9mIFlvb2thIExheWxlZSwgRGlkIFlvdSBrbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIEVhc3RlciBlZ2dzIG9mIHRoZSBCYW5qby1LYXpvb2llIGZyYW5jaGlzZS4gQmFuam8tS2F6b29pZSB3YXMgY3JlYXRlZCBieSBSYXJlIGFuZCBwdWJsaXNoZWQgYnkgTmludGVuZG8gZm9yIHRoZSBOaW50ZW5kbyA2NCAoTjY0KS4gVGhlIGdhbWUsIGFsb25nIHdpdGggaXQncyBzZXF1ZWwgQmFuam8tVG9vaWUgd2FzIHJlLXJlbGVhc2VkIGZvciB0aGUgWGJveCAzNjAsIGFuZCBsYXRlciB0aGUgWGJveCBPbmUgdmlhIFJhcmUgUmVwbGF5LiBUaGUgc2VyaWVzJyBwbGF0Zm9ybWluZyBnYW1lcGxheSB3YXMgcmV2aXNlZCBmb3IgdGhlIHRoaXJkIGdhbWUgaW4gdGhlIHNlcmllcywgTnV0cyBhbmQgQm9sdHMuIEJhbmpvLUthem9vaWUncyBnYW1lIHBsYXkgYW5kIGRlc2lnbiBjaGFuZ2VkIGRyYXN0aWNhbGx5IGNvbXBhcmVkIHRvIHRoZSBpdHMgYmV0YSwgYW5kIHRoZSBnYW1lIGhhcyBwb3NzaWJsZSBjb25uZWN0aW9ucyB0byBEb25rZXkgS29uZyA2NC5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRlZCBieSBUaGVDYXJ0b29uR2FtZXJcblJlc2VhcmNoL1dyaXRpbmcgYnkgQ2V0aCBSZWl0c2NoIFxuQWRkaXRpb25hbCBSZXNlYXJjaCBieSBUaGVDYXJ0b29uR2FtZXJcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDEwTTQzUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjEwOTYyNzMiLAogICAgICAgICJsaWtlQ291bnQiOiAiMjEwODgiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNjU5IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjIyOTgiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:22 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=VUHi-vlACJI&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:22 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "kind": "youtube#videoListResponse",
          "etag": "mfDMInC_pKN_OkH0PcPzfpWAMLg",
          "items": [
            {
              "kind": "youtube#video",
              "etag": "bT4gToKRKXBf5MoaTcOIWBOZZak",
              "id": "VUHi-vlACJI",
              "snippet": {
                "publishedAt": "2016-10-15T19:00:01Z",
                "channelId": "UCyS4xQE6DK4_p3qXQwJQAyA",
                "title": "Satoru Iwata: CEO, Game Developer, Gamer - Did You Know Gaming? Feat. Furst",
                "description": "This video is dedicated to the life and achievements of Satoru Iwata.\n\n\nVideo Editing by Forest Lee (@tehFurst)\nResearch and Writing by Forest Lee and Jack MacAllen (@SuperPlaid64)",
                "thumbnails": {
                  "default": {
                    "url": "https://i.ytimg.com/vi/VUHi-vlACJI/default.jpg",
                    "width": 120,
                    "height": 90
                  },
                  "medium": {
                    "url": "https://i.ytimg.com/vi/VUHi-vlACJI/mqdefault.jpg",
                    "width": 320,
                    "height": 180
                  },
                  "high": {
                    "url": "https://i.ytimg.com/vi/VUHi-vlACJI/hqdefault.jpg",
                    "width": 480,
                    "height": 360
                  },
                  "standard": {
                    "url": "https://i.ytimg.com/vi/VUHi-vlACJI/sddefault.jpg",
                    "width": 640,
                    "height": 480
                  },
                  "maxres": {
                    "url": "https://i.ytimg.com/vi/VUHi-vlACJI/maxresdefault.jpg",
                    "width": 1280,
                    "height": 720
                  }
                },
                "channelTitle": "DidYouKnowGaming?",
                "tags": [
                  "iwata",
                  "satoru iwata",
                  "satoru",
                  "Gaming",
                  "dykgaming",
                  "did you know gaming",
                  "did",
                  "you",
                  "know",
                  "Nintendo",
                  "3ds",
                  "nds",
                  "nintendo nx",
                  "nx",
                  "melee",
                  "bros",
                  "ceo",
                  "nintendo 3ds",
                  "zelda",
                  "handheld",
                  "gba",
                  "hardware",
                  "direct",
                  "developer",
                  "gamecube",
                  "gameboy advance",
                  "nintendo direct",
                  "documentary",
                  "gameboy",
                  "brawl",
                  "gamer",
                  "pokemon",
                  "super smash bros",
                  "super",
                  "smash",
                  "wii",
                  "ds",
                  "game",
                  "cube",
                  "64",
                  "wii u",
                  "president",
                  "history",
                  "mario",
                  "kirby",
                  "boy",
                  "video",
                  "games",
                  "video games",
                  "did you know",
                  "nintendo wii u",
                  "n64",
                  "smash bros",
                  "earthbound",
                  "mother",
                  "satoru iwata tribute",
                  "iwata tribute"
                ],
                "categoryId": "20",
                "liveBroadcastContent": "none",
                "defaultLanguage": "en",
                "localized": {
                  "title": "Satoru Iwata: CEO, Game Developer, Gamer - Did You Know Gaming? Feat. Furst",
                  "description": "This video is dedicated to the life and achievements of Satoru Iwata.\n\n\nVideo Editing by Forest Lee (@tehFurst)\nResearch and Writing by Forest Lee and Jack MacAllen (@SuperPlaid64)"
                },
                "defaultAudioLanguage": "en"
              },
              "contentDetails": {
                "duration": "PT19M20S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "true",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
              },
              "statistics": {
                "viewCount": "1384915",
                "likeCount": "83141",
                "dislikeCount": "367",
                "favoriteCount": "0",
                "commentCount": "9205"
              }
            }
          ],
          "pageInfo": {
            "totalResults": 1,
            "resultsPerPage": 1
          }
        }
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:22 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=zXIWgEsSJfI&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:22 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIkwzUm5Uc1JjVE53ZV9JTl9IN28wTV9WSmFIMCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiYkQzX2g1VUI2WEtHMFNzYjBrUzVKSTVLSEZZIiwKICAgICAgImlkIjogInpYSVdnRXNTSmZJIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMTAtMDFUMTk6MDA6MTZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk5pbnRlbmRvIDNEUyAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIEZ1cnN0IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIE5pbnRlbmRvIEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5TdXBlciBNYXJpbyBXb3JsZCBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yZGlhbDhSXG5NYXJpbyBLYXJ0IEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzJkaWJwdDlcblxuSW4gdGhpcyBtaW5pIGRvY3VtZW50YXJ5IHdlIHRha2UgYSBsb29rIGF0IHNvbWUgRWFzdGVyIGVnZ3MsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIHRoZSBOaW50ZW5kbyAzRFMuIFRoZSBOaW50ZW5kbyAzRFMgaXMgYSBoYW5kaGVsZCBnYW1lIGNvbnNvbGUgYnkgTmludGVuZG8sICBhbmQgaXMgdGhlIHN1Y2Nlc3NvciB0byB0aGUgTmludGVuZG8gRFMgKE5EUykuIFRoZSBzeXN0ZW0gaXMgY2FwYWJsZSBvZiBkaXNwbGF5aW5nIHN0ZXJlb3Njb3BpYyAzRCBhbmQgaGFzIHJlY2VpdmVkIHNldmVyYWwgcmV2aXNpb25zIHN1Y2ggYXMgdGhlIE5pbnRlbmRvIDNEUyBYTCwgdGhlIE5pbnRlbmRvIDJEUyBhbmQgdGhlIE5ldyBOaW50ZW5kbyAzRFMuIFRoZSBjb25zb2xlJ3MgcHJpY2Ugd2FzIHJlZHVjZWQgZnJvbSAkMjQ5IHRvICQxNjkgYW1pZCBkaXNhcHBvaW50aW5nIGxhdW5jaCBzYWxlcy4gTmludGVuZG8gb2ZmZXJlZCBmcmVlIE5pbnRlbmRvIEVudGVydGFpbm1lbnQgU3lzdGVtIChORVMpIGFuZCBHYW1lIEJveSBBZHZhbmNlIChHQkEpIGdhbWVzIGZyb20gdGhlIGVTaG9wIHRocm91Z2ggZW11bGF0ZWQgZ2FtZXBsYXkgdG8gY29uc3VtZXJzIHdobyBib3VnaHQgdGhlIHN5c3RlbSBhdCB0aGUgb3JpZ2luYWwgbGF1bmNoIHByaWNlLiBUaGlzIG1vdmUgcGFpZCBvZmYsIGFzIHRoZSBOaW50ZW5kbyAzRFMgc3lzdGVtcyBjb21iaW5lZCBoYXZlIHNvbGQgb3ZlciA2MCBtaWxsaW9uIHVuaXRzLiBXZSBob3BlIG91ciBhbmFseXNpcyBvZiB0aGUgM0RTIGV4cGxhaW5lZCB0aGUgaW5uZXIgd29ya2luZ3Mgb2YgZGV2aWNlIGFuZCBpdHMgZ2FtZXMuIENoZWNrIG91dCBtb3JlIERpZCBZb3UgS25vdyBHYW1pbmcgdmlkZW9zIGJlbG93OlxuXG7ilrogTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2Fcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcbkZhbGxvdXQgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFOdFh3VWtcblxuVmlkZW8gRWRpdGluZyBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cblJlc2VhcmNoL1dyaXRpbmcgYnkgRm9yZXN0IExlZSBAdGVoRnVyc3RcblNjcmlwdCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96WElXZ0VzU0pmSS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pYSVdnRXNTSmZJL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pYSVdnRXNTSmZJL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96WElXZ0VzU0pmSS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pYSVdnRXNTSmZJL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAibmludGVuZG8gM2RzIiwKICAgICAgICAgICJuaW50ZW5kbyIsCiAgICAgICAgICAiM2RzIiwKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAiZGlkIiwKICAgICAgICAgICJ5b3UiLAogICAgICAgICAgImtub3ciLAogICAgICAgICAgImdhbWluZyIsCiAgICAgICAgICAic3VwZXIiLAogICAgICAgICAgIm1hcmlvIiwKICAgICAgICAgICJ3b3JsZCIsCiAgICAgICAgICAiZmFjdHMiLAogICAgICAgICAgImVhc3RlciBlZ2dzIiwKICAgICAgICAgICJlYXN0ZXIgZWdnIiwKICAgICAgICAgICJrYXJ0IiwKICAgICAgICAgICJtYXJpbyBrYXJ0IiwKICAgICAgICAgICJtYXJpbyB3b3JsZCIsCiAgICAgICAgICAiaGlzdG9yeSIsCiAgICAgICAgICAiZG9jdW1lbnRhcnkiLAogICAgICAgICAgImdhbWVwbGF5IiwKICAgICAgICAgICJnYmEiLAogICAgICAgICAgIjJkcyIsCiAgICAgICAgICAiZXhwbGFpbmVkIiwKICAgICAgICAgICJoYW5kaGVsZCIsCiAgICAgICAgICAiM2RzIHhsIiwKICAgICAgICAgICIzZHMgZ2FtZXMiLAogICAgICAgICAgImdhbWVzIiwKICAgICAgICAgICJnYW1lIiwKICAgICAgICAgICJwbGF5IiwKICAgICAgICAgICJkcyIsCiAgICAgICAgICAibmRzIiwKICAgICAgICAgICJ2aWRlbyIsCiAgICAgICAgICAibmV3IiwKICAgICAgICAgICJjb25zb2xlIiwKICAgICAgICAgICIzZCIsCiAgICAgICAgICAiZXNob3AiLAogICAgICAgICAgInBva2Vtb24iLAogICAgICAgICAgInplbGRhIiwKICAgICAgICAgICJuZXcgM2RzIHhsIiwKICAgICAgICAgICJuaW50ZW5kbyBkaXJlY3QiLAogICAgICAgICAgIm5pbnRlbmRvIDJkcyIsCiAgICAgICAgICAibmludGVuZG8gbngiLAogICAgICAgICAgIm5ldyAzZHMiLAogICAgICAgICAgImdhbWVib3kgYWR2YW5jZSIsCiAgICAgICAgICAiZ2FtZSBib3kgYWR2YW5jZSIsCiAgICAgICAgICAiYm95IiwKICAgICAgICAgICJhZHZhbmNlIiwKICAgICAgICAgICJnYW1lYm95IiwKICAgICAgICAgICJhbmFseXNpcyIsCiAgICAgICAgICAibngiLAogICAgICAgICAgImhhcmR3YXJlIiwKICAgICAgICAgICJnYiIsCiAgICAgICAgICAibmludGVuZG8gZHMiLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgIm5lcyIsCiAgICAgICAgICAibmVzIG1pbmkiLAogICAgICAgICAgIm1pbmkiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiTmludGVuZG8gM0RTIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gRnVyc3QiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBGYWN0cyDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuU3VwZXIgTWFyaW8gV29ybGQgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMmRpYWw4UlxuTWFyaW8gS2FydCBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yZGlicHQ5XG5cbkluIHRoaXMgbWluaSBkb2N1bWVudGFyeSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIEVhc3RlciBlZ2dzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiB0aGUgTmludGVuZG8gM0RTLiBUaGUgTmludGVuZG8gM0RTIGlzIGEgaGFuZGhlbGQgZ2FtZSBjb25zb2xlIGJ5IE5pbnRlbmRvLCAgYW5kIGlzIHRoZSBzdWNjZXNzb3IgdG8gdGhlIE5pbnRlbmRvIERTIChORFMpLiBUaGUgc3lzdGVtIGlzIGNhcGFibGUgb2YgZGlzcGxheWluZyBzdGVyZW9zY29waWMgM0QgYW5kIGhhcyByZWNlaXZlZCBzZXZlcmFsIHJldmlzaW9ucyBzdWNoIGFzIHRoZSBOaW50ZW5kbyAzRFMgWEwsIHRoZSBOaW50ZW5kbyAyRFMgYW5kIHRoZSBOZXcgTmludGVuZG8gM0RTLiBUaGUgY29uc29sZSdzIHByaWNlIHdhcyByZWR1Y2VkIGZyb20gJDI0OSB0byAkMTY5IGFtaWQgZGlzYXBwb2ludGluZyBsYXVuY2ggc2FsZXMuIE5pbnRlbmRvIG9mZmVyZWQgZnJlZSBOaW50ZW5kbyBFbnRlcnRhaW5tZW50IFN5c3RlbSAoTkVTKSBhbmQgR2FtZSBCb3kgQWR2YW5jZSAoR0JBKSBnYW1lcyBmcm9tIHRoZSBlU2hvcCB0aHJvdWdoIGVtdWxhdGVkIGdhbWVwbGF5IHRvIGNvbnN1bWVycyB3aG8gYm91Z2h0IHRoZSBzeXN0ZW0gYXQgdGhlIG9yaWdpbmFsIGxhdW5jaCBwcmljZS4gVGhpcyBtb3ZlIHBhaWQgb2ZmLCBhcyB0aGUgTmludGVuZG8gM0RTIHN5c3RlbXMgY29tYmluZWQgaGF2ZSBzb2xkIG92ZXIgNjAgbWlsbGlvbiB1bml0cy4gV2UgaG9wZSBvdXIgYW5hbHlzaXMgb2YgdGhlIDNEUyBleHBsYWluZWQgdGhlIGlubmVyIHdvcmtpbmdzIG9mIGRldmljZSBhbmQgaXRzIGdhbWVzLiBDaGVjayBvdXQgbW9yZSBEaWQgWW91IEtub3cgR2FtaW5nIHZpZGVvcyBiZWxvdzpcblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEZvcmVzdCBMZWUgQHRlaEZ1cnN0XG5TY3JpcHQgRWRpdGluZyBieSBDYXJhIEhpbGxzdG9ja1xuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTBNNTlTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTcwMjk1MSIsCiAgICAgICAgImxpa2VDb3VudCI6ICIzMDEwNCIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICIzOTgiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMjU5NyIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:23 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=4CJoYsBRwrI&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:23 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:23 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=rL_DtT1O6Yc&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:23 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIjI0S1JQTEJZOExkMUI1VXdvbWR1bUxWdjZ6WSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiaU5qTU8yb09oVWw3NnRRMHFaRlc5WXhKMXYwIiwKICAgICAgImlkIjogInJMX0R0VDFPNlljIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDktMTBUMTk6MDA6MDZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlN1cGVyIE1hcmlvIFdvcmxkIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSm9uVHJvbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5Nb3JlIE1hcmlvIEZhY3RzIOKWuuKWuiBodHRwOi8vYml0Lmx5LzJjZVNWR0VcbkpvblRyb24ncyBEYXJrIER1bmdlb25zIOKWuiBodHRwOi8vYml0Lmx5LzJjQ2gwSWVcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIFN1cGVyIE1hcmlvIFdvcmxkLiBTdXBlciBNYXJpbyBXb3JsZCAoYWxzbyBzdWJ0aXRsZWQgU3VwZXIgTWFyaW8gQnJvcy4gNCBpbiBKYXBhbikgd2FzIGRldmVsb3BlZCBhbmQgcHVibGlzaGVkIGJ5IE5pbnRlbmRvIGFzIGEgbGF1bmNoIHRpdGxlIGZvciB0aGUgU3VwZXIgTmludGVuZG8gKFNORVMpLiBTdXBlciBNYXJpbyBXb3JsZCBpcyBub3RhYmxlIGZvciBoYXZpbmcgZmlyc3QgYXBwZWFyYW5jZSBvZiBZb3NoaSBpbiBhIG1haW4tc2VyaWVzIE1hcmlvIGdhbWUsIGFuZCByZWNlaXZpbmcgY3JpdGljYWwgYW5kIGNvbW1lcmNpYWwgc3VjY2Vzcy4gVGhlIGdhbWUgc29sZCBvdmVyIDIwIG1pbGxpb24gY29waWVzIHdvcmxkd2lkZSAobm90IGNvdW50aW5nIHJlcmVsZWFzZXMgb3IgZGlnaXRhbCBkb3dubG9hZHMpLCBhbmQgaXMgY29uc2lkZXJlZCBieSBtYW55IHRvIGJlIHRoZSBiZXN0IE1hcmlvIGdhbWUuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5WaWRlbyBFZGl0ZWQgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IFNldW1pZGggTWFjRG9uYWxkXG5TY3JpcHQgRWRpdGluZyBieSBDYXJhIEhpbGxzdG9ja1xuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvckxfRHRUMU82WWMvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9yTF9EdFQxTzZZYy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9yTF9EdFQxTzZZYy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvckxfRHRUMU82WWMvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9yTF9EdFQxTzZZYy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIk1hcmlvIiwKICAgICAgICAgICJTdXBlciBNYXJpbyBXb3JsZCIsCiAgICAgICAgICAic3VwZXIgbWFyaW8iLAogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJkaWR5b3Vrbm93Z2FtaW5nIiwKICAgICAgICAgICJiZXRhIiwKICAgICAgICAgICJNYXJpbyBCZXRhIiwKICAgICAgICAgICJzdXBlciBtYXJpbyBydW4iLAogICAgICAgICAgInN1cGVyIG1hcmlvIGJyb3MiLAogICAgICAgICAgInN1cGVyIiwKICAgICAgICAgICJzdXBlciBtYXJpbyBicm9zIDMiLAogICAgICAgICAgIm1hcmlvIHdvcmxkIiwKICAgICAgICAgICJtYXJpbyB0aGVtZSIsCiAgICAgICAgICAibWFyaW8gbXVzaWMiLAogICAgICAgICAgInN1cGVyIG1hcmlvIDMiLAogICAgICAgICAgInN1cGVyIG1hcmlvIG1ha2VyIiwKICAgICAgICAgICJtYXJpbyBtYWtlciIsCiAgICAgICAgICAibWFyaW8gYnJvcyIsCiAgICAgICAgICAibWFyaW8ga2FydCIsCiAgICAgICAgICAibWFyaW8gZ2FtZSIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyBtYXJpbyIsCiAgICAgICAgICAidmlkZW8gZ2FtZXMiLAogICAgICAgICAgIm1hcmlvIDY0IiwKICAgICAgICAgICJtYXJpbyB3aWkiLAogICAgICAgICAgIkpvblRyb24iLAogICAgICAgICAgIm5pbnRlbmRvIiwKICAgICAgICAgICJzbmVzIiwKICAgICAgICAgICJsdWlnaSIsCiAgICAgICAgICAieW9zaGkiLAogICAgICAgICAgInN1cGVyIG5pbnRlbmRvIiwKICAgICAgICAgICJiZXN0IHNuZXMgZ2FtZXMiLAogICAgICAgICAgImdiYSIsCiAgICAgICAgICAic25lcyBnYW1lcyIsCiAgICAgICAgICAiZWFzdGVyIGVnZyIsCiAgICAgICAgICAiZ2FtZXBsYXkiLAogICAgICAgICAgIjNkcyIsCiAgICAgICAgICAic3VwZXIgbWFyaW8gbWFrZXIgZ2FtZXBsYXkiLAogICAgICAgICAgInlvdSIsCiAgICAgICAgICAiZGlkIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlN1cGVyIE1hcmlvIFdvcmxkIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSm9uVHJvbiIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk1vcmUgTWFyaW8gRmFjdHMg4pa64pa6IGh0dHA6Ly9iaXQubHkvMmNlU1ZHRVxuSm9uVHJvbidzIERhcmsgRHVuZ2VvbnMg4pa6IGh0dHA6Ly9iaXQubHkvMmNDaDBJZVxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgU3VwZXIgTWFyaW8gV29ybGQuIFN1cGVyIE1hcmlvIFdvcmxkIChhbHNvIHN1YnRpdGxlZCBTdXBlciBNYXJpbyBCcm9zLiA0IGluIEphcGFuKSB3YXMgZGV2ZWxvcGVkIGFuZCBwdWJsaXNoZWQgYnkgTmludGVuZG8gYXMgYSBsYXVuY2ggdGl0bGUgZm9yIHRoZSBTdXBlciBOaW50ZW5kbyAoU05FUykuIFN1cGVyIE1hcmlvIFdvcmxkIGlzIG5vdGFibGUgZm9yIGhhdmluZyBmaXJzdCBhcHBlYXJhbmNlIG9mIFlvc2hpIGluIGEgbWFpbi1zZXJpZXMgTWFyaW8gZ2FtZSwgYW5kIHJlY2VpdmluZyBjcml0aWNhbCBhbmQgY29tbWVyY2lhbCBzdWNjZXNzLiBUaGUgZ2FtZSBzb2xkIG92ZXIgMjAgbWlsbGlvbiBjb3BpZXMgd29ybGR3aWRlIChub3QgY291bnRpbmcgcmVyZWxlYXNlcyBvciBkaWdpdGFsIGRvd25sb2FkcyksIGFuZCBpcyBjb25zaWRlcmVkIGJ5IG1hbnkgdG8gYmUgdGhlIGJlc3QgTWFyaW8gZ2FtZS5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRlZCBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cblJlc2VhcmNoL1dyaXRpbmcgYnkgU2V1bWlkaCBNYWNEb25hbGRcblNjcmlwdCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTQ2UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE1NDU1NTAiLAogICAgICAgICJsaWtlQ291bnQiOiAiMzE5NTMiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiOTQ1IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjIyMDciCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:23 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=9rLeodlg4co&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:23 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:23 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=jtuEW_l_BDQ&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:24 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIi05LXZFRWpTUGpONHVHY1F4NW02bFVnZlFCNCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiWUNzdkwxX0JCQXg3WkxvQnVOdXhIV0dQQ1VvIiwKICAgICAgImlkIjogImp0dUVXX2xfQkRRIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDgtMTdUMjA6NDI6MjNaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk92ZXJ3YXRjaCAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIE1hdFBhdCBvZiBHYW1lIFRoZW9yeSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5PdmVyd2F0Y2ggVlMgVEYyIG92ZXIgb24gR2FtZSBUaGVvcnkg4pa6IGh0dHA6Ly9iaXQubHkvMmJBcXRSOFxuVGVhbSBGb3J0cmVzcyAyIEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzJhTnUwZmFcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIE92ZXJ3YXRjaC4gT3ZlcndhdGNoIGlzIGEgbXVsdGlwbGF5ZXIgZmlyc3QtcGVyc29uIHRlYW0tYmFzZWQgc2hvb3RlciBkZXZlbG9wZWQgYW5kIHB1Ymxpc2hlZCBieSBCbGl6emFyZCBFbnRlcnRhaW5tZW50LiBPdmVyd2F0Y2ggaXMgQmxpenphcmQncyBmb3VydGggbWFqb3IgZnJhbmNoaXNlLCBhbmQgY2FtZSBhYm91dCBkdWUgdG8gdGhlIGNhbmNlbGxhdGlvbiBvZiBhbiBNTU8gbmFtZWQgVGl0YW4uIFNvbWUgb2YgdGhlIFRpdGFuIHRlYW0gY2FtZSB1cCB3aXRoIHRoZSBjb25jZXB0IG9mIE92ZXJ3YXRjaCwgd2hpY2ggZHJldyBpbnNwaXJhdGlvbiBmcm9tIGdhbWVzIHN1Y2ggYXMgVGVhbSBGb3J0cmVzcyAyLiBUaGUgZ2FtZSdzIG9wZW4gYmV0YSBpbiBNYXkgMjAxNiBkcmV3IGluIG1vcmUgdGhhbiA5LjcgbWlsbGlvbiBwbGF5ZXJzLCBhbmQgdGhlIGdhbWUgaGFzIGhhZCAxNSBtaWxsaW9uIGRvd25sb2FkcyBzaW5jZSBpdHMgbGF1bmNoLiBcblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IExlZSBAdGVoRnVyc3RcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2p0dUVXX2xfQkRRL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvanR1RVdfbF9CRFEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvanR1RVdfbF9CRFEvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2p0dUVXX2xfQkRRL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvanR1RVdfbF9CRFEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJvdmVyd2F0Y2giLAogICAgICAgICAgIm92ZXJ3YXRjaCBnYW1lcGxheSIsCiAgICAgICAgICAiZ2FtZSB0aGVvcnkiLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAib3ZlcndhdGNoIHRyYWlsZXIiLAogICAgICAgICAgIm92ZXJ3YXRjaCBnZW5qaSIsCiAgICAgICAgICAicGxheSBvdmVyd2F0Y2giLAogICAgICAgICAgIm92ZXJ3YXRjaCBhbmltYXRlZCIsCiAgICAgICAgICAidHJhY2VyIG92ZXJ3YXRjaCIsCiAgICAgICAgICAib3ZlcndhdGNoIGNpbmVtYXRpYyIsCiAgICAgICAgICAib3ZlcndhdGNoIGFuYSIsCiAgICAgICAgICAib3ZlcndhdGNoIHNob3J0cyIsCiAgICAgICAgICAib3ZlcndhdGNoIGRyYWdvbnMiLAogICAgICAgICAgIm92ZXJ3YXRjaCBoYW56byIsCiAgICAgICAgICAib3ZlcndhdGNoIGd1aWRlIiwKICAgICAgICAgICJvdmVyd2F0Y2ggcGMiLAogICAgICAgICAgIm92ZXJ3YXRjaCBuZXcgaGVybyIsCiAgICAgICAgICAidmlkZW8gZ2FtZXMiLAogICAgICAgICAgImJsaXp6YXJkIiwKICAgICAgICAgICJ0ZWFtIGZvcnRyZXNzIDIiLAogICAgICAgICAgInRmMiIsCiAgICAgICAgICAib3ZlcndhdGNoIHN1bW1lciBnYW1lcyIsCiAgICAgICAgICAib3ZlcndhdGNoIGNoYXJhY3RlcnMiLAogICAgICAgICAgIm1hdHBhdCIsCiAgICAgICAgICAibWF0dGhld3BhdHJpY2sxMyIsCiAgICAgICAgICAiZ2VuamkiLAogICAgICAgICAgImdhbWVwbGF5IiwKICAgICAgICAgICJvdmVyIHdhdGNoIiwKICAgICAgICAgICJvdmVyd2F0Y2ggYW5hIGdhbWVwbGF5IiwKICAgICAgICAgICJ5b3UiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiT3ZlcndhdGNoIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gTWF0UGF0IG9mIEdhbWUgVGhlb3J5IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuT3ZlcndhdGNoIFZTIFRGMiBvdmVyIG9uIEdhbWUgVGhlb3J5IOKWuiBodHRwOi8vYml0Lmx5LzJiQXF0UjhcblRlYW0gRm9ydHJlc3MgMiBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yYU51MGZhXG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiBPdmVyd2F0Y2guIE92ZXJ3YXRjaCBpcyBhIG11bHRpcGxheWVyIGZpcnN0LXBlcnNvbiB0ZWFtLWJhc2VkIHNob290ZXIgZGV2ZWxvcGVkIGFuZCBwdWJsaXNoZWQgYnkgQmxpenphcmQgRW50ZXJ0YWlubWVudC4gT3ZlcndhdGNoIGlzIEJsaXp6YXJkJ3MgZm91cnRoIG1ham9yIGZyYW5jaGlzZSwgYW5kIGNhbWUgYWJvdXQgZHVlIHRvIHRoZSBjYW5jZWxsYXRpb24gb2YgYW4gTU1PIG5hbWVkIFRpdGFuLiBTb21lIG9mIHRoZSBUaXRhbiB0ZWFtIGNhbWUgdXAgd2l0aCB0aGUgY29uY2VwdCBvZiBPdmVyd2F0Y2gsIHdoaWNoIGRyZXcgaW5zcGlyYXRpb24gZnJvbSBnYW1lcyBzdWNoIGFzIFRlYW0gRm9ydHJlc3MgMi4gVGhlIGdhbWUncyBvcGVuIGJldGEgaW4gTWF5IDIwMTYgZHJldyBpbiBtb3JlIHRoYW4gOS43IG1pbGxpb24gcGxheWVycywgYW5kIHRoZSBnYW1lIGhhcyBoYWQgMTUgbWlsbGlvbiBkb3dubG9hZHMgc2luY2UgaXRzIGxhdW5jaC4gXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuUmVzZWFyY2gvV3JpdGluZyBieSBMZWUgQHRlaEZ1cnN0XG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTQ4UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE2OTgxMDAiLAogICAgICAgICJsaWtlQ291bnQiOiAiMzQxMzciLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiMzQ1NyIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI1NTg1IgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:24 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=X7SJ93jHqls&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:24 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIjVaNzNCVlBvai1EY0hCVFRKZmxSdVBqa2lHVSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiemdlZzJ6NEtDUFptRDc4WGNIN01YNEhWOFNJIiwKICAgICAgImlkIjogIlg3U0o5M2pIcWxzIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDctMjNUMTk6MDA6NDRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlN1cGVyIE5pbnRlbmRvIChTTkVTKSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFByb0phcmVkIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbkdhbWVDdWJlIEZhY3RzISDilrogaHR0cDovL2JpdC5seS8yYTRjdlhyXG5NYXJpbyBFYXN0ZXIgRWdncyEg4pa6IGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgdGhlIFN1cGVyIE5pbnRlbmRvIEVudGVydGFpbm1lbnQgU3lzdGVtLiBUaGUgU05FUyBpcyBhIGdhbWluZyBkZXZpY2UgZGV2ZWxvcGVkIGJ5IE5pbnRlbmRvLiBJbiBpdHMgbmF0aXZlIGNvdW50cnkgb2YgSmFwYW4sIHRoZSBjb25zb2xlIGlzIG5hbWVkIHRoZSBTdXBlciBGYW1pY29tLiBUaGUgc3lzdGVtIGlzIE5pbnRlbmRvJ3Mgc2Vjb25kIGhvbWUgY29uc29sZSwgZm9sbG93aW5nIHRoZSBOaW50ZW5kbyBFbnRlcnRhaW5tZW50IFN5c3RlbSwgb3IgTkVTIGZvciBzaG9ydC4gSXQgaGFkIHNpbWlsYXIgc3VjY2VzcyB0byBpdHMgcHJlZGVjZXNzb3IsIGFuZCBiZWNhbWUgdGhlIGJlc3Qtc2VsbGluZyBjb25zb2xlIG9mIHRoZSAxNi1iaXQgZXJhIGdsb2JhbGx5LiBUaGlzIHdhcyBwYXJ0bHkgdGhhbmtzIHRvIE5pbnRlbmRvJ3MgYWxsLXN0YXIgZnJhbmNoaXNlcyBzdWNoIGFzIE1hcmlvLCBaZWxkYSwgYW5kIERvbmtleSBLb25nLlxuXG7ilrogTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2Fcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcbkZhbGxvdXQgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFOdFh3VWtcblxuVm9pY2VkIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9wcm9qYXJlZFxuVmlkZW8gRWRpdGluZyBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cbldyaXRpbmcvUmVzZWFyY2ggYnkgSW5uYWdhZGFkYXZpZGFcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1g3U0o5M2pIcWxzL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWDdTSjkzakhxbHMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWDdTSjkzakhxbHMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1g3U0o5M2pIcWxzL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWDdTSjkzakhxbHMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJzdXBlciBuaW50ZW5kbyIsCiAgICAgICAgICAic25lcyIsCiAgICAgICAgICAiR2FtaW5nIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgInZpZGVvIGdhbWVzIiwKICAgICAgICAgICJuaW50ZW5kbyIsCiAgICAgICAgICAibmVzIiwKICAgICAgICAgICJzdXBlciBtYXJpbyIsCiAgICAgICAgICAic3VwZXIgbmludGVuZG8gbWFyaW8iLAogICAgICAgICAgInNuZXMgZ2FtZXMiLAogICAgICAgICAgInNuZXMgbXVzaWMiLAogICAgICAgICAgImJlc3Qgc25lcyIsCiAgICAgICAgICAidG9wIHNuZXMiLAogICAgICAgICAgInN1cGVyIG5pbnRlbmRvIGVudGVydGFpbm1lbnQgc3lzdGVtICh2aWRlbyBnYW1lIHBsYXRmb3JtKSIsCiAgICAgICAgICAibWFyaW8iLAogICAgICAgICAgInplbGRhIiwKICAgICAgICAgICJjb25zb2xlIiwKICAgICAgICAgICJzdXBlciBmYW1pY29tIiwKICAgICAgICAgICJzdXBlciBuZXMiLAogICAgICAgICAgInByb2phcmVkIiwKICAgICAgICAgICJzdXBlciBtYXJpbyB3b3JsZCIsCiAgICAgICAgICAibWFyaW8gd29ybGQiLAogICAgICAgICAgIm1hcmlvIGFsbCBzdGFycyIsCiAgICAgICAgICAibGluayB0byB0aGUgcGFzdCIsCiAgICAgICAgICAiZG9ua2V5IGtvbmcgY291bnRyeSIsCiAgICAgICAgICAiY2hyb25vIHRyaWdnZXIiLAogICAgICAgICAgImVhcnRoYm91bmQiLAogICAgICAgICAgInN1cGVyIG1hcmlvIGthcnQiLAogICAgICAgICAgInN1cGVyIG1ldHJvaWQiLAogICAgICAgICAgIk5FUyBDbGFzc2ljIEVkaXRpb24iLAogICAgICAgICAgImdhbWUiLAogICAgICAgICAgImJlc3Qgc25lcyBnYW1lcyIsCiAgICAgICAgICAieW91IgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlN1cGVyIE5pbnRlbmRvIChTTkVTKSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFByb0phcmVkIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuR2FtZUN1YmUgRmFjdHMhIOKWuiBodHRwOi8vYml0Lmx5LzJhNGN2WHJcbk1hcmlvIEVhc3RlciBFZ2dzISDilrogaHR0cDovL2JpdC5seS8xTUtsWElqXG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiB0aGUgU3VwZXIgTmludGVuZG8gRW50ZXJ0YWlubWVudCBTeXN0ZW0uIFRoZSBTTkVTIGlzIGEgZ2FtaW5nIGRldmljZSBkZXZlbG9wZWQgYnkgTmludGVuZG8uIEluIGl0cyBuYXRpdmUgY291bnRyeSBvZiBKYXBhbiwgdGhlIGNvbnNvbGUgaXMgbmFtZWQgdGhlIFN1cGVyIEZhbWljb20uIFRoZSBzeXN0ZW0gaXMgTmludGVuZG8ncyBzZWNvbmQgaG9tZSBjb25zb2xlLCBmb2xsb3dpbmcgdGhlIE5pbnRlbmRvIEVudGVydGFpbm1lbnQgU3lzdGVtLCBvciBORVMgZm9yIHNob3J0LiBJdCBoYWQgc2ltaWxhciBzdWNjZXNzIHRvIGl0cyBwcmVkZWNlc3NvciwgYW5kIGJlY2FtZSB0aGUgYmVzdC1zZWxsaW5nIGNvbnNvbGUgb2YgdGhlIDE2LWJpdCBlcmEgZ2xvYmFsbHkuIFRoaXMgd2FzIHBhcnRseSB0aGFua3MgdG8gTmludGVuZG8ncyBhbGwtc3RhciBmcmFuY2hpc2VzIHN1Y2ggYXMgTWFyaW8sIFplbGRhLCBhbmQgRG9ua2V5IEtvbmcuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZWQgYnkgaHR0cDovL3lvdXR1YmUuY29tL3Byb2phcmVkXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuV3JpdGluZy9SZXNlYXJjaCBieSBJbm5hZ2FkYWRhdmlkYVxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUN001NVMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIxMTYzODE2IiwKICAgICAgICAibGlrZUNvdW50IjogIjI0MzI4IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjMxMCIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIxOTE3IgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:24 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=Lqi-JW76NUo&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:24 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:24 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=ZbyGApxxHnA&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:25 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:25 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=bXR-tr1et8U&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:25 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImdUSHVvUnc2aDFyZ3J0bDRvWEtqMUFlWVEycyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiTFpfZWM4RkhjYWU0a29uWTRJMEtPLWRBMjhFIiwKICAgICAgImlkIjogImJYUi10cjFldDhVIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDYtMTdUMTk6MDA6MjRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIllvc2hpIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSmltbXkgV2hldHplbCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlN1cHBvcnQgRFlLRyEgR2V0IHlvdXIgb3duIGNyYXRlIGZyb20gTG9vdCBDcmF0ZSBhdCBodHRwOi8vd3d3Lmxvb3RjcmF0ZS5jb20vRFlLRy4gVXNlIGNvZGUgJ0RZS0cnIHRvIHNhdmUgMTAlIVxuU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk1hcmlvIEdhbGF4eSBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yMWwxdVRhXG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiBZb3NoaS4gWW9zaGkgaXMgb25lIG9mIHRoZSBoZXJvZXMgb2YgdGhlIE1hcmlvIHNlcmllcywgYW5kIGlzIGFsc28gdGhlIG5hbWUgb2YgdGhlaXIgb3duIHNwZWNpZXMuIFlvc2hpIGRlYnV0ZWQgaW4gU3VwZXIgTWFyaW8gV29ybGQsIGFuZCBsYXRlciBzdGFycmVkIGluIHNldmVyYWwgb2YgaGlzIG93biBnYW1lcy4gU29tZSBzdGFuZCBvdXQgZXhhbXBsZXMgYXJlIFN1cGVyIE1hcmlvIFdvcmxkIDI6IFlvc2hpJ3MgSXNsYW5kLCBZb3NoaSdzIFN0b3J5LCAgYW5kIFlvc2hpJ3MgV29vbGx5IFdvcmxkLiBZb3NoaSBoYXMgYWxzbyBhcHBlYXJlZCBpbiBtYW55IG9mIHRoZSBzcGluLW9mZiBNYXJpbyBzZXJpZXMgaW5jbHVkaW5nIE1hcmlvIFBhcnR5LCBNYXJpbyBLYXJ0LCBhbmQgU3VwZXIgU21hc2ggQnJvcywgYXMgd2VsbCBhcyBpbiB2YXJpb3VzIE1hcmlvIHNwb3J0cyB0aXRsZXMuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuUmVzZWFyY2gvV3JpdGluZyBieSBLZWxsZW4gTWNJbnR5cmVcblNjcmlwdCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9iWFItdHIxZXQ4VS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JYUi10cjFldDhVL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JYUi10cjFldDhVL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9iWFItdHIxZXQ4VS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JYUi10cjFldDhVL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAieW9zaGkiLAogICAgICAgICAgIm1hcmlvIiwKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAidmlkZW8gZ2FtZSIsCiAgICAgICAgICAidmlkZW8gZ2FtZXMiLAogICAgICAgICAgIm1hcmlvIHlvc2hpIiwKICAgICAgICAgICJtYXJpbyBhbmQgeW9zaGkiLAogICAgICAgICAgInlvc2hpIGlzbGFuZCIsCiAgICAgICAgICAieW9zaGkgd29vbHkgd29ybGQiLAogICAgICAgICAgImJsYWNrIHlvc2hpIiwKICAgICAgICAgICJ5b3NoaSBzb25nIiwKICAgICAgICAgICJ5b3NoaSB0byBtYXJpbyIsCiAgICAgICAgICAic21hc2ggNCB5b3NoaSIsCiAgICAgICAgICAic3NiNCB5b3NoaSIsCiAgICAgICAgICAic3VwZXIgbWFyaW8iLAogICAgICAgICAgIm1hcmlvIGJyb3MiLAogICAgICAgICAgIm1hcmlvIGthcnQiLAogICAgICAgICAgInN1cGVyIG1hcmlvIGJyb3MiLAogICAgICAgICAgInN1cGVyIG1hcmlvIHdvcmxkIiwKICAgICAgICAgICJtYXJpbyB3b3JsZCIsCiAgICAgICAgICAieW9zaGkgbWFyaW8iLAogICAgICAgICAgInN1cGVyIG1hcmlvIHlvc2hpIiwKICAgICAgICAgICJ5b3NoaSB3b3JsZCIsCiAgICAgICAgICAieW9zaGlzIGlzbGFuZCIsCiAgICAgICAgICAieW9zaGkgZ2FtZSIsCiAgICAgICAgICAieW9zaGkgZ2FtZXMiLAogICAgICAgICAgInlvc2hpIGFtaWlibyIsCiAgICAgICAgICAiZWFzdGVyIGVnZyIsCiAgICAgICAgICAiZWFzdGVyIGVnZ3MiLAogICAgICAgICAgImppbW15IHdoZXR6ZWwiLAogICAgICAgICAgImRpZCIsCiAgICAgICAgICAieW91IgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIllvc2hpIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSmltbXkgV2hldHplbCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3VwcG9ydCBEWUtHISBHZXQgeW91ciBvd24gY3JhdGUgZnJvbSBMb290IENyYXRlIGF0IGh0dHA6Ly93d3cubG9vdGNyYXRlLmNvbS9EWUtHLiBVc2UgY29kZSAnRFlLRycgdG8gc2F2ZSAxMCUhXG5TVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuTWFyaW8gR2FsYXh5IEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzIxbDF1VGFcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIFlvc2hpLiBZb3NoaSBpcyBvbmUgb2YgdGhlIGhlcm9lcyBvZiB0aGUgTWFyaW8gc2VyaWVzLCBhbmQgaXMgYWxzbyB0aGUgbmFtZSBvZiB0aGVpciBvd24gc3BlY2llcy4gWW9zaGkgZGVidXRlZCBpbiBTdXBlciBNYXJpbyBXb3JsZCwgYW5kIGxhdGVyIHN0YXJyZWQgaW4gc2V2ZXJhbCBvZiBoaXMgb3duIGdhbWVzLiBTb21lIHN0YW5kIG91dCBleGFtcGxlcyBhcmUgU3VwZXIgTWFyaW8gV29ybGQgMjogWW9zaGkncyBJc2xhbmQsIFlvc2hpJ3MgU3RvcnksICBhbmQgWW9zaGkncyBXb29sbHkgV29ybGQuIFlvc2hpIGhhcyBhbHNvIGFwcGVhcmVkIGluIG1hbnkgb2YgdGhlIHNwaW4tb2ZmIE1hcmlvIHNlcmllcyBpbmNsdWRpbmcgTWFyaW8gUGFydHksIE1hcmlvIEthcnQsIGFuZCBTdXBlciBTbWFzaCBCcm9zLCBhcyB3ZWxsIGFzIGluIHZhcmlvdXMgTWFyaW8gc3BvcnRzIHRpdGxlcy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuU2NyaXB0IEVkaXRpbmcgYnkgQ2FyYSBIaWxsc3RvY2tcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDVNNThTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTEyMzYzMiIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyMjA3NyIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI1MDAiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMTMyNyIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:25 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=JjL6G4pCUlU&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:25 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIm05VG4xaHhxOVo2b3N0U25Pb1ZReHhTT2NwbyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiWXl3RG9Wa1M2Wkczb1doS1JfZGVBRFNFcW9BIiwKICAgICAgImlkIjogIkpqTDZHNHBDVWxVIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDYtMTNUMTk6NDE6MDRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkRpc25leSBHYW1lcyAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIEpvblRyb24iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuSm9uVHJvbidzIERpc25leSBCb290bGVncyDilrogaHR0cDovL2JpdC5seS8xWFNQRTViXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIERpc25leSBnYW1lcy4gR2FtZXMgYmFzZWQgb24gRGlzbmV5IGZyYW5jaGlzZXMgaGF2ZSBiZWVuIGFyb3VuZCBhbG1vc3QgYXMgbG9uZyBhcyB2aWRlbyBnYW1lcyB0aGVtc2VsdmVzLiBJbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgQWxhZGRpbiwgTWlja2V5IE1vdXNlLCBEdWNrIFRhbGVzLCBhbmQgaG93IFRoZSBMaW9uIEtpbmcgY2hhbmdlZCB0aGUgbGFuZHNjYXBlIG9mIFBDIGdhbWluZy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRpbmcgYnkgSW5uYWdhZGFkYXZpZGFcbmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvSW5uYWdhZGFkYURCWlxuXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuXG5WaWRlbyBmb290YWdlIG9mIEFsYWRkaW4gKFNORVMpIGJ5IENyYXNoIFRlc3QgR2FtaW5nOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUgzNWVhbWZkbV8wXG5WaWRlbyBmb290YWdlIG9mIER1Y2tUYWxlcyAoTkVTKSBCYWQgRW5kaW5nIGJ5IE5vc3RhbGdpYSBUcmlwOiBcbmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9R0JReDlnLVVRY1lcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0pqTDZHNHBDVWxVL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSmpMNkc0cENVbFUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSmpMNkc0cENVbFUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0pqTDZHNHBDVWxVL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSmpMNkc0cENVbFUvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAiam9udHJvbiIsCiAgICAgICAgICAiam9udHJvbnNob3ciLAogICAgICAgICAgImRpc25leSIsCiAgICAgICAgICAiZGlzbmV5IGdhbWVzIiwKICAgICAgICAgICJkaXNuZXkgYm9vdGxlZ3MiLAogICAgICAgICAgInRoZSBsaW9uIGtpbmciLAogICAgICAgICAgImxpb24ga2luZyIsCiAgICAgICAgICAiYWxhZGRpbiIsCiAgICAgICAgICAiZHVjayB0YWxlcyIsCiAgICAgICAgICAibWlja2V5IG1vdXNlIiwKICAgICAgICAgICJnYW1lZ3J1bXBzIiwKICAgICAgICAgICJnYW1lIGdydW1wcyIsCiAgICAgICAgICAidmlkZW8gZ2FtZSIsCiAgICAgICAgICAidmlkZW8gZ2FtZXMiLAogICAgICAgICAgImRpc25leSBjaGFubmVsIiwKICAgICAgICAgICJkaXNuZXkgbW92aWUiLAogICAgICAgICAgImRpc25leSBtb3ZpZXMiLAogICAgICAgICAgImRpc25leSBzb25ncyIsCiAgICAgICAgICAiZGlzbmV5IGluZmluaXR5IiwKICAgICAgICAgICJkaXNuZXkgaW5maW5pdHkgMy4wIiwKICAgICAgICAgICJtb3ZpZXMiLAogICAgICAgICAgImRpc25leSB3b3JsZCIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAicm9iaW4gd2lsbGlhbXMiLAogICAgICAgICAgImVwaWMgbWlja2V5IiwKICAgICAgICAgICJEdWNrVGFsZXMgUmVtYXN0ZXJlZCIsCiAgICAgICAgICAic2VnYSIsCiAgICAgICAgICAic2VnYSBnZW5lc2lzIiwKICAgICAgICAgICJzZWdhIG1lZ2Fkcml2ZSIsCiAgICAgICAgICAibWVnYWRyaXZlIiwKICAgICAgICAgICJnZW5lc2lzIiwKICAgICAgICAgICJzbmVzIiwKICAgICAgICAgICJzdXBlciBuaW50ZW5kbyIsCiAgICAgICAgICAibmludGVuZG8iLAogICAgICAgICAgInlvdSIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJEaXNuZXkgR2FtZXMgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBKb25Ucm9uIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuSm9uVHJvbidzIERpc25leSBCb290bGVncyDilrogaHR0cDovL2JpdC5seS8xWFNQRTViXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIERpc25leSBnYW1lcy4gR2FtZXMgYmFzZWQgb24gRGlzbmV5IGZyYW5jaGlzZXMgaGF2ZSBiZWVuIGFyb3VuZCBhbG1vc3QgYXMgbG9uZyBhcyB2aWRlbyBnYW1lcyB0aGVtc2VsdmVzLiBJbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgQWxhZGRpbiwgTWlja2V5IE1vdXNlLCBEdWNrIFRhbGVzLCBhbmQgaG93IFRoZSBMaW9uIEtpbmcgY2hhbmdlZCB0aGUgbGFuZHNjYXBlIG9mIFBDIGdhbWluZy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRpbmcgYnkgSW5uYWdhZGFkYXZpZGFcbmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvSW5uYWdhZGFkYURCWlxuXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuXG5WaWRlbyBmb290YWdlIG9mIEFsYWRkaW4gKFNORVMpIGJ5IENyYXNoIFRlc3QgR2FtaW5nOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUgzNWVhbWZkbV8wXG5WaWRlbyBmb290YWdlIG9mIER1Y2tUYWxlcyAoTkVTKSBCYWQgRW5kaW5nIGJ5IE5vc3RhbGdpYSBUcmlwOiBcbmh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9R0JReDlnLVVRY1lcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDZNNDBTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTIyODM0OCIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyNDg5NSIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICIzODciLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMTMzNSIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:25 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=u5LtbWFtmAQ&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:26 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:26 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=UREnTSY6Y3w&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:26 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIlAtUFo4c1l2T0dHc1FXc2FsYU9kdjRSRnlxUSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAia0pDUXQwMWFRWFFBc1BkcVFCUUIwNmhOejAwIiwKICAgICAgImlkIjogIlVSRW5UU1k2WTN3IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDUtMjhUMTk6MDU6MDdaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk1hcmlvIEdhbGF4eSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIEVnb3JhcHRvciBvZiBHYW1lIEdydW1wcyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5Nb3JlIE1hcmlvIOKWuiBodHRwOi8vYml0Lmx5LzFZNGU4V2FcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgU3VwZXIgTWFyaW8gR2FsYXh5LiBCb3RoIFN1cGVyIE1hcmlvIEdhbGF4eSBnYW1lcyB3ZXJlIGRldmVsb3BlZCBhbmQgcHVibGlzaGVkIGJ5IE5pbnRlbmRvIGZvciB0aGUgV2lpLiBSZWxlYXNlZCB3b3JsZHdpZGUgaW4gTm92ZW1iZXIgMjAwNyBhbmQgTWF5IDIwMTAgcmVzcGVjdGl2ZWx5LCB0aGUgc2VyaWVzIGhhcyBzZWVuIG92ZXJ3aGVsbWluZyBjcml0aWNhbCBhbmQgY29tbWVyY2lhbCBzdWNjZXNzLiBUaGUgZ2FtZXMgaGF2ZSBiZWVuIGhhaWxlZCBhcyBzb21lIG9mIHRoZSBiZXN0IG9mIGFsbCB0aW1lLCB3aXRoIHRoZSBmaXJzdCBnYW1lIHdpbm5pbmcgYSBCQUZUQS4gVGhlIGdhbWVzIGNvbWJpbmVkIGhhdmUgc29sZCBhcm91bmQgMjAgbWlsbGlvbiBjb3BpZXMgdG8gZGF0ZS5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZvaWNlZCBieSBodHRwOi8veW91dHViZS5jb20vZWdvcmFwdG9yXG5WaWRlbyBFZGl0ZWQgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtpdHN1bmUgSGF3a1xuXG4qVGhlIFRvcmltb3RpIGltYWdlIHdhcyBjYXB0dXJlZCBieSBQZWFyZGlhbiwgbm90IFJvYm90b3JvaXNlLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVVJFblRTWTZZM3cvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VUkVuVFNZNlkzdy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VUkVuVFNZNlkzdy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVVJFblRTWTZZM3cvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VUkVuVFNZNlkzdy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIm1hcmlvIiwKICAgICAgICAgICJtYXJpbyBnYWxheHkiLAogICAgICAgICAgInN1cGVyIG1hcmlvIGdhbGF4eSIsCiAgICAgICAgICAiR2FtaW5nIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgInZpZGVvIGdhbWUiLAogICAgICAgICAgInZpZGVvIGdhbWVzIiwKICAgICAgICAgICJzdXBlciBtYXJpbyIsCiAgICAgICAgICAibWFyaW8gYnJvcyIsCiAgICAgICAgICAibWFyaW8gZ2FsYXh5IDEiLAogICAgICAgICAgIm1hcmlvIGdhbGF4eSAyIiwKICAgICAgICAgICJtYXJpbyBtYWtlciIsCiAgICAgICAgICAibWFyaW8ga2FydCIsCiAgICAgICAgICAic3VwZXIgbWFyaW8gYnJvcyIsCiAgICAgICAgICAibHVpZ2kiLAogICAgICAgICAgIm5pbnRlbmRvIiwKICAgICAgICAgICJ3aWkgdSIsCiAgICAgICAgICAid2lpIiwKICAgICAgICAgICJ3aWl1IiwKICAgICAgICAgICJtYXJpbyBzZXJpZXMgKHZpZGVvIGdhbWUgc2VyaWVzKSIsCiAgICAgICAgICAic3VwZXIgbWFyaW8gc3Vuc2hpbmUiLAogICAgICAgICAgIm1hcmlvIHN1bnNoaW5lIiwKICAgICAgICAgICJzdXBlciBtYXJpbyA2NCIsCiAgICAgICAgICAibWFyaW8gNjQiLAogICAgICAgICAgImVnb3JhcHRvciIsCiAgICAgICAgICAiZ2FtZSBncnVtcHMiLAogICAgICAgICAgImdhbWUgZ3J1bXBzIG1hcmlvIiwKICAgICAgICAgICJzZWNyZXRzIiwKICAgICAgICAgICJmYWN0cyIsCiAgICAgICAgICAiZWFzdGVyIGVnZyIsCiAgICAgICAgICAiZWFzdGVyIGVnZ3MiLAogICAgICAgICAgImRhbm55IHNleGJhbmciLAogICAgICAgICAgInN0YXJib21iIiwKICAgICAgICAgICJzdGFyIGJvbWIiLAogICAgICAgICAgImdhbWVncnVtcHMiLAogICAgICAgICAgInlvdSIsCiAgICAgICAgICAiZGlkIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIk1hcmlvIEdhbGF4eSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIEVnb3JhcHRvciBvZiBHYW1lIEdydW1wcyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk1vcmUgTWFyaW8g4pa6IGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiBTdXBlciBNYXJpbyBHYWxheHkuIEJvdGggU3VwZXIgTWFyaW8gR2FsYXh5IGdhbWVzIHdlcmUgZGV2ZWxvcGVkIGFuZCBwdWJsaXNoZWQgYnkgTmludGVuZG8gZm9yIHRoZSBXaWkuIFJlbGVhc2VkIHdvcmxkd2lkZSBpbiBOb3ZlbWJlciAyMDA3IGFuZCBNYXkgMjAxMCByZXNwZWN0aXZlbHksIHRoZSBzZXJpZXMgaGFzIHNlZW4gb3ZlcndoZWxtaW5nIGNyaXRpY2FsIGFuZCBjb21tZXJjaWFsIHN1Y2Nlc3MuIFRoZSBnYW1lcyBoYXZlIGJlZW4gaGFpbGVkIGFzIHNvbWUgb2YgdGhlIGJlc3Qgb2YgYWxsIHRpbWUsIHdpdGggdGhlIGZpcnN0IGdhbWUgd2lubmluZyBhIEJBRlRBLiBUaGUgZ2FtZXMgY29tYmluZWQgaGF2ZSBzb2xkIGFyb3VuZCAyMCBtaWxsaW9uIGNvcGllcyB0byBkYXRlLlxuXG7ilrogTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2Fcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcbkZhbGxvdXQgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFOdFh3VWtcblxuVm9pY2VkIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9lZ29yYXB0b3JcblZpZGVvIEVkaXRlZCBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cblJlc2VhcmNoL1dyaXRpbmcgYnkgS2l0c3VuZSBIYXdrXG5cbipUaGUgVG9yaW1vdGkgaW1hZ2Ugd2FzIGNhcHR1cmVkIGJ5IFBlYXJkaWFuLCBub3QgUm9ib3Rvcm9pc2UuXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTI4UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE5NTQ1NzkiLAogICAgICAgICJsaWtlQ291bnQiOiAiMzY2MTMiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNTYzIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjQ4MTUiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:26 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=LAWAFe6HcUs&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:26 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInVweEFNZUQ4SC10Y1NhYVBQRWJ6VVJGR0NLSSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiY2R4aTA0N1FJdE11c0JLdUVHZmpLOFljSms0IiwKICAgICAgImlkIjogIkxBV0FGZTZIY1VzIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDUtMjFUMTg6NDE6MThaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlNvbmljIEJvb20gLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBKb25Ucm9uIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNvbmljIDA2IEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzFPcXlNaWhcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgU29uaWMgQm9vbS4gU29uaWMgQm9vbTogUmlzZSBvZiBMeXJpYyBpcyBhIDIwMTQgYWN0aW9uLWFkdmVudHVyZSBnYW1lIHB1Ymxpc2hlZCBieSBTZWdhIGFuZCBkZXZlbG9wZWQgYnkgQmlnIFJlZCBCdXR0b24gZm9yIHRoZSBXaWkgVS4gUmlzZSBvZiBMeXJpYyBoYWQgYSB2ZXJ5IG5lZ2F0aXZlIHJlY2VwdGlvbiwgYW5kIHdhcyBoZWF2aWx5IGNyaXRpY2l6ZWQgZm9yIGl0cyBudW1lcm91cyBnbGl0Y2hlcywgY2FtZXJhIHN5c3RlbSwgY29udHJvbHMsIGNvbWJhdCwgc3RvcnksIGRpYWxvZ3VlLCBhbmQgY2hhcmFjdGVyIGRldmVsb3BtZW50LiBUaGUgZ2FtZSBkaWQgbm90IHBlcmZvcm0gd2VsbCBjb21tZXJjaWFsbHksIHdpdGggdGhlIFdpaSBVIGFuZCAzRFMgU29uaWMgQm9vbSBnYW1lcyBvbmx5IHNlbGxpbmcgNjIwLDAwMCBjb3BpZXMgYXMgb2YgTWF5IDIwMTUuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvam9udHJvbnNob3dcblZpZGVvIGVkaXRlZCBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cbldyaXRpbmcvUmVzZWFyY2ggYnkgU2V1bWlkaCBNYWNEb25hbGRcblNjcmlwdCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9MQVdBRmU2SGNVcy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0xBV0FGZTZIY1VzL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0xBV0FGZTZIY1VzL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9MQVdBRmU2SGNVcy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0xBV0FGZTZIY1VzL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiam9udHJvbiIsCiAgICAgICAgICAiU29uaWMiLAogICAgICAgICAgIlNvbmljIEJvb20iLAogICAgICAgICAgInNvbmljIDA2IiwKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAidmlkZW8gZ2FtZSIsCiAgICAgICAgICAidmlkZW8gZ2FtZXMiLAogICAgICAgICAgInNvbmljIGJvb20gZ2FtZSIsCiAgICAgICAgICAic29uaWMgMiIsCiAgICAgICAgICAic29uaWMgYWR2ZW50dXJlIiwKICAgICAgICAgICJzb25pYyB0aGUgaGVkZ2Vob2ciLAogICAgICAgICAgIm1hcmlvIiwKICAgICAgICAgICJzb25pYyBib29tIiwKICAgICAgICAgICJzb25pYyBtdXNpYyIsCiAgICAgICAgICAic3VwZXIgc29uaWMiLAogICAgICAgICAgInNvbmljIHgiLAogICAgICAgICAgInNvbmljIGdlbmVyYXRpb25zIiwKICAgICAgICAgICJzb25pYyAyNXRoIGFubml2ZXJzYXJ5IiwKICAgICAgICAgICJtYXJpbyBzb25pYyIsCiAgICAgICAgICAic2VnYSIsCiAgICAgICAgICAic29uaWMgMyIsCiAgICAgICAgICAibmludGVuZG8iLAogICAgICAgICAgIndpaSB1IiwKICAgICAgICAgICIzZHMiLAogICAgICAgICAgInJpc2Ugb2YgbHlyaWMiLAogICAgICAgICAgInNoYXR0ZXJlZCBjcnlzdGFsIiwKICAgICAgICAgICJzb25pYyBib29tIHNvbmciLAogICAgICAgICAgInNvbmljIGJvb20gc2hhZG93IiwKICAgICAgICAgICJzb25pYyBnYW1lcyIsCiAgICAgICAgICAiam9uIHRyb24iLAogICAgICAgICAgImpvbnRyb25zaG93IiwKICAgICAgICAgICJnYW1lIGdydW1wcyBzb25pYyIsCiAgICAgICAgICAiZ2FtZSBncnVtcHMiLAogICAgICAgICAgImpvbiBqYWZhcmkiLAogICAgICAgICAgImR5a2cgYm9vbSIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJTb25pYyBCb29tIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSm9uVHJvbiIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNvbmljIDA2IEZhY3RzIOKWuiBodHRwOi8vYml0Lmx5LzFPcXlNaWhcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgU29uaWMgQm9vbS4gU29uaWMgQm9vbTogUmlzZSBvZiBMeXJpYyBpcyBhIDIwMTQgYWN0aW9uLWFkdmVudHVyZSBnYW1lIHB1Ymxpc2hlZCBieSBTZWdhIGFuZCBkZXZlbG9wZWQgYnkgQmlnIFJlZCBCdXR0b24gZm9yIHRoZSBXaWkgVS4gUmlzZSBvZiBMeXJpYyBoYWQgYSB2ZXJ5IG5lZ2F0aXZlIHJlY2VwdGlvbiwgYW5kIHdhcyBoZWF2aWx5IGNyaXRpY2l6ZWQgZm9yIGl0cyBudW1lcm91cyBnbGl0Y2hlcywgY2FtZXJhIHN5c3RlbSwgY29udHJvbHMsIGNvbWJhdCwgc3RvcnksIGRpYWxvZ3VlLCBhbmQgY2hhcmFjdGVyIGRldmVsb3BtZW50LiBUaGUgZ2FtZSBkaWQgbm90IHBlcmZvcm0gd2VsbCBjb21tZXJjaWFsbHksIHdpdGggdGhlIFdpaSBVIGFuZCAzRFMgU29uaWMgQm9vbSBnYW1lcyBvbmx5IHNlbGxpbmcgNjIwLDAwMCBjb3BpZXMgYXMgb2YgTWF5IDIwMTUuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvam9udHJvbnNob3dcblZpZGVvIGVkaXRlZCBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cbldyaXRpbmcvUmVzZWFyY2ggYnkgU2V1bWlkaCBNYWNEb25hbGRcblNjcmlwdCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ1TTUwUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE3MjAzNDkiLAogICAgICAgICJsaWtlQ291bnQiOiAiMzE4MzQiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNjI5IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjQ5ODAiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:26 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=U_RjQXie9Q0&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:26 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIlYyX0MwYVBkN1U2S2kxS1FDTVd0Y1h1VFFUQSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiT0NjVEY3TWs1RVdjNGJOMHlQSFI4YlZvMHNnIiwKICAgICAgImlkIjogIlVfUmpRWGllOVEwIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDQtMTZUMTk6NDY6MTNaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk1hcmlvIFBhcnR5IC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQnJ1dGFsbW9vc2UiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuTWFyaW8gR2xpdGNoZXMg4pa6IGh0dHA6Ly9iaXQubHkvMVc2T0ZlU1xuV2FyaW8gRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMjJDZlo0SVxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgTWFyaW8gUGFydHkuIE1hcmlvIFBhcnR5IGlzIGEgcGFydHkgZ2FtZSBzZXJpZXMgZGV2ZWxvcGVkIGJ5IEh1ZHNvbiBTb2Z0IChhbmQgbGF0ZXIgTmQgQ3ViZSkgYW5kIHB1Ymxpc2hlZCBieSBOaW50ZW5kby4gVGhlIHNlcmllcyBjdXJyZW50bHkgaG9sZHMgdGhlIHJlY29yZCBmb3IgdGhlIGxvbmdlc3QtcnVubmluZyBtaW5pZ2FtZSBzZXJpZXMsIGFuZCBoYXMgc29sZCBhcm91bmQgNDAgbWlsbGlvbiBjb3BpZXMgY29tYmluZWQuIEFsdGhvdWdoIHRoZSBzZXJpZXMgaXMgZmFpcmx5IGlubm9jZW50LCBpdCBoYXMgc2VlbiBtYW55IGNvbnRyb3ZlcnNpZXMgb3ZlciB0aGUgeWVhcnMuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZWQgYnkgaHR0cDovL3lvdXR1YmUuY29tL2JydXRhbG1vb3NlXG5WaWRlbyBFZGl0ZWQgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVV9SalFYaWU5UTAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VX1JqUVhpZTlRMC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VX1JqUVhpZTlRMC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVV9SalFYaWU5UTAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VX1JqUVhpZTlRMC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJkaWQgeW91IGtub3cgZ2FtaW5nIiwKICAgICAgICAgICJtYXJpbyBwYXJ0eSIsCiAgICAgICAgICAibWFyaW8gcGFydHkgMTAiLAogICAgICAgICAgIm1hcmlvIHBhcnR5IDkiLAogICAgICAgICAgIm1hcmlvIHBhcnR5IDgiLAogICAgICAgICAgIm1hcmlvIHBhcnR5IDIiLAogICAgICAgICAgIm1hcmlvIHBhcnR5IDQiLAogICAgICAgICAgIm1hcmlvIHBhcnR5IDMiLAogICAgICAgICAgIm1hcmlvIHBhcnR5IDEiLAogICAgICAgICAgIm1hcmlvIHBhcnR5IG11c2ljIiwKICAgICAgICAgICJtYXJpbyBicm9zIiwKICAgICAgICAgICJtYXJpbyIsCiAgICAgICAgICAic3VwZXIgbWFyaW8iLAogICAgICAgICAgIm1hcmlvIGthcnQiLAogICAgICAgICAgIm1hcmlvIHdpaSIsCiAgICAgICAgICAibWFyaW8gd29ybGQiLAogICAgICAgICAgIm1hcmlvIDY0IiwKICAgICAgICAgICJtYXJpbyBicm9zIHdpaSIsCiAgICAgICAgICAic3VwZXIgbWFyaW8gYnJvcyIsCiAgICAgICAgICAibWFyaW8gZ2FsYXh5IDIiLAogICAgICAgICAgIndpaSBtYXJpbyBrYXJ0IiwKICAgICAgICAgICJzdXBlciBtYXJpbyB3aWkiLAogICAgICAgICAgInN1cGVyIG1hcmlvIHdvcmxkIiwKICAgICAgICAgICJtYXJpbyBtYWtlciIsCiAgICAgICAgICAic3VwZXIgbWFyaW8gbWFrZXIiLAogICAgICAgICAgInJlYWN0IGdhbWluZyIsCiAgICAgICAgICAiYnJ1dGFsbW9vc2UiLAogICAgICAgICAgInlvdSIsCiAgICAgICAgICAiZGlkIiwKICAgICAgICAgICIxMDAgbWFyaW8gY2hhbGxlbmdlIiwKICAgICAgICAgICJuaW50ZW5kbyIsCiAgICAgICAgICAidmlkZW8gZ2FtZSIsCiAgICAgICAgICAid2lpIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIk1hcmlvIFBhcnR5IC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQnJ1dGFsbW9vc2UiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5NYXJpbyBHbGl0Y2hlcyDilrogaHR0cDovL2JpdC5seS8xVzZPRmVTXG5XYXJpbyBGYWN0cyDilrogaHR0cDovL2JpdC5seS8yMkNmWjRJXG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiBNYXJpbyBQYXJ0eS4gTWFyaW8gUGFydHkgaXMgYSBwYXJ0eSBnYW1lIHNlcmllcyBkZXZlbG9wZWQgYnkgSHVkc29uIFNvZnQgKGFuZCBsYXRlciBOZCBDdWJlKSBhbmQgcHVibGlzaGVkIGJ5IE5pbnRlbmRvLiBUaGUgc2VyaWVzIGN1cnJlbnRseSBob2xkcyB0aGUgcmVjb3JkIGZvciB0aGUgbG9uZ2VzdC1ydW5uaW5nIG1pbmlnYW1lIHNlcmllcywgYW5kIGhhcyBzb2xkIGFyb3VuZCA0MCBtaWxsaW9uIGNvcGllcyBjb21iaW5lZC4gQWx0aG91Z2ggdGhlIHNlcmllcyBpcyBmYWlybHkgaW5ub2NlbnQsIGl0IGhhcyBzZWVuIG1hbnkgY29udHJvdmVyc2llcyBvdmVyIHRoZSB5ZWFycy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZvaWNlZCBieSBodHRwOi8veW91dHViZS5jb20vYnJ1dGFsbW9vc2VcblZpZGVvIEVkaXRlZCBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW9cblJlc2VhcmNoL1dyaXRpbmcgYnkgS2VsbGVuIE1jSW50eXJlXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTI2UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE3NDMwNTAiLAogICAgICAgICJsaWtlQ291bnQiOiAiMjUwNTYiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNDM4IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjI1NzEiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:27 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=iX_kJhd_8QE&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:27 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:27 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=QB22vUluwB4&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:27 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:27 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=XOKa2GXiCgw&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:27 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIkZVWDRqdUNWeFZxWktCY2czX09FUnhIMFdTSSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiZVRCUWtrUkFRUzNTNEZJemIyWl94NmZvQ1hNIiwKICAgICAgImlkIjogIlhPS2EyR1hpQ2d3IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDMtMTJUMjA6MjQ6NTRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIldhcmlvIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSmltbXkgV2hldHplbCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5aZWxkYSBHbGl0Y2hlcyDilrogaHR0cDovL2JpdC5seS8xbkFCQU4wXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIFdhcmlvLiBXYXJpbyBmaXJzdCBhcHBlYXJlZCBvbiB0aGUgTmludGVuZG8gR2FtZSBCb3kgd2l0aCBTdXBlciBNYXJpbyBMYW5kIDI6IDYgR29sZGVuIENvaW5zIGFzIHRoZSBtYWluIGFudGFnb25pc3QuIE9yaWdpbmFsbHkgcG9ydHJheWVkIGFzIGFuIGV4YWdnZXJhdGVkIHZlcnNpb24gb2YgTWFyaW8sIGhpcyBuYW1lIGlzIGEgcG9ydG1hbnRlYXUgb2YgTWFyaW8ncyBuYW1lIGFuZCB0aGUgSmFwYW5lc2Ugd29yZCB3YXJ1aSAsIG1lYW5pbmcgXCJiYWRcIi4gV2FyaW8gd2FzIGZpcnN0IGRlc2lnbmVkIGJ5IEhpcm9qaSBLaXlvdGFrZSwgYW5kIGlzIHZvaWNlZCBieSBDaGFybGVzIE1hcnRpbmV0LCB3aG8gYWxzbyB2b2ljZXMgbWFueSBvdGhlciBjaGFyYWN0ZXJzIGluIHRoZSBzZXJpZXMuIFdhcmlvIGxhdGVyIGJlY2FtZSB0aGUgcHJvdGFnb25pc3Qgb2YgdGhlIFdhcmlvIExhbmQgYW5kIFdhcmlvV2FyZSBzZXJpZXMuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuUmVzZWFyY2gvV3JpdGluZyBieSBLZWxsZW4gTWNJbnR5cmVcblNjcmlwdCBFZGl0aW5nIGJ5IENhcmEgSGlsbHN0b2NrXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9YT0thMkdYaUNndy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hPS2EyR1hpQ2d3L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hPS2EyR1hpQ2d3L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9YT0thMkdYaUNndy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hPS2EyR1hpQ2d3L21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiR2FtaW5nIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgIndhcmlvIiwKICAgICAgICAgICJtYXJpbyIsCiAgICAgICAgICAibWFyaW8gd2FyaW8iLAogICAgICAgICAgIndhcmlvIGxhbmQiLAogICAgICAgICAgIndhcmlvIHdvcmxkIiwKICAgICAgICAgICJ3YXJpbyB3YXJlIiwKICAgICAgICAgICJ3YXJpbyB3aWkiLAogICAgICAgICAgIndhcmlvIGxhbmQgNCIsCiAgICAgICAgICAid2FsdWlnaSIsCiAgICAgICAgICAic3VwZXIgd2FyaW8gYnJvcyIsCiAgICAgICAgICAibWFyaW8gdnMgd2FyaW8iLAogICAgICAgICAgIndhcmlvIGxhbmQgMyIsCiAgICAgICAgICAiZ2FtZSBhbmQgd2FyaW8iLAogICAgICAgICAgIndhcmlvIHdhbHVpZ2kiLAogICAgICAgICAgIndhcmlvIGJyb3MiLAogICAgICAgICAgIndhcmlvIGdhbWVzIiwKICAgICAgICAgICJOaW50ZW5kbyIsCiAgICAgICAgICAiZ2FtZSBib3kiLAogICAgICAgICAgImdhbWVib3kiLAogICAgICAgICAgIndpaSIsCiAgICAgICAgICAid2FyaW93YXJlIiwKICAgICAgICAgICJzdXBlciBtYXJpbyIsCiAgICAgICAgICAibWFyaW8gYnJvcyIsCiAgICAgICAgICAibWFyaW8gbWFrZXIiLAogICAgICAgICAgInN1cGVyIG1hcmlvIG1ha2VyIiwKICAgICAgICAgICJqaW1teSB3aGV0emVsIiwKICAgICAgICAgICJuaW50ZW5kb2ZhbmZ0dyIsCiAgICAgICAgICAicmVhY3QgZ2FtaW5nIiwKICAgICAgICAgICJzbWFzaCBicm9zIiwKICAgICAgICAgICJzdXBlciBzbWFzaCBicm9zIiwKICAgICAgICAgICJlYXN0ZXIgZWdnIiwKICAgICAgICAgICJ2aWRlbyBnYW1lcyIsCiAgICAgICAgICAiZ2FtZXMiLAogICAgICAgICAgImNoYXJsZXMgbWFydGluZXQgd2FyaW8iLAogICAgICAgICAgImRpZCIsCiAgICAgICAgICAieW91IgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIldhcmlvIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSmltbXkgV2hldHplbCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblplbGRhIEdsaXRjaGVzIOKWuiBodHRwOi8vYml0Lmx5LzFuQUJBTjBcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgV2FyaW8uIFdhcmlvIGZpcnN0IGFwcGVhcmVkIG9uIHRoZSBOaW50ZW5kbyBHYW1lIEJveSB3aXRoIFN1cGVyIE1hcmlvIExhbmQgMjogNiBHb2xkZW4gQ29pbnMgYXMgdGhlIG1haW4gYW50YWdvbmlzdC4gT3JpZ2luYWxseSBwb3J0cmF5ZWQgYXMgYW4gZXhhZ2dlcmF0ZWQgdmVyc2lvbiBvZiBNYXJpbywgaGlzIG5hbWUgaXMgYSBwb3J0bWFudGVhdSBvZiBNYXJpbydzIG5hbWUgYW5kIHRoZSBKYXBhbmVzZSB3b3JkIHdhcnVpICwgbWVhbmluZyBcImJhZFwiLiBXYXJpbyB3YXMgZmlyc3QgZGVzaWduZWQgYnkgSGlyb2ppIEtpeW90YWtlLCBhbmQgaXMgdm9pY2VkIGJ5IENoYXJsZXMgTWFydGluZXQsIHdobyBhbHNvIHZvaWNlcyBtYW55IG90aGVyIGNoYXJhY3RlcnMgaW4gdGhlIHNlcmllcy4gV2FyaW8gbGF0ZXIgYmVjYW1lIHRoZSBwcm90YWdvbmlzdCBvZiB0aGUgV2FyaW8gTGFuZCBhbmQgV2FyaW9XYXJlIHNlcmllcy5cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEtlbGxlbiBNY0ludHlyZVxuU2NyaXB0IEVkaXRpbmcgYnkgQ2FyYSBIaWxsc3RvY2tcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDdNMTNTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTUzODI1NSIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyODk3MyIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI0MzAiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMTg3MiIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:27 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=uQYyUzR66Z0&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:28 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIkhQcHdMZC04cm5iTjBCb3BLaWtoMkY1Wnk3NCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAieVgwYXVaemM4NEZyZGhUR3lVZjA3YXhzTGlBIiwKICAgICAgImlkIjogInVRWXlVelI2NlowIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDMtMDZUMjA6MjQ6NTNaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkNvbmtlciAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFRoZUNhcnRvb25HYW1lciIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5OaW50ZW5kbyA2NCBGYWN0cyDilrogaHR0cDovL2JpdC5seS8xcG9ncUR1XG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIHRoZSBDb25rZXIgc2VyaWVzLiBDb25rZXIgaXMgYW4gYWN0aW9uLWFkdmVudHVyZSBmcmFuY2hpc2UgY3JlYXRlZCBieSBSYXJlLCBhbmQgaW5pdGlhbGx5IGRldmVsb3BlZCBmb3IgdGhlIE5pbnRlbmRvIDY0IGFuZCBHYW1lIEJveSBkZXZpY2VzLiBBbHRob3VnaCB0aGUgZmlyc3QgZ2FtZSBpbiB0aGUgc2VyaWVzIHdhcyBmYW1pbHkgZnJpZW5kbHkgYW5kIG1hZGUgc3BlY2lmaWNhbGx5IGZvciBjaGlsZHJlbiwgdGhlIHNlcmllcycgbGF0ZXIgZ2FtZXMgd2VyZSBrbm93biBmb3IgdGhlaXIgbWF0dXJlIGNvbnRlbnQsIHN1Y2ggYXMgdmlvbGVuY2UsIHNleHVhbCBpbm51ZW5kbywgYW5kIHN0cm9uZyBsYW5ndWFnZS4gVGhlIGZyYW5jaGlzZSBoYXMgc29sZCBvdmVyIDIuMTUgbWlsbGlvbiB1bml0cyBpbmNsdWRpbmcgUmFyZSBSZXBsYXkgc2FsZXMuXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5WaWRlbyBieSBodHRwczovL3d3dy55b3V0dWJlLmNvbS9UaGVDYXJ0b29uR2FtZXI4MDAwXG5cbkxpdmUgJiBSZWxvYWRlZCBGb290YWdlIGZyb20gaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9UaGVOaXNrZWxMUFxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdVFZeVV6UjY2WjAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91UVl5VXpSNjZaMC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91UVl5VXpSNjZaMC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdVFZeVV6UjY2WjAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS91UVl5VXpSNjZaMC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJjb25rZXIgbGl2ZSIsCiAgICAgICAgICAiY29ua2VyIHJlbG9hZGVkIiwKICAgICAgICAgICJjb25rZXIgbGl2ZSByZWxvYWRlZCIsCiAgICAgICAgICAibGl2ZSBhbmQgcmVsb2FkZWQgY29ua2VyIGxpdmUgYW5kIHJlbG9hZGVkIiwKICAgICAgICAgICJjb25rZXIgYmFkIGZ1ciIsCiAgICAgICAgICAiYmFkIGZ1ciBkYXkiLAogICAgICAgICAgImNvbmtlciB4Ym94IiwKICAgICAgICAgICJjb25rZXIgd2Fsa3Rocm91Z2giLAogICAgICAgICAgImNvbmtlciA2NCIsCiAgICAgICAgICAiY29ua2VyIDIiLAogICAgICAgICAgImNvbmtlciAzNjAiLAogICAgICAgICAgImNvbmtlciBtdWx0aXBsYXllciIsCiAgICAgICAgICAieW91bmcgY29ua2VyIiwKICAgICAgICAgICJyYXJlIiwKICAgICAgICAgICJyYXJld2FyZSIsCiAgICAgICAgICAicmFyZSByZXBsYXkiLAogICAgICAgICAgInJhcmUgcmVwbGF5IGNvbmtlciIsCiAgICAgICAgICAicmFyZSByZXBsYXkgZ2FtZXBsYXkiLAogICAgICAgICAgInhib3ggMzYwIiwKICAgICAgICAgICJ4Ym94IG9uZSIsCiAgICAgICAgICAibmludGVuZG8gNjQiLAogICAgICAgICAgIm42NCIsCiAgICAgICAgICAiYmFuam8ga2F6b29pZSIsCiAgICAgICAgICAiYmFuam8gdG9vaWUiLAogICAgICAgICAgImJhbmpvIGthem9vaWUgbXVzaWMiLAogICAgICAgICAgIm1pY3Jvc29mdCIsCiAgICAgICAgICAiY29ua2VycyBiYWQgZnVyIGRheSIsCiAgICAgICAgICAibmludGVuZG8iLAogICAgICAgICAgImpvbnRyb24iLAogICAgICAgICAgImhvbG9sZW5zIiwKICAgICAgICAgICJ5b3UiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiQ29ua2VyIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gVGhlQ2FydG9vbkdhbWVyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuTmludGVuZG8gNjQgRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvMXBvZ3FEdVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiB0aGUgQ29ua2VyIHNlcmllcy4gQ29ua2VyIGlzIGFuIGFjdGlvbi1hZHZlbnR1cmUgZnJhbmNoaXNlIGNyZWF0ZWQgYnkgUmFyZSwgYW5kIGluaXRpYWxseSBkZXZlbG9wZWQgZm9yIHRoZSBOaW50ZW5kbyA2NCBhbmQgR2FtZSBCb3kgZGV2aWNlcy4gQWx0aG91Z2ggdGhlIGZpcnN0IGdhbWUgaW4gdGhlIHNlcmllcyB3YXMgZmFtaWx5IGZyaWVuZGx5IGFuZCBtYWRlIHNwZWNpZmljYWxseSBmb3IgY2hpbGRyZW4sIHRoZSBzZXJpZXMnIGxhdGVyIGdhbWVzIHdlcmUga25vd24gZm9yIHRoZWlyIG1hdHVyZSBjb250ZW50LCBzdWNoIGFzIHZpb2xlbmNlLCBzZXh1YWwgaW5udWVuZG8sIGFuZCBzdHJvbmcgbGFuZ3VhZ2UuIFRoZSBmcmFuY2hpc2UgaGFzIHNvbGQgb3ZlciAyLjE1IG1pbGxpb24gdW5pdHMgaW5jbHVkaW5nIFJhcmUgUmVwbGF5IHNhbGVzLlxuXG7ilrogTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2Fcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcbkZhbGxvdXQgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFOdFh3VWtcblxuVmlkZW8gYnkgaHR0cHM6Ly93d3cueW91dHViZS5jb20vVGhlQ2FydG9vbkdhbWVyODAwMFxuXG5MaXZlICYgUmVsb2FkZWQgRm9vdGFnZSBmcm9tIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvVGhlTmlza2VsTFBcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDZNNTZTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTYxMTQ0NyIsCiAgICAgICAgImxpa2VDb3VudCI6ICIzMjExNCIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI1MDUiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMjEzNyIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:28 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=fWl8HJwp7Tw&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:28 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:28 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=HrRYRtI1Zyc&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:28 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInlLS19xeGF5Q1p1UURKaWw2ZFgxREtwYkFtVSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiRDA4aEJfTV9YTjFoSHI5N3BPb3dZX0F6QWZVIiwKICAgICAgImlkIjogIkhyUllSdEkxWnljIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDMtMDVUMTk6NTk6MTdaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlplbGRhIEdsaXRjaGVzICAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQgQStTdGFydCAoU29uIG9mIGEgR2xpdGNoKSAoT2NhcmluYSB0byBUd2lsaWdodCBQcmluY2VzcykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuU2t5d2FyZCBTd29yZCBHbGl0Y2hlcyBTb24gb2YgYSBHbGl0Y2jilrogaHR0cDovL2JpdC5seS8xUVY5UUtxXG5NYXJpbyBHbGl0Y2hlcyEg4pa64pa6IGh0dHA6Ly9iaXQubHkvMmQ3Y0dWVVxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGFwcGxpY2F0aW9ucyBvZiBaZWxkYSBHbGl0Y2hlcy4gR2xpdGNoZXMgaW4gWmVsZGEgZ2FtZXMgaGF2ZSBsb25nIGJlZW4gdXNlZCB0byBtYWtlIE5pbnRlbmRvJ3MgZ2FtZXMgZWFzaWVyLCBvciB0byBicmVhayB0aGVtIGZvciBzcGVlZCBydW5uaW5nIHB1cnBvc2VzLiBJbiB0aGlzIGFuYWx5c2lzLCB3ZSBwcmVzZW50IGFuZCBleHBsb3JlIHRoZSBiYWNrZ3JvdW5kIG9mIHRoZXNlIGV4cGxvaXRzIGZyb20gT2NhcmluYSBvZiBUaW1lIHRvIFR3aWxpZ2h0IFByaW5jZXNzIEhELCB0b3VjaGluZyBvbiAyMCB5ZWFycyBvZiBaZWxkYSBnbGl0Y2ggaGlzdG9yeS5cblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrogTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcbkZhbGxvdXQgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFOdFh3VWtcblxuVm9pY2Ugb3ZlciBieSBodHRwOi8veW91dHViZS5jb20vQWFuZFN0YXJ0XG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEdlb2ZmIFRoZXdcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0hyUllSdEkxWnljL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSHJSWVJ0STFaeWMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSHJSWVJ0STFaeWMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0hyUllSdEkxWnljL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSHJSWVJ0STFaeWMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgIkdsaXRjaCIsCiAgICAgICAgICAiR2xpdGNoIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAic29uIG9mIGEgZ2xpdGNoIiwKICAgICAgICAgICJzdXBlciBuaW50ZW5kbyIsCiAgICAgICAgICAiZ2xpdGNoZXMiLAogICAgICAgICAgIm5pbnRlbmRvIiwKICAgICAgICAgICJuaW50ZW5kbyA2NCIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJhK3N0YXJ0IiwKICAgICAgICAgICJ6ZWxkYSIsCiAgICAgICAgICAiemVsZGEgZ2xpdGNoZXMiLAogICAgICAgICAgImxlZ2VuZCBvZiB6ZWxkYSIsCiAgICAgICAgICAib2NhcmluYSBvZiB0aW1lIiwKICAgICAgICAgICJ6ZWxkYSBvY2FyaW5hIiwKICAgICAgICAgICJ6ZWxkYSB0d2lsaWdodCBwcmluY2VzcyIsCiAgICAgICAgICAidHdpbGlnaHQgcHJpbmNlc3MiLAogICAgICAgICAgInR3aWxpZ2h0IHByaW5jZXNzIGhkIiwKICAgICAgICAgICJ3aW5kIHdha2VyIiwKICAgICAgICAgICJtYWpvcmFzIG1hc2siLAogICAgICAgICAgInplbGRhIG1ham9yYXMgbWFzayIsCiAgICAgICAgICAiemVsZGEgbGluayIsCiAgICAgICAgICAiemVsZGEgdGhlbWUiLAogICAgICAgICAgInplbGRhIG54IiwKICAgICAgICAgICJ6ZWxkYSB3aWkgdSIsCiAgICAgICAgICAiemVsZGEgZ2xpdGNoIiwKICAgICAgICAgICJza3l3YXJkIHN3b3JkIiwKICAgICAgICAgICJnYW1lcGxheSIsCiAgICAgICAgICAiZ2FtZWN1YmUiLAogICAgICAgICAgIm1pZG5hIiwKICAgICAgICAgICIzZHMiLAogICAgICAgICAgIm54IiwKICAgICAgICAgICJpZ24iLAogICAgICAgICAgImFuYWx5c2lzIiwKICAgICAgICAgICJlYXN0ZXIgZWdnIiwKICAgICAgICAgICJyZW1ha2UiLAogICAgICAgICAgInRoZSBsZWdlbmQgb2YgemVsZGEiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiWmVsZGEgR2xpdGNoZXMgIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdCBBK1N0YXJ0IChTb24gb2YgYSBHbGl0Y2gpIChPY2FyaW5hIHRvIFR3aWxpZ2h0IFByaW5jZXNzKSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNreXdhcmQgU3dvcmQgR2xpdGNoZXMgU29uIG9mIGEgR2xpdGNo4pa6IGh0dHA6Ly9iaXQubHkvMVFWOVFLcVxuTWFyaW8gR2xpdGNoZXMhIOKWuuKWuiBodHRwOi8vYml0Lmx5LzJkN2NHVlVcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBhcHBsaWNhdGlvbnMgb2YgWmVsZGEgR2xpdGNoZXMuIEdsaXRjaGVzIGluIFplbGRhIGdhbWVzIGhhdmUgbG9uZyBiZWVuIHVzZWQgdG8gbWFrZSBOaW50ZW5kbydzIGdhbWVzIGVhc2llciwgb3IgdG8gYnJlYWsgdGhlbSBmb3Igc3BlZWQgcnVubmluZyBwdXJwb3Nlcy4gSW4gdGhpcyBhbmFseXNpcywgd2UgcHJlc2VudCBhbmQgZXhwbG9yZSB0aGUgYmFja2dyb3VuZCBvZiB0aGVzZSBleHBsb2l0cyBmcm9tIE9jYXJpbmEgb2YgVGltZSB0byBUd2lsaWdodCBQcmluY2VzcyBIRCwgdG91Y2hpbmcgb24gMjAgeWVhcnMgb2YgWmVsZGEgZ2xpdGNoIGhpc3RvcnkuXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb21cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZvaWNlIG92ZXIgYnkgaHR0cDovL3lvdXR1YmUuY29tL0FhbmRTdGFydFxuUmVzZWFyY2gvV3JpdGluZyBieSBHZW9mZiBUaGV3XG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGgiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQxME0yNVMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIyMjI3ODQ4IiwKICAgICAgICAibGlrZUNvdW50IjogIjMzMjc3IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjEwMjkiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMTk1NyIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:28 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=oUEVMLgzmHs&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:29 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:29 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=NwqCpEK6iLY&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:29 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIktpMWh3N2djU2dkVVlMWGhPUHBhcXhyVHA0dyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiMXotakNkNmdUTWN5QUpEeDFscFFWME1RV05nIiwKICAgICAgImlkIjogIk53cUNwRUs2aUxZIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDItMDZUMjA6MjI6MzdaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkJheW9uZXR0YSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFB1c2hpbmdVcFJvc2VzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa2IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNtYXNoIEJyb3MgV2lpIFUgRmFjdHMhICDilrYgaHR0cDovL2JpdC5seS8xVVRNajB1XG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIEJheW9uZXR0YS4gQmF5b25ldHRhIGlzIGEgdGhpcmQtcGVyc29uIGFjdGlvbiBnYW1lIGJ5IFBsYXRpbnVtR2FtZXMuIEl0IHdhcyBvcmlnaW5hbGx5IHJlbGVhc2VkIGZvciBYYm94IDM2MCBhbmQgUGxheVN0YXRpb24gMywgYnV0IHdhcyBsYXRlciByZWxlYXNlZCBvbiB0aGUgV2lpIFUgYWxvbmdzaWRlIGl0cyBzZXF1ZWwsIEJheW9uZXR0YSAyLCB3aGljaCB3YXMgYW5ub3VuY2VkIGV4Y2x1c2l2ZWx5IGZvciBXaWkgVS4gVGhlIGdhbWUgd2FzIHN0dWNrIGluIGRldmVsb3BtZW50IGhlbGwsIGJ1dCB3YXMgc2F2ZWQgYnkgTmludGVuZG8gd2hvIGZ1cnRoZXIgZnVuZGVkIHRoZSBnYW1lIGFsb25nc2lkZSBTZWdhLiBUaGUgZnJhbmNoaXNlIGhhcyBzb2xkIG92ZXIgMyBtaWxsaW9uIHVuaXRzLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvcHVzaGluZ3Vwcm9zZXNcblZpZGVvIGVkaXRlZCBieSBJbm5hZ2FkYWRhdmlkYVxuV3JpdGluZy9SZXNlYXJjaCBieSBFdmVseW4gTWlhbm93c2tpXG5TY3JpcHQgRWRpdGluZyBieSBDYXJhIEhpbGxzdG9jayIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL053cUNwRUs2aUxZL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTndxQ3BFSzZpTFkvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTndxQ3BFSzZpTFkvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL053cUNwRUs2aUxZL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTndxQ3BFSzZpTFkvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgInZpZGVvIGdhbWVzIiwKICAgICAgICAgICJkaWQgeW91IGtub3cgZ2FtaW5nIiwKICAgICAgICAgICJiYXlvbmV0dGEiLAogICAgICAgICAgImJheW9uZXR0YSAyIiwKICAgICAgICAgICJzbWFzaCBiYXlvbmV0dGEiLAogICAgICAgICAgInNtYXNoIGJyb3MgYmF5b25ldHRhIiwKICAgICAgICAgICJiYXlvbmV0dGEgb3N0IiwKICAgICAgICAgICJiYXlvbmV0dGEgdHJhaWxlciIsCiAgICAgICAgICAiYmF5b25ldHRhIHRoZW1lIiwKICAgICAgICAgICJiYXlvbmV0dGEgZ2FtZXBsYXkiLAogICAgICAgICAgImJheW9uZXR0YSByZWFjdGlvbiIsCiAgICAgICAgICAibW9vbiByaXZlciBiYXlvbmV0dGEiLAogICAgICAgICAgIm1vb24gcml2ZXIiLAogICAgICAgICAgImZseSBtZSB0byB0aGUgbW9vbiIsCiAgICAgICAgICAiYmF5b25ldHRhIDIgZ2FtZXBsYXkiLAogICAgICAgICAgInN1cGVyIHNtYXNoIGJyb3MiLAogICAgICAgICAgInNtYXNoIGJyb3MiLAogICAgICAgICAgIndpaSB1IiwKICAgICAgICAgICJjYXBjb20iLAogICAgICAgICAgInNlZ2EiLAogICAgICAgICAgIm5pbnRlbmRvIiwKICAgICAgICAgICJiYXlvbmV0dGEgd2lpIHUiLAogICAgICAgICAgInNzYjQgYmF5b25ldHRhIiwKICAgICAgICAgICJiYXlvbmV0dGEgMyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJwdXNoaW5ndXByb3NlcyIsCiAgICAgICAgICAicHVzaGluZyB1cCByb3NlcyIsCiAgICAgICAgICAiYmF5b25ldHRhIGVhc3RlciBlZ2ciLAogICAgICAgICAgImJheW9uZXR0YSBmYWN0cyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJCYXlvbmV0dGEgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBQdXNoaW5nVXBSb3NlcyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa2IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNtYXNoIEJyb3MgV2lpIFUgRmFjdHMhICDilrYgaHR0cDovL2JpdC5seS8xVVRNajB1XG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIEJheW9uZXR0YS4gQmF5b25ldHRhIGlzIGEgdGhpcmQtcGVyc29uIGFjdGlvbiBnYW1lIGJ5IFBsYXRpbnVtR2FtZXMuIEl0IHdhcyBvcmlnaW5hbGx5IHJlbGVhc2VkIGZvciBYYm94IDM2MCBhbmQgUGxheVN0YXRpb24gMywgYnV0IHdhcyBsYXRlciByZWxlYXNlZCBvbiB0aGUgV2lpIFUgYWxvbmdzaWRlIGl0cyBzZXF1ZWwsIEJheW9uZXR0YSAyLCB3aGljaCB3YXMgYW5ub3VuY2VkIGV4Y2x1c2l2ZWx5IGZvciBXaWkgVS4gVGhlIGdhbWUgd2FzIHN0dWNrIGluIGRldmVsb3BtZW50IGhlbGwsIGJ1dCB3YXMgc2F2ZWQgYnkgTmludGVuZG8gd2hvIGZ1cnRoZXIgZnVuZGVkIHRoZSBnYW1lIGFsb25nc2lkZSBTZWdhLiBUaGUgZnJhbmNoaXNlIGhhcyBzb2xkIG92ZXIgMyBtaWxsaW9uIHVuaXRzLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvcHVzaGluZ3Vwcm9zZXNcblZpZGVvIGVkaXRlZCBieSBJbm5hZ2FkYWRhdmlkYVxuV3JpdGluZy9SZXNlYXJjaCBieSBFdmVseW4gTWlhbm93c2tpXG5TY3JpcHQgRWRpdGluZyBieSBDYXJhIEhpbGxzdG9jayIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDhNMTdTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAidHJ1ZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIxMjg1MjE3IiwKICAgICAgICAibGlrZUNvdW50IjogIjM1NzY4IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjQxMyIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI0MDA4IgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:29 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=1Q-uzcSOxVM&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:29 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIkZGb3Fzc25XMzZteHpiaklicU9xOEdpVEhZRSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiSEw1RWhxYkJRaXNvV25zbGdOVVdMWTVwOTZBIiwKICAgICAgImlkIjogIjFRLXV6Y1NPeFZNIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDEtMDJUMTk6NTA6MjBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlRoZSBTaW1wc29ucyBIaXQgJiBSdW4gLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBoM2gzIFByb2R1Y3Rpb25zIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNvdXRoIFBhcmsgVmlkZW9zIOKWuiBodHRwOi8vYml0Lmx5LzFSMzFrUDNcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgVGhlIFNpbXBzb25zIEhpdCAmIFJ1bi4gSGl0ICYgUnVuIGlzIGJhc2VkIG9uIHRoZSBBbWVyaWNhbiBhbmltYXRlZCBzaXRjb20gVGhlIFNpbXBzb25zLCBhbmQgd2FzIGhlYXZpbHkgaW5zcGlyZWQgYnkgUm9ja3N0YXIncyBHcmFuZCBUaGVmdCBBdXRvIHNlcmllcy4gVGhlIGdhbWUgd2FzIGRldmVsb3BlZCBieSBSYWRpY2FsIEVudGVydGFpbm1lbnQsIGFuZCB3YXMgcHVibGlzaGVkIG9uIHRoZSBQbGF5U3RhdGlvbiAyLCBYYm94LCBHYW1lQ3ViZSBhbmQgUEMgYnkgVml2ZW5kaSBVbml2ZXJzYWwgR2FtZXMuIFRoZSBzdG9yeSBhbmQgZGlhbG9ndWUgd2VyZSBjcmFmdGVkIGJ5IHdyaXRlcnMgZnJvbSBUaGUgU2ltcHNvbnMsIHdpdGggYWxsIGNoYXJhY3RlciB2b2ljZXMgc3VwcGxpZWQgYnkgdGhlIGFjdHVhbCBjYXN0LiBUaGUgZ2FtZSBtYXkgaGF2ZSBzb2xkIGFzIG1hbnkgYXMgNyBtaWxsaW9uIGNvcGllcyB3b3JsZCB3aWRlLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2gzaDNwcm9kdWN0aW9uc1xuUmVzZWFyY2gvV3JpdGluZyBieSBHaWFjbyBGdXJpbm9cblZpZGVvIGVkaXRlZCBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW8iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xUS11emNTT3hWTS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFRLXV6Y1NPeFZNL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFRLXV6Y1NPeFZNL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xUS11emNTT3hWTS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzFRLXV6Y1NPeFZNL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiR2FtaW5nIiwKICAgICAgICAgICJkaWR5b3Vrbm93IiwKICAgICAgICAgICJUaGUgU2ltcHNvbnMiLAogICAgICAgICAgIlNpbXBzb25zIiwKICAgICAgICAgICJ0aGUgc2ltcHNvbnMgKHR2IHByb2dyYW0pIiwKICAgICAgICAgICJjYXJ0b29uIiwKICAgICAgICAgICJhbmltYXRlZCIsCiAgICAgICAgICAic2ltcHNvbnMgZnVsbCBlcGlzb2RlIiwKICAgICAgICAgICJzaW1wc29ucyBmdWxsIiwKICAgICAgICAgICJ0aGUgc2ltcHNvbnMgZ2FtZSIsCiAgICAgICAgICAiVGhlIFNpbXBzb25zIEhpdCAmIFJ1biIsCiAgICAgICAgICAiVGhlIFNpbXBzb25zIEhpdCBhbmQgUnVuIiwKICAgICAgICAgICJTaW1wc29ucyBIaXQgYW5kIFJ1biIsCiAgICAgICAgICAiU2ltcHNvbnMgSGl0ICYgUnVuIiwKICAgICAgICAgICJoaXQgYW5kIHJ1biIsCiAgICAgICAgICAiaGl0ICYgcnVuIiwKICAgICAgICAgICJzaW1wc29ucyBoaXQgbiBydW4iLAogICAgICAgICAgImdyYW5kIHRoZWZ0IGF1dG8iLAogICAgICAgICAgImd0YSIsCiAgICAgICAgICAic2ltcHNvbnMgcm9hZCByYWdlIiwKICAgICAgICAgICJ0aGUgc2ltcHNvbnMgcm9hZCByYWdlIiwKICAgICAgICAgICJzaW1wc29ucyBwczIiLAogICAgICAgICAgInBsYXlzdGF0aW9uIDIiLAogICAgICAgICAgInBzMiIsCiAgICAgICAgICAic2ltcHNvbnMgZ2FtZXMiLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgImgzaDMiLAogICAgICAgICAgImgzaDMgcmVhY3Rpb24gdmlkZW8iLAogICAgICAgICAgImgzaDNwcm9kdWN0aW9ucyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAiZ2FtZSBncnVtcHMgaDNoMyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJUaGUgU2ltcHNvbnMgSGl0ICYgUnVuIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gaDNoMyBQcm9kdWN0aW9ucyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblNvdXRoIFBhcmsgVmlkZW9zIOKWuiBodHRwOi8vYml0Lmx5LzFSMzFrUDNcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGhpc3Rvcnkgb2YgVGhlIFNpbXBzb25zIEhpdCAmIFJ1bi4gSGl0ICYgUnVuIGlzIGJhc2VkIG9uIHRoZSBBbWVyaWNhbiBhbmltYXRlZCBzaXRjb20gVGhlIFNpbXBzb25zLCBhbmQgd2FzIGhlYXZpbHkgaW5zcGlyZWQgYnkgUm9ja3N0YXIncyBHcmFuZCBUaGVmdCBBdXRvIHNlcmllcy4gVGhlIGdhbWUgd2FzIGRldmVsb3BlZCBieSBSYWRpY2FsIEVudGVydGFpbm1lbnQsIGFuZCB3YXMgcHVibGlzaGVkIG9uIHRoZSBQbGF5U3RhdGlvbiAyLCBYYm94LCBHYW1lQ3ViZSBhbmQgUEMgYnkgVml2ZW5kaSBVbml2ZXJzYWwgR2FtZXMuIFRoZSBzdG9yeSBhbmQgZGlhbG9ndWUgd2VyZSBjcmFmdGVkIGJ5IHdyaXRlcnMgZnJvbSBUaGUgU2ltcHNvbnMsIHdpdGggYWxsIGNoYXJhY3RlciB2b2ljZXMgc3VwcGxpZWQgYnkgdGhlIGFjdHVhbCBjYXN0LiBUaGUgZ2FtZSBtYXkgaGF2ZSBzb2xkIGFzIG1hbnkgYXMgNyBtaWxsaW9uIGNvcGllcyB3b3JsZCB3aWRlLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuRmFsbG91dCBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU50WHdVa1xuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2gzaDNwcm9kdWN0aW9uc1xuUmVzZWFyY2gvV3JpdGluZyBieSBHaWFjbyBGdXJpbm9cblZpZGVvIGVkaXRlZCBieSBMdWlzIElsbGluZ3dvcnRoIEBIZXlSYWd1aW8iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTEzUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjIwNzI0NDUiLAogICAgICAgICJsaWtlQ291bnQiOiAiNDM2MjEiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNTk1IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjI0MjMiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:29 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=mWmdGcQffrg&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:30 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:30 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=vjwLY_o62Lg&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:30 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIkRzLUZobVdRcWdMd2RZdVhUNldVMXVuZGhZUSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiVUlwbG5QZldqbmgzTHB4cy03Z0J0alVseW1zIiwKICAgICAgImlkIjogInZqd0xZX282MkxnIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMTItMDZUMjA6NTU6NTVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk1hcmlvIEdsaXRjaGVzIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQStTdGFydCAoU29uIG9mIGEgR2xpdGNoKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWtiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5Nb3JlIE1hcmlvIEZhY3RzIOKWtiBodHRwOi8vYml0Lmx5LzFQTDdmR2VcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5Wb3RlIGZvciBaZWxkYTogaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Wb3RlIFBva2Vtb246IGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIGFwcGxpY2F0aW9ucyBvZiBNYXJpbyBHbGl0Y2hlcy4gR2xpdGNoZXMgaW4gTWFyaW8gZ2FtZXMgaGF2ZSBsb25nIGJlZW4gdXNlZCB0byBtYWtlIE5pbnRlbmRvJ3MgZ2FtZXMgZWFzaWVyLCBvciB0byBicmVhayB0aGVtIGZvciBzcGVlZCBydW5uaW5nIHB1cnBvc2VzLiBXZSBwcmVzZW50IGFuZCBleHBsb3JlIHRoZSBiYWNrZ3JvdW5kIG9mIHRoZXNlIGV4cGxvaXRzLCBjcm9zc2luZyBTdXBlciBNYXJpbyBCcm9zLCBhbGwgdGhlIHdheSB0byBTdXBlciBNYXJpbyA2NC5cblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcbkZhbGxvdXQgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFOdFh3VWtcblxuVm9pY2Ugb3ZlciBieSBodHRwOi8veW91dHViZS5jb20vQWFuZFN0YXJ0XG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEdlb2ZmIFRoZXdcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3Zqd0xZX282MkxnL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdmp3TFlfbzYyTGcvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdmp3TFlfbzYyTGcvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3Zqd0xZX282MkxnL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdmp3TFlfbzYyTGcvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgIkdsaXRjaCIsCiAgICAgICAgICAiTWFyaW8gU2VyaWVzIChWaWRlbyBHYW1lIFNlcmllcykiLAogICAgICAgICAgInN1cGVyIG1hcmlvIiwKICAgICAgICAgICJtYXJpbyBtYWtlciIsCiAgICAgICAgICAibWFyaW8gYnJvcyIsCiAgICAgICAgICAic3VwZXIgbWFyaW8gbWFrZXIiLAogICAgICAgICAgInN1cGVyIG1hcmlvIGJyb3MiLAogICAgICAgICAgIm1hcmlvIHdvcmxkIiwKICAgICAgICAgICJtYXJpbyB3aWkiLAogICAgICAgICAgIm1hcmlvIDY0IiwKICAgICAgICAgICJHbGl0Y2ggKFZpZGVvIEdhbWUpIiwKICAgICAgICAgICJzb24gb2YgYSBnbGl0Y2giLAogICAgICAgICAgIlN1cGVyIE1hcmlvIEJyb3MuIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAiU3VwZXIgTWFyaW8gNjQgKFZpZGVvIEdhbWUpIiwKICAgICAgICAgICJTdXBlciBNYXJpbyBXb3JsZCAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgIlN1cGVyIE1hcmlvIEdhbGF4eSAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgIlN1cGVyIE1hcmlvIEJyb3MuIDMgKFZpZGVvIEdhbWUpIiwKICAgICAgICAgICJOaW50ZW5kbyA2NCAoVmlkZW8gR2FtZSBQbGF0Zm9ybSkiLAogICAgICAgICAgIm1hcmlvIiwKICAgICAgICAgICJnbGl0Y2hlcyIsCiAgICAgICAgICAiYStzdGFydCIsCiAgICAgICAgICAiYSBzdGFydCIsCiAgICAgICAgICAiYXN0YXJ0IiwKICAgICAgICAgICJhICsgc3RhcnQiLAogICAgICAgICAgImR5a2ciCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiTWFyaW8gR2xpdGNoZXMgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBBK1N0YXJ0IChTb24gb2YgYSBHbGl0Y2gpIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrYgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuTW9yZSBNYXJpbyBGYWN0cyDilrYgaHR0cDovL2JpdC5seS8xUEw3ZkdlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuVm90ZSBmb3IgWmVsZGE6IGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuVm90ZSBQb2tlbW9uOiBodHRwOi8vYml0Lmx5LzFrb09iQ3BcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBhcHBsaWNhdGlvbnMgb2YgTWFyaW8gR2xpdGNoZXMuIEdsaXRjaGVzIGluIE1hcmlvIGdhbWVzIGhhdmUgbG9uZyBiZWVuIHVzZWQgdG8gbWFrZSBOaW50ZW5kbydzIGdhbWVzIGVhc2llciwgb3IgdG8gYnJlYWsgdGhlbSBmb3Igc3BlZWQgcnVubmluZyBwdXJwb3Nlcy4gV2UgcHJlc2VudCBhbmQgZXhwbG9yZSB0aGUgYmFja2dyb3VuZCBvZiB0aGVzZSBleHBsb2l0cywgY3Jvc3NpbmcgU3VwZXIgTWFyaW8gQnJvcywgYWxsIHRoZSB3YXkgdG8gU3VwZXIgTWFyaW8gNjQuXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb21cblxu4pa2IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5GYWxsb3V0IEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTnRYd1VrXG5cblZvaWNlIG92ZXIgYnkgaHR0cDovL3lvdXR1YmUuY29tL0FhbmRTdGFydFxuUmVzZWFyY2gvV3JpdGluZyBieSBHZW9mZiBUaGV3XG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGgiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTUwUyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjI0ODIxNjUiLAogICAgICAgICJsaWtlQ291bnQiOiAiMzYyNDkiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNDgzIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjI3MjQiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:30 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=mH5uSAffo8M&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:30 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIkZwcDVRcmdiYUlTZnlSWFpFUTMzR3ZYd29WWSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiSk9nR2hKTkhvY1NVNF9jZHprTDNkWTR5UGhRIiwKICAgICAgImlkIjogIm1INXVTQWZmbzhNIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMTEtMjhUMTk6NTY6MDhaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlNvdXRoIFBhcmsgVGhlIFN0aWNrIG9mIFRydXRoIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQ2FkZGljYXJ1cyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5Nb3JlIFNvdXRoIFBhcmsg4pa6IGh0dHA6Ly9iaXQubHkvMWxCT211blxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb21cblxu4pa6IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5cblZvaWNlIG92ZXIgYnkgaHR0cDovL3lvdXR1YmUuY29tL2NhZGRpY2FydXNcblJlc2VhcmNoL1dyaXRpbmcgYnkgQWxleCBHaWx5YWRvdlxuVmlkZW8gRWRpdGluZyBieSBMdWlzIElsbGluZ3dvcnRoIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbUg1dVNBZmZvOE0vZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tSDV1U0FmZm84TS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tSDV1U0FmZm84TS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbUg1dVNBZmZvOE0vc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tSDV1U0FmZm84TS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiU291dGggUGFyayAoVFYgUHJvZ3JhbSkiLAogICAgICAgICAgIlNvdXRoIFBhcms6IFRoZSBTdGljayBPZiBUcnV0aCAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgInNvdXRoIHBhcmsgZmFjdHMiLAogICAgICAgICAgIlJvbGUtcGxheWluZyBWaWRlbyBHYW1lIChNZWRpYSBHZW5yZSkiLAogICAgICAgICAgInNvdXRoIHBhcmsiLAogICAgICAgICAgIlNvdXRoIFBhcms6IEJpZ2dlciBMb25nZXIgJiBVbmN1dCAoQXdhcmQtV2lubmluZyBXb3JrKSIsCiAgICAgICAgICAic291dGhwYXJrIiwKICAgICAgICAgICJzb3V0aCBwYXJrIGZ1bGwiLAogICAgICAgICAgInNvdXRoIHBhcmsgZXBpc29kZXMiLAogICAgICAgICAgInNvdXRoIHBhcmsgZnVsbCBlcGlzb2RlcyIsCiAgICAgICAgICAic291dGggcGFyayBzZWFzb24iLAogICAgICAgICAgInNvdXRoIHBhcmsgZ2FtZSIsCiAgICAgICAgICAic291dGggcGFyayBwZXdkaWVwaWUiLAogICAgICAgICAgInNvdXRoIHBhcmsgZ2FtZXMiLAogICAgICAgICAgImNhZGRpY2FydXMiLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAic291dGggcGFyayBzb25nIiwKICAgICAgICAgICJkaWQiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiU291dGggUGFyayBUaGUgU3RpY2sgb2YgVHJ1dGggLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBDYWRkaWNhcnVzIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuTW9yZSBTb3V0aCBQYXJrIOKWuiBodHRwOi8vYml0Lmx5LzFsQk9tdW5cbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWuiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9jYWRkaWNhcnVzXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IEFsZXggR2lseWFkb3ZcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDdNOFMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIxMzUxMDY3IiwKICAgICAgICAibGlrZUNvdW50IjogIjI1NDI2IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjMwMyIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIxMTUwIgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:30 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=bse4WhCIuDE&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:30 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIkRtZ3A1dkpFdzMxLTMwX3BwMDF2MVV1VGtjayIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiWm9qN0ZpTmdKWmwxWjZrWlgyZ3ZHSEJaU09jIiwKICAgICAgImlkIjogImJzZTRXaENJdURFIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMTEtMTlUMjI6MDU6MTlaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk5ldyBTdXBlciBNYXJpbyBCcm9zIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQmV0YTY0IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa2IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk1vcmUgTWFyaW8gRmFjdHMg4pa2IGh0dHA6Ly9iaXQubHkvMVF1WkdGY1xu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiBOZXcgU3VwZXIgTWFyaW8gQnJvcy4gTmV3IFN1cGVyIE1hcmlvIEJyb3MgaXMgYSBwbGF0Zm9ybSBnYW1lIG1hZGUgYnkgTmludGVuZG8gZm9yIHRoZSBOaW50ZW5kbyBEUy4gSXQgd2FzIHRoZSBmaXJzdCBvcmlnaW5hbCBzaWRlLXNjcm9sbGluZyBwbGF0Zm9ybSBnYW1lIHN0YXJyaW5nIE1hcmlvIHNpbmNlIFN1cGVyIE1hcmlvIExhbmQgMjogNiBHb2xkZW4gQ29pbnMgaW4gMTk5MiwgYW5kIHRoZSBmaXJzdCBnYW1lIHRvIGJlIGEgcGFydCBvZiB0aGUgbWFpbiBTdXBlciBNYXJpbyBzZXJpZXMgb2YgdmlkZW8gZ2FtZXMgc2luY2UgU3VwZXIgTWFyaW8gU3Vuc2hpbmUgaW4gMjAwMi4gVGhlIGdhbWUgYnJva2UgdGhlIHJlY29yZCBpbiBKYXBhbiBmb3IgdGhlIGJlc3Qtc2VsbGluZyBkZWJ1dCBvZiBhIE5pbnRlbmRvIERTIGdhbWUuIFRoZSBnYW1lIHNvbGQgb3ZlciAzMCBtaWxsaW9uIGNvcGllcyB3b3JsZHdpZGUsIGFuZCBpcyB0aGUgYmVzdC1zZWxsaW5nIGdhbWUgZm9yIHRoZSBEUywgYW5kIG9uZSBvZiB0aGUgYmVzdC1zZWxsaW5nIHZpZGVvIGdhbWVzIG9mIGFsbCB0aW1lLiBJdCB3YXMgZm9sbG93ZWQgdXAgYnkgTmV3IFN1cGVyIE1hcmlvIEJyb3MuIFdpaSwgYW5kIGxhdGVyIE5ldyBTdXBlciBNYXJpbyBCcm9zLiAyIGZvciB0aGUgTmludGVuZG8gM0RTLCBhbmQgTmV3IFN1cGVyIE1hcmlvIEJyb3MuIFUgZm9yIHRoZSBXaWkgVS5cblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuVm9pY2Ugb3ZlciBieSBodHRwOi8veW91dHViZS5jb20vYmV0YTY0Y2hhbm5lbFxuUmVzZWFyY2gvV3JpdGluZyBieSBTZXVtaWRoIE1hY0RvbmFsZFxuaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9oZXlzaGF5bWF5XG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGhcblVudXNlZCBFbmVteSBGb290YWdlIGZyb206XG5odHRwOi8vd3d3LnlvdXR1YmUuY29tL21hcmlvbWFkcHJvZHVjdGlvbnMiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ic2U0V2hDSXVERS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JzZTRXaENJdURFL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JzZTRXaENJdURFL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ic2U0V2hDSXVERS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JzZTRXaENJdURFL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiR2FtaW5nIiwKICAgICAgICAgICJkaWR5b3Vrbm93Z2FtaW5nIiwKICAgICAgICAgICJzdXBlciBtYXJpbyIsCiAgICAgICAgICAibWFyaW8iLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiYmV0YTY0IiwKICAgICAgICAgICJOaW50ZW5kbyIsCiAgICAgICAgICAiU3VwZXIgTWFyaW8gTWFrZXIiLAogICAgICAgICAgIk1hcmlvIG1ha2VyIiwKICAgICAgICAgICJNYXJpbyBTZXJpZXMgKFZpZGVvIEdhbWUgU2VyaWVzKSIsCiAgICAgICAgICAiTmV3IFN1cGVyIE1hcmlvIEJyb3MuIFdpaSAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgIk5ldyBTdXBlciBNYXJpbyBCcm9zIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAiTmV3IFN1cGVyIE1hcmlvIEJyb3MuIFUgKEF3YXJkLVdpbm5pbmcgV29yaykiLAogICAgICAgICAgIk5ldyBTdXBlciBNYXJpbyBCcm9zLiAyIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAiTmludGVuZG8gRFMgKFZpZGVvIEdhbWUgUGxhdGZvcm0pIiwKICAgICAgICAgICJXaWkgKFZpZGVvIEdhbWUgUGxhdGZvcm0pIiwKICAgICAgICAgICJTdXBlciBNYXJpbyA2NCAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgIlN1cGVyIE1hcmlvIFdvcmxkIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAiU3VwZXIgTWFyaW8gQnJvcy4gMyAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgIlN1cGVyIE1hcmlvIEJyb3MuIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAibmV3IgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIk5ldyBTdXBlciBNYXJpbyBCcm9zIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQmV0YTY0IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrYgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuTW9yZSBNYXJpbyBGYWN0cyDilrYgaHR0cDovL2JpdC5seS8xUXVaR0ZjXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIE5ldyBTdXBlciBNYXJpbyBCcm9zLiBOZXcgU3VwZXIgTWFyaW8gQnJvcyBpcyBhIHBsYXRmb3JtIGdhbWUgbWFkZSBieSBOaW50ZW5kbyBmb3IgdGhlIE5pbnRlbmRvIERTLiBJdCB3YXMgdGhlIGZpcnN0IG9yaWdpbmFsIHNpZGUtc2Nyb2xsaW5nIHBsYXRmb3JtIGdhbWUgc3RhcnJpbmcgTWFyaW8gc2luY2UgU3VwZXIgTWFyaW8gTGFuZCAyOiA2IEdvbGRlbiBDb2lucyBpbiAxOTkyLCBhbmQgdGhlIGZpcnN0IGdhbWUgdG8gYmUgYSBwYXJ0IG9mIHRoZSBtYWluIFN1cGVyIE1hcmlvIHNlcmllcyBvZiB2aWRlbyBnYW1lcyBzaW5jZSBTdXBlciBNYXJpbyBTdW5zaGluZSBpbiAyMDAyLiBUaGUgZ2FtZSBicm9rZSB0aGUgcmVjb3JkIGluIEphcGFuIGZvciB0aGUgYmVzdC1zZWxsaW5nIGRlYnV0IG9mIGEgTmludGVuZG8gRFMgZ2FtZS4gVGhlIGdhbWUgc29sZCBvdmVyIDMwIG1pbGxpb24gY29waWVzIHdvcmxkd2lkZSwgYW5kIGlzIHRoZSBiZXN0LXNlbGxpbmcgZ2FtZSBmb3IgdGhlIERTLCBhbmQgb25lIG9mIHRoZSBiZXN0LXNlbGxpbmcgdmlkZW8gZ2FtZXMgb2YgYWxsIHRpbWUuIEl0IHdhcyBmb2xsb3dlZCB1cCBieSBOZXcgU3VwZXIgTWFyaW8gQnJvcy4gV2lpLCBhbmQgbGF0ZXIgTmV3IFN1cGVyIE1hcmlvIEJyb3MuIDIgZm9yIHRoZSBOaW50ZW5kbyAzRFMsIGFuZCBOZXcgU3VwZXIgTWFyaW8gQnJvcy4gVSBmb3IgdGhlIFdpaSBVLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9iZXRhNjRjaGFubmVsXG5SZXNlYXJjaC9Xcml0aW5nIGJ5IFNldW1pZGggTWFjRG9uYWxkXG5odHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL2hleXNoYXltYXlcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aFxuVW51c2VkIEVuZW15IEZvb3RhZ2UgZnJvbTpcbmh0dHA6Ly93d3cueW91dHViZS5jb20vbWFyaW9tYWRwcm9kdWN0aW9ucyIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDdNNFMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIxNDU0NDIzIiwKICAgICAgICAibGlrZUNvdW50IjogIjI2MjI5IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjMwNiIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIxNjcxIgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:30 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=pGNm0D-eBTs&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:31 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIk1QTGI5cHdHaURxVmlZN19lU25Ob3lwTDhMMCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAieE84ZzJXZ2dqWFlQZ0V4VVk1eFM3X29tNFRVIiwKICAgICAgImlkIjogInBHTm0wRC1lQlRzIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMTEtMTRUMjA6NTg6MDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlN1cGVyIE1hcmlvIE1ha2VyIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gUm9zcyBPJ0Rvbm92YW4gKEdhbWUgR3J1bXBzKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWtiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5NYXJpbyBFYXN0ZXIgRWdncyAg4pa2IGh0dHA6Ly9iaXQubHkvMU1LbFhJalxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCBzb21lIGZhY3RzLCBzZWNyZXRzLCBhbmQgaGlzdG9yeSBvZiBTdXBlciBNYXJpbyBNYWtlci4gU3VwZXIgTWFyaW8gTWFrZXIgaXMgYSBwbGF0Zm9ybSBnYW1lIGFuZCBsZXZlbCBjcmVhdGlvbiB0b29sIGRldmVsb3BlZCBhbmQgcHVibGlzaGVkIGJ5IE5pbnRlbmRvIGZvciB0aGUgV2lpIFUuIFBsYXllcnMgY2FuIG1ha2UgdGhlaXIgb3duIGxldmVscyBiYXNlZCBvbiBTdXBlciBNYXJpbyBCcm9zLiwgU3VwZXIgTWFyaW8gQnJvcy4gMywgU3VwZXIgTWFyaW8gV29ybGQsIGFuZCBOZXcgU3VwZXIgTWFyaW8gQnJvcy4gVS5cblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuVm9pY2Ugb3ZlciBieSBodHRwOi8veW91dHViZS5jb20vUnViYmVyTmluamFcbkNvbW1hbmRlciBIb2xseTogaHR0cDovL2JpdC5seS8xTU5PZTB2XG5WaWRlbyBFZGl0aW5nIGJ5IElubmFnYWRhZGF2aWRhXG5Xcml0aW5nL1Jlc2VhcmNoIGJ5IEphbWVzIEFsY2Fyb3NzZSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3BHTm0wRC1lQlRzL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcEdObTBELWVCVHMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcEdObTBELWVCVHMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3BHTm0wRC1lQlRzL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcEdObTBELWVCVHMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiU3VwZXIgTWFyaW8gTWFrZXIiLAogICAgICAgICAgIm1hcmlvIG1ha2VyIiwKICAgICAgICAgICJzdXBlciBtYXJpbyBicm9zIiwKICAgICAgICAgICJtYXJpbyBtYWtlciBwYyIsCiAgICAgICAgICAibWFyaW8gbWFrZXIgYW1paWJvIiwKICAgICAgICAgICJhbWlpYm8iLAogICAgICAgICAgInN1cGVyIG1hcmlvIGdhbWVzIiwKICAgICAgICAgICJzdXBlciBtYXJpbyB3b3JsZCIsCiAgICAgICAgICAibWFyaW8gbWFrZXIgbGV2ZWwiLAogICAgICAgICAgIm1hcmlvIG1ha2VyIGxldmVscyIsCiAgICAgICAgICAibWFyaW8gbWFrZXIgZ2FtZSBncnVtcHMiLAogICAgICAgICAgIm1hcmlvIG1ha2VyIHJvc3MiLAogICAgICAgICAgImhhcmRlc3QgbWFyaW8gbWFrZXIiLAogICAgICAgICAgIndpaSB1IiwKICAgICAgICAgICJNYXJpbyBTZXJpZXMgKFZpZGVvIEdhbWUgU2VyaWVzKSIsCiAgICAgICAgICAic3VwZXIgbWFyaW8iLAogICAgICAgICAgIlN1cGVyIE1hcmlvIEJyb3MuIDMgKFZpZGVvIEdhbWUpIiwKICAgICAgICAgICJTdXBlciBNYXJpbyBXb3JsZCAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgIk5ldyBTdXBlciBNYXJpbyBCcm9zIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAiTmludGVuZG8iLAogICAgICAgICAgIk1hcmlvIiwKICAgICAgICAgICJHYW1lIEdydW1wcyAoVFYgUHJvZ3JhbSkiLAogICAgICAgICAgIlJvc3MgTydEb25vdmFuIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlN1cGVyIE1hcmlvIE1ha2VyIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gUm9zcyBPJ0Rvbm92YW4gKEdhbWUgR3J1bXBzKSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa2IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbk1hcmlvIEVhc3RlciBFZ2dzICDilrYgaHR0cDovL2JpdC5seS8xTUtsWElqXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCBoaXN0b3J5IG9mIFN1cGVyIE1hcmlvIE1ha2VyLiBTdXBlciBNYXJpbyBNYWtlciBpcyBhIHBsYXRmb3JtIGdhbWUgYW5kIGxldmVsIGNyZWF0aW9uIHRvb2wgZGV2ZWxvcGVkIGFuZCBwdWJsaXNoZWQgYnkgTmludGVuZG8gZm9yIHRoZSBXaWkgVS4gUGxheWVycyBjYW4gbWFrZSB0aGVpciBvd24gbGV2ZWxzIGJhc2VkIG9uIFN1cGVyIE1hcmlvIEJyb3MuLCBTdXBlciBNYXJpbyBCcm9zLiAzLCBTdXBlciBNYXJpbyBXb3JsZCwgYW5kIE5ldyBTdXBlciBNYXJpbyBCcm9zLiBVLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9SdWJiZXJOaW5qYVxuQ29tbWFuZGVyIEhvbGx5OiBodHRwOi8vYml0Lmx5LzFNTk9lMHZcblZpZGVvIEVkaXRpbmcgYnkgSW5uYWdhZGFkYXZpZGFcbldyaXRpbmcvUmVzZWFyY2ggYnkgSmFtZXMgQWxjYXJvc3NlIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUNk04UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjIzOTY4NzQiLAogICAgICAgICJsaWtlQ291bnQiOiAiMjk4OTIiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNDg5IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjI3OTgiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:31 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=Wq_tg4wYaa4&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:31 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:31 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=7uMLsULdZdo&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:31 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInpCNXVBWldkX1ptSFVzQkVlM0hzOGhvMmdudyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiXzQtRWUwWEpzWWRfbE9mWFZlRm42YTFndmhjIiwKICAgICAgImlkIjogIjd1TUxzVUxkWmRvIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMTEtMDNUMTk6NTc6NDFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlBva2Vtb24gU25hcCAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFRoZSBEZXgiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrYgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cblZvdGUgUG9rZW1vbiAmIFJlYWwgTGlmZTogaHR0cDovL2JpdC5seS9EWUtHVm90ZTFcblZvdGUgUG9rZW1vbiAmIE15dGhvbG9neTogaHR0cDovL2JpdC5seS9EWUtHVm90ZTJcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHNvbWUgZmFjdHMsIHNlY3JldHMsIGFuZCB0aGUgaGlzdG9yeSBvZiBQb2tlbW9uIFNuYXAuIFBva2Vtb24gU25hcCB3YXMgb3JpZ2luYWxseSByZXZlYWxlZCBhcyBhIE5pbnRlbmRvIDY0IEREIGdhbWUsIGFuZCB3YXMgZGV2ZWxvcGVkIGJ5IEhBTCBMYWJvcmF0b3J5IGFuZCBQYXggU29mdG5pY2EuIFNuYXAgaXMgYSBzcGluLW9mZiBnYW1lIGluIHRoZSBQb2tlbW9uIHNlcmllcywgYmVpbmcgb25lIG9mIHRoZSBmaXJzdCBjb25zb2xlLWJhc2VkIGdhbWVzIGluIHRoZSBzZXJpZXMuIFRoZSBnYW1lIHdhcyByZS1yZWxlYXNlZCBmb3IgdGhlIFdpaSdzIFZpcnR1YWwgQ29uc29sZS4gRGVzcGl0ZSB0aGUgZ2FtZSdzIHBvc2l0aXZlIHJlY2VwdGlvbiBhbmQgY3VsdCBmb2xsb3dpbmcsIHRoZXJlIGFyZSBjdXJyZW50bHkgbm8gcGxhbnMgdG8gbWFrZSBhIHNlcXVlbC5cblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuVm9pY2Ugb3ZlciBieSBodHRwOi8veW91dHViZS5jb20vVGhlTmF0aW9uYWxEZXhcblZpZGVvIEVkaXRpbmcgYnkgSW5uYWdhZGFkYXZpZGFcblJlc2VhcmNoL1dyaXRpbmcgYnkgS2VsbGVuIE1jSW50eXJlIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvN3VNTHNVTGRaZG8vZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS83dU1Mc1VMZFpkby9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS83dU1Mc1VMZFpkby9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvN3VNTHNVTGRaZG8vc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS83dU1Mc1VMZFpkby9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vdyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiUG9rZW1vbiBTbmFwIiwKICAgICAgICAgICJQb2vDqW1vbiBTbmFwIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAiUG9rw6ltb24gKEJyYW5kKSIsCiAgICAgICAgICAicG9rZW1vbiIsCiAgICAgICAgICAicG9rZW1vbiB0aGVtZSIsCiAgICAgICAgICAicG9rZW1vbiB4IiwKICAgICAgICAgICJwb2tlbW9uIHkiLAogICAgICAgICAgInBva2Vtb24geCB5IiwKICAgICAgICAgICJwb2tlbW9uIHNvbmciLAogICAgICAgICAgInBva2Vtb24gYmF0dGxlIiwKICAgICAgICAgICJwb2tlbW9uIG1vdmllIiwKICAgICAgICAgICJwb2tlbW9uIHJ1YnkiLAogICAgICAgICAgInBva2Vtb24gc2FwcGhpcmUiLAogICAgICAgICAgInBva2Vtb24gZ2FtZSIsCiAgICAgICAgICAicG9rZW1vbiBvbWVnYSBydWJ5IiwKICAgICAgICAgICJwb2tlbW9uIGFscGhhIHNhcHBoaXJlIiwKICAgICAgICAgICJwb2tlbW9uIHJlZCIsCiAgICAgICAgICAiUm9sZS1wbGF5aW5nIFZpZGVvIEdhbWUgKE1lZGlhIEdlbnJlKSIsCiAgICAgICAgICAiUG9rw6ltb24gKFRWIFByb2dyYW0pIiwKICAgICAgICAgICJQb2vDqW1vbiAoVmlkZW8gR2FtZSBTZXJpZXMpIiwKICAgICAgICAgICJOaW50ZW5kbyA2NCAoVmlkZW8gR2FtZSBQbGF0Zm9ybSkiLAogICAgICAgICAgInBva2Vtb24geiIsCiAgICAgICAgICAicG9rZW1vbiBnbyIsCiAgICAgICAgICAiV2lpIFUgKFZpZGVvIEdhbWUgUGxhdGZvcm0pIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlBva2Vtb24gU25hcCAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFRoZSBEZXgiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWtiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuVm90ZSBQb2tlbW9uICYgUmVhbCBMaWZlOiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMVxuVm90ZSBQb2tlbW9uICYgTXl0aG9sb2d5OiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMlxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgdGFrZSBhIGxvb2sgYXQgc29tZSBmYWN0cywgc2VjcmV0cywgYW5kIHRoZSBoaXN0b3J5IG9mIFBva2Vtb24gU25hcC4gUG9rZW1vbiBTbmFwIHdhcyBvcmlnaW5hbGx5IHJldmVhbGVkIGFzIGEgTmludGVuZG8gNjQgREQgZ2FtZSwgYW5kIHdhcyBkZXZlbG9wZWQgYnkgSEFMIExhYm9yYXRvcnkgYW5kIFBheCBTb2Z0bmljYS4gU25hcCBpcyBhIHNwaW4tb2ZmIGdhbWUgaW4gdGhlIFBva2Vtb24gc2VyaWVzLCBiZWluZyBvbmUgb2YgdGhlIGZpcnN0IGNvbnNvbGUtYmFzZWQgZ2FtZXMgaW4gdGhlIHNlcmllcy4gVGhlIGdhbWUgd2FzIHJlLXJlbGVhc2VkIGZvciB0aGUgV2lpJ3MgVmlydHVhbCBDb25zb2xlLiBEZXNwaXRlIHRoZSBnYW1lJ3MgcG9zaXRpdmUgcmVjZXB0aW9uIGFuZCBjdWx0IGZvbGxvd2luZywgdGhlcmUgYXJlIGN1cnJlbnRseSBubyBwbGFucyB0byBtYWtlIGEgc2VxdWVsLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9UaGVOYXRpb25hbERleFxuVmlkZW8gRWRpdGluZyBieSBJbm5hZ2FkYWRhdmlkYVxuUmVzZWFyY2gvV3JpdGluZyBieSBLZWxsZW4gTWNJbnR5cmUiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTM2UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjExOTE4ODAiLAogICAgICAgICJsaWtlQ291bnQiOiAiMTkxNTMiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiMjYxIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjE4MDIiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:31 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=o4hAPbRGt78&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:32 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImdVZ3M4VVdfV2ZfTE1pZzdhZF9wVEJKWmd2cyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiZlBZMUV3eTV6V1pybTFUYWxkNFdpbXNvUHA0IiwKICAgICAgImlkIjogIm80aEFQYlJHdDc4IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMDgtMDFUMjA6MTY6NDRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlplbGRhIE1ham9yYSdzIE1hc2sgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBZdW5ndG93biIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWtiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuVm90ZSBUaGUgV2luZCBXYWtlcjogaHR0cDovL2JpdC5seS9EWUtHVm90ZTFcblZvdGUgVHdpbGlnaHQgUHJpbmNlc3M6IGh0dHA6Ly9iaXQubHkvRFlLR1ZvdGUyXG5cbkluIHRoaXMgZXBpc29kZSB3ZSB0YWtlIGEgbG9vayBhdCB0aGUgc2VjcmV0cyBhbmQgaGlzdG9yeSBvZiBUaGUgTGVnZW5kIG9mIFplbGRhOiBNYWpvcmEncyBNYXNrLiBNYWpvcmEncyBNYXNrIGZpcnN0IGFwcGVhcmVkIGluIHRoZSBtZWRpYSBpbiBNYXkgMTk5OSwgd2hlbiBKYXBhbmVzZSBnYW1pbmcgbWFnYXppbmUgRmFtaXRzdSBzdGF0ZWQgdGhhdCBhIGxvbmctcGxhbm5lZCBaZWxkYSBleHBhbnNpb24gZm9yIHRoZSA2NEREIHdhcyB1bmRlcndheS4gVGhpcyBwcm9qZWN0IHdhcyB0ZW50YXRpdmVseSB0aXRsZWQgXCJVcmEgWmVsZGFcIiwgYW5kIHdvdWxkIHRha2UgT2NhcmluYSBvZiBUaW1lIGFuZCBhbHRlciB0aGUgbGV2ZWxzIHRvIGJlIG1vcmUgY2hhbGxlbmdpbmcuIE1ham9yYSdzIE1hc2sgZW1lcmdlZCBmcm9tIHRoaXMgcHJvamVjdCwgYW5kIHdhcyB1bHRpbWF0ZWx5IHJlbGVhc2VkIGFzIGEgc3RhbmQtYWxvbmUgTmludGVuZG8gNjQgdGl0bGUgaW4gdGhlIHllYXIgMjAwMC5cblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuVm9pY2Ugb3ZlciBieSBodHRwOi8veW91dHViZS5jb20veXVuZ3Rvd25cbkh1Z2UgdGhhbmsgeW91IHRvIEtld2wwMjEwIGZvciB0cmFuc2xhdGluZyBKYXBhbmVzZSB0ZXh0IGZvciB0aGlzIGVwaXNvZGUuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbzRoQVBiUkd0NzgvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9vNGhBUGJSR3Q3OC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9vNGhBUGJSR3Q3OC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbzRoQVBiUkd0Nzgvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiWmVsZGEiLAogICAgICAgICAgIlplbGRhIEZhY3RzIiwKICAgICAgICAgICJaZWxkYSBNYWpvcmEncyBNYXNrIiwKICAgICAgICAgICJNYWpvcmEncyBNYXNrIiwKICAgICAgICAgICJMZWdlbmQgb2YgWmVsZGEiLAogICAgICAgICAgIlplbGRhIExpbmsiLAogICAgICAgICAgIlplbGRhIE9jYXJpbmEiLAogICAgICAgICAgIlplbGRhIGUzIiwKICAgICAgICAgICJaZWxkYSBXaWkgVSIsCiAgICAgICAgICAiWmVsZGEgVSIsCiAgICAgICAgICAiWmVsZGEgV2lpIiwKICAgICAgICAgICJaZWxkYSBUaGVtZSIsCiAgICAgICAgICAiWmVsZGEgU29uZyIsCiAgICAgICAgICAiWmVsZGEgTXVzaWMiLAogICAgICAgICAgIlplbGRhIFJlbWl4IiwKICAgICAgICAgICJaZWxkYSBUcmlmb3JjZSIsCiAgICAgICAgICAiTWFqb3JhJ3MgTWFzayAzRCIsCiAgICAgICAgICAiVGhlIExlZ2VuZCBPZiBaZWxkYTogTWFqb3JhJ3MgTWFzayAoVmlkZW8gR2FtZSkiLAogICAgICAgICAgIlRoZSBMZWdlbmQgT2YgWmVsZGEgU2VyaWVzIChWaWRlbyBHYW1lIFNlcmllcykiLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmcgemVsZGEiLAogICAgICAgICAgImRpZCB5b3Uga25vdyIsCiAgICAgICAgICAieXVuZ3Rvd24iLAogICAgICAgICAgImdhbWluZyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAiZG8geW91IGtub3cgZ2FtaW5nIiwKICAgICAgICAgICJ6ZWxkYSBkaWQgeW91IGtub3cgZ2FtaW5nIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlplbGRhIE1ham9yYSdzIE1hc2sgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBZdW5ndG93biIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa2IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5Wb3RlIFRoZSBXaW5kIFdha2VyOiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMVxuVm90ZSBUd2lsaWdodCBQcmluY2VzczogaHR0cDovL2JpdC5seS9EWUtHVm90ZTJcblxuSW4gdGhpcyBlcGlzb2RlIHdlIHRha2UgYSBsb29rIGF0IHRoZSBzZWNyZXRzIGFuZCBoaXN0b3J5IG9mIFRoZSBMZWdlbmQgb2YgWmVsZGE6IE1ham9yYSdzIE1hc2suIE1ham9yYSdzIE1hc2sgZmlyc3QgYXBwZWFyZWQgaW4gdGhlIG1lZGlhIGluIE1heSAxOTk5LCB3aGVuIEphcGFuZXNlIGdhbWluZyBtYWdhemluZSBGYW1pdHN1IHN0YXRlZCB0aGF0IGEgbG9uZy1wbGFubmVkIFplbGRhIGV4cGFuc2lvbiBmb3IgdGhlIDY0REQgd2FzIHVuZGVyd2F5LiBUaGlzIHByb2plY3Qgd2FzIHRlbnRhdGl2ZWx5IHRpdGxlZCBcIlVyYSBaZWxkYVwiLCBhbmQgd291bGQgdGFrZSBPY2FyaW5hIG9mIFRpbWUgYW5kIGFsdGVyIHRoZSBsZXZlbHMgdG8gYmUgbW9yZSBjaGFsbGVuZ2luZy4gTWFqb3JhJ3MgTWFzayBlbWVyZ2VkIGZyb20gdGhpcyBwcm9qZWN0LCBhbmQgd2FzIHVsdGltYXRlbHkgcmVsZWFzZWQgYXMgYSBzdGFuZC1hbG9uZSBOaW50ZW5kbyA2NCB0aXRsZSBpbiB0aGUgeWVhciAyMDAwLlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS95dW5ndG93blxuSHVnZSB0aGFuayB5b3UgdG8gS2V3bDAyMTAgZm9yIHRyYW5zbGF0aW5nIEphcGFuZXNlIHRleHQgZm9yIHRoaXMgZXBpc29kZS4iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTQ0UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogInRydWUiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMjMxMjcxMyIsCiAgICAgICAgImxpa2VDb3VudCI6ICI0MDIzNiIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI0MDEiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiNjQxNSIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:32 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=Ra96aghYBB8&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:32 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInZJeVlPdVZISi1vbzBidm9OaVJoZVhITjhvMCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAicHVjUTZtNTFabFBjNHdSM3RBTUFlNGFsVUpJIiwKICAgICAgImlkIjogIlJhOTZhZ2hZQkI4IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMDUtMzBUMTk6NTA6NDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlNvbmljIEFkdmVudHVyZSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIEppbW15V2hldHplbCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWtiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuVm90ZSBEaXNuZXk6IGh0dHA6Ly9iaXQubHkvRFlLR1ZvdGUxXG5Wb3RlIFNtYXNoOiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9KaW1teVdoZXR6ZWwiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9SYTk2YWdoWUJCOC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1JhOTZhZ2hZQkI4L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1JhOTZhZ2hZQkI4L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9SYTk2YWdoWUJCOC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1JhOTZhZ2hZQkI4L21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiU29uaWMiLAogICAgICAgICAgIlNvbmljIEZhY3RzIiwKICAgICAgICAgICJTb25pYyBHYW1lcyIsCiAgICAgICAgICAiU29uaWMgVGhlIEhlZGdlaG9nIiwKICAgICAgICAgICJTb25pYyBIZWRnZWhvZyIsCiAgICAgICAgICAiU29uaWMgQWR2ZW50dXJlIiwKICAgICAgICAgICJTb25pYyBBZHZlbnR1cmUgMiIsCiAgICAgICAgICAiU29uaWMgMiIsCiAgICAgICAgICAiU29uaWMgMyIsCiAgICAgICAgICAiU29uaWMgS251Y2tsZXMiLAogICAgICAgICAgIlN1cGVyIFNvbmljIiwKICAgICAgICAgICJTb25pYyBHZW5lcmF0aW9ucyIsCiAgICAgICAgICAiU29uaWMgQm9vbSIsCiAgICAgICAgICAiU29uaWMgTWFyaW8iLAogICAgICAgICAgIlNvbmljIFgiLAogICAgICAgICAgIlNvbmljIDA2IiwKICAgICAgICAgICJTb25pYyBHYW1lIEdydW1wcyIsCiAgICAgICAgICAiU29uaWMgdnMgU29uaWMiLAogICAgICAgICAgIlNvbmljIFRoZW1lIiwKICAgICAgICAgICJTb25pYyBNdXNpYyIsCiAgICAgICAgICAiU29uaWMgTW92aWUiLAogICAgICAgICAgIlNvbmljIFVubGVhc2hlZCIsCiAgICAgICAgICAiU29uaWMgTG9zdCBXb3JsZCIsCiAgICAgICAgICAiU2VnYSIsCiAgICAgICAgICAiU2hhZG93IFRoZSBIZWRnZWhvZyIsCiAgICAgICAgICAiRGlkIFlvdSBLbm93IEdhbWluZz8gKEJsb2cpIiwKICAgICAgICAgICJTb25pYyBUaGUgSGVkZ2Vob2cgKEZpbG0gQ2hhcmFjdGVyKSIsCiAgICAgICAgICAiSmltbXkgV2hldHplbCIsCiAgICAgICAgICAiZHlrZyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJTb25pYyBBZHZlbnR1cmUgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBKaW1teVdoZXR6ZWwiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhIOKWtiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuVm90ZSBEaXNuZXk6IGh0dHA6Ly9iaXQubHkvRFlLR1ZvdGUxXG5Wb3RlIFNtYXNoOiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9KaW1teVdoZXR6ZWwiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTM1UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE5NTIwMzUiLAogICAgICAgICJsaWtlQ291bnQiOiAiMjY1NDQiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiMzM0IiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjQxMzkiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:32 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=4VUu5NTKFIU&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:32 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImFMenF0U19RbVRQbkxVQ3BiWEJhbV9tWXduMCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiQ0xTaVZiMjNtLThYU2pBT3JFQkhJME9uN1NnIiwKICAgICAgImlkIjogIjRWVXU1TlRLRklVIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMDUtMDlUMTk6MDA6MDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk5pbnRlbmRvIFdpaSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFJhdGVkIFMgR2FtZXMiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSDilrYgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbldlIHRha2UgYSBsb29rIGF0IGZhY3RzIGZvciB0aGUgTmludGVuZG8gV2lpIVxuXG5Wb3RlIE1hcmlvOiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMVxuVm90ZSBaZWxkYTogaHR0cDovL2JpdC5seS9EWUtHVm90ZTJcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuVm9pY2Ugb3ZlciBieSBodHRwOi8veW91dHViZS5jb20vcmF0ZWRzZ2FtZXMiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80VlV1NU5US0ZJVS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzRWVXU1TlRLRklVL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzRWVXU1TlRLRklVL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80VlV1NU5US0ZJVS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzRWVXU1TlRLRklVL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAic2VjcmV0cyIsCiAgICAgICAgICAid2lpIiwKICAgICAgICAgICJ3aWkgdSIsCiAgICAgICAgICAic21hc2ggd2lpIHUiLAogICAgICAgICAgInNtYXNoIGJyb3MiLAogICAgICAgICAgIm1hcmlvIiwKICAgICAgICAgICJtYXJpbyB3aWkiLAogICAgICAgICAgInN1cGVyIHNtYXNoIGJyb3MiLAogICAgICAgICAgInNzYjQgd2lpIHUiLAogICAgICAgICAgInNzYjQiLAogICAgICAgICAgInN1cGVyIG1hcmlvIHdpaSIsCiAgICAgICAgICAiemVsZGEiLAogICAgICAgICAgIndpaSBnYW1lcyIsCiAgICAgICAgICAid2lpIHUgZ2FtZXMiLAogICAgICAgICAgIm5pbnRlbmRvIHdpaSIsCiAgICAgICAgICAiU29uaWMgaW4gTmV3IFN1cGVyIE1hcmlvIEJyb3MgV2lpIC0gTW9kIE1vbmRheXMiLAogICAgICAgICAgIlNtYXNoIEhpc3Rvcnk6IE1ld3R3byBETEMiLAogICAgICAgICAgIm5pbnRlbmRvIiwKICAgICAgICAgICJnYW1lIHRoZW9yeSIsCiAgICAgICAgICAid2lpIHNwb3J0cyIsCiAgICAgICAgICAibWFyaW8ga2FydCB3aWkiLAogICAgICAgICAgIk5ldyBTdXBlciBNYXJpbyBCcm9zLiBXaWkiLAogICAgICAgICAgInBva2Vtb24iLAogICAgICAgICAgIkRpZCBZb3UgS25vdyBHYW1pbmcgV2lpIiwKICAgICAgICAgICJmYWN0cyIsCiAgICAgICAgICAiZ2FtZXMgZm9yIHdpaSB1IiwKICAgICAgICAgICJuaW50ZW5kbyAzZHMiLAogICAgICAgICAgIkRpZCBZb3UgS25vdyBHYW1pbmc/IChCbG9nKSIsCiAgICAgICAgICAiZ2FtaW5nIiwKICAgICAgICAgICJkeWtnIiwKICAgICAgICAgICJ3aWkgaGlzdG9yeSIsCiAgICAgICAgICAiaGlzdG9yeSBvZiB0aGUgd2lpIiwKICAgICAgICAgICJ3aWkgZWFzdGVyIGVnZ3MiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiTmludGVuZG8gV2lpIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gUmF0ZWQgUyBHYW1lcyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEg4pa2IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5XZSB0YWtlIGEgbG9vayBhdCBmYWN0cyBmb3IgdGhlIE5pbnRlbmRvIFdpaSFcblxuVm90ZSBNYXJpbzogaHR0cDovL2JpdC5seS9EWUtHVm90ZTFcblZvdGUgWmVsZGE6IGh0dHA6Ly9iaXQubHkvRFlLR1ZvdGUyXG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cbldlYnNpdGU6ICAgRGlkWW91S25vd0dhbWluZy5jb21cblxu4pa2IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5cblZvaWNlIG92ZXIgYnkgaHR0cDovL3lvdXR1YmUuY29tL3JhdGVkc2dhbWVzIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUOU0xNVMiLAogICAgICAgICJkaW1lbnNpb24iOiAiMmQiLAogICAgICAgICJkZWZpbml0aW9uIjogImhkIiwKICAgICAgICAiY2FwdGlvbiI6ICJmYWxzZSIsCiAgICAgICAgImxpY2Vuc2VkQ29udGVudCI6IHRydWUsCiAgICAgICAgImNvbnRlbnRSYXRpbmciOiB7fSwKICAgICAgICAicHJvamVjdGlvbiI6ICJyZWN0YW5ndWxhciIKICAgICAgfSwKICAgICAgInN0YXRpc3RpY3MiOiB7CiAgICAgICAgInZpZXdDb3VudCI6ICIyMTAwMjA1IiwKICAgICAgICAibGlrZUNvdW50IjogIjMwNTAwIiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjUwMSIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI1MjQzIgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:32 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=bUjgqQJrpqw&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:33 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInRIT2ExalJxdVB6STlYNlJTRmRCaUtTTWZuWSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiaFFzTVN2YkRLcEV2T1puY3VTeF9HX010bkJ3IiwKICAgICAgImlkIjogImJVamdxUUpycHF3IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMDQtMjdUMTg6NTc6MTFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlhib3ggLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBSYXRlZCBTIEdhbWVzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3Vic2NyaWJlIGZvciBtb3JlIGdhbWluZyB0cml2aWEhIGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG5Wb3RlIFhib3ggMzYwOiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMVxuVm90ZSBQbGF5U3RhdGlvbiAzOiBodHRwOi8vYml0Lmx5L0RZS0dWb3RlMlxuXG5GYWNlYm9vazogZmFjZWJvb2suY29tL2RpZHlvdWtub3dnYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5XZWJzaXRlOiAgIERpZFlvdUtub3dHYW1pbmcuY29tXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL1JhdGVkU0dhbWVzIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvYlVqZ3FRSnJwcXcvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9iVWpncVFKcnBxdy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9iVWpncVFKcnBxdy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvYlVqZ3FRSnJwcXcvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9iVWpncVFKcnBxdy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vdyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJmYWN0cyIsCiAgICAgICAgICAic2VjcmV0cyIsCiAgICAgICAgICAidHJpdmlhIiwKICAgICAgICAgICJ4Ym94IiwKICAgICAgICAgICJ4Ym94IDM2MCIsCiAgICAgICAgICAieGJveCBvbmUiLAogICAgICAgICAgInhib3ggbGl2ZSIsCiAgICAgICAgICAieGJveCBnYW1lcyIsCiAgICAgICAgICAiZ3RhIiwKICAgICAgICAgICJndGEgNSIsCiAgICAgICAgICAieGJveCBjb250cm9sbGVyIiwKICAgICAgICAgICJtaW5lY3JhZnQiLAogICAgICAgICAgIm1pbmVjcmFmdCB4Ym94IiwKICAgICAgICAgICJtb3J0YWwga29tYmF0IiwKICAgICAgICAgICJoYWxvIiwKICAgICAgICAgICJjYWxsIG9mIGR1dHkiLAogICAgICAgICAgImJsYWNrIG9wcyAzIiwKICAgICAgICAgICJmYWJsZSIsCiAgICAgICAgICAiU3RhciBXYXJzOiBCYXR0bGVmcm9udCIsCiAgICAgICAgICAiZ2VhcnMgb2Ygd2FyIiwKICAgICAgICAgICJzcGxpbnRlciBjZWxsIiwKICAgICAgICAgICJoYWxvIDIiLAogICAgICAgICAgIkdyYW5kIFRoZWZ0IEF1dG8gKFZpZGVvIEdhbWUgU2VyaWVzKSIsCiAgICAgICAgICAiamV0IHNldCByYWRpbyIsCiAgICAgICAgICAiamV0IGdyaW5kIHJhZGlvIiwKICAgICAgICAgICJqZXQgc2V0IHJhZGlvIGZ1dHVyZSIsCiAgICAgICAgICAibW9kZXJuIHdhcmZhcmUiLAogICAgICAgICAgIm5ldmVyd2ludGVyIiwKICAgICAgICAgICJtb3J0YWwga29tYmF0IHgiLAogICAgICAgICAgImdhbWVzIiwKICAgICAgICAgICJEcmVhbWNhc3QiLAogICAgICAgICAgInhib3ggb3JpZ2luYWwiLAogICAgICAgICAgIm9yaWdpbmFsIHhib3ggZmFjdHMiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiWGJveCAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFJhdGVkIFMgR2FtZXMiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlN1YnNjcmliZSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhISBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxuVm90ZSBYYm94IDM2MDogaHR0cDovL2JpdC5seS9EWUtHVm90ZTFcblZvdGUgUGxheVN0YXRpb24gMzogaHR0cDovL2JpdC5seS9EWUtHVm90ZTJcblxuRmFjZWJvb2s6IGZhY2Vib29rLmNvbS9kaWR5b3Vrbm93Z2FtaW5nXG5Ud2l0dGVyOiAgICAgQERpZFlvdUtub3dHYW1pblxuV2Vic2l0ZTogICBEaWRZb3VLbm93R2FtaW5nLmNvbVxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuVm9pY2Ugb3ZlciBieSBodHRwczovL3d3dy55b3V0dWJlLmNvbS9SYXRlZFNHYW1lcyIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDhNMjVTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMTQ4NDI1NiIsCiAgICAgICAgImxpa2VDb3VudCI6ICIyMzgyOCIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI1MjIiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiNTQ5OSIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:33 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=EHpBx9h4aMU&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:33 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInpkalZTSkduaENQTmdjLWtYV3lyX0NTeTVXZyIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiY3pEQmY4T0ZES1JLRi1rQ2QtRXBkRGZKSTV3IiwKICAgICAgImlkIjogIkVIcEJ4OWg0YU1VIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTUtMDQtMDVUMjA6MjU6NTVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkdyYW5kIFRoZWZ0IEF1dG8gNSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFJhdGVkIFMgR2FtZXMiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdWJzY3JpYmUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSEgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cblxu4pa2IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5cblZpZGVvIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9yYXRlZHNnYW1lcyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0VIcEJ4OWg0YU1VL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRUhwQng5aDRhTVUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRUhwQng5aDRhTVUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0VIcEJ4OWg0YU1VL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRUhwQng5aDRhTVUvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3ciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZmFjdHMiLAogICAgICAgICAgInNlY3JldHMiLAogICAgICAgICAgInRyaXZpYSIsCiAgICAgICAgICAiZ3RhIHYgY2hlYXRzIiwKICAgICAgICAgICJndGEgNSBjaGVhdHMiLAogICAgICAgICAgImd0YSAxIiwKICAgICAgICAgICJsaWJlcnR5IGNpdHkiLAogICAgICAgICAgImd0YSA0IiwKICAgICAgICAgICJndGEgMyIsCiAgICAgICAgICAic2FuIGFuZHJlYXMiLAogICAgICAgICAgInZpY2UgY2l0eSIsCiAgICAgICAgICAiZ3RhIDUiLAogICAgICAgICAgImd0YSB2IiwKICAgICAgICAgICJndGEgb25saW5lIGhlaXN0IiwKICAgICAgICAgICJndGEgNSBoZWlzdCIsCiAgICAgICAgICAiZ3RhIGhlaXN0IiwKICAgICAgICAgICJndGEgb25saW5lIiwKICAgICAgICAgICJndGEgc2FuIiwKICAgICAgICAgICJndGEgc2FuIGFuZHJlYXMiLAogICAgICAgICAgImd0YSA1IG9ubGluZSIsCiAgICAgICAgICAiZ3RhIDUgZnVubnkgbW9tZW50cyIsCiAgICAgICAgICAiZ3RhIDUgdGh1ZyBsaWZlIiwKICAgICAgICAgICJncmFuZCB0aGVmdCBhdXRvIDMiLAogICAgICAgICAgImdyYW5kIHRoZWZ0IGF1dG8gNCIsCiAgICAgICAgICAiZ3JhbmQgdGhlZnQgYXV0byA1IiwKICAgICAgICAgICJncmFuZCB0aGVmdCBhdXRvIFYiLAogICAgICAgICAgImdyYW5kIHRoZWZ0IGF1dG8gc2FuIGFuZHJlYXMiLAogICAgICAgICAgIkdUQSBGYWN0cyIsCiAgICAgICAgICAiR1RBNSBGYWN0cyIsCiAgICAgICAgICAiR1RBViBGYWN0cyIsCiAgICAgICAgICAicmF0ZWQgYSBnYW1lcyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJHcmFuZCBUaGVmdCBBdXRvIDUgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBSYXRlZCBTIEdhbWVzIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdWJzY3JpYmUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSEgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbkZhY2Vib29rOiBmYWNlYm9vay5jb20vZGlkeW91a25vd2dhbWluZ1xuVHdpdHRlcjogICAgIEBEaWRZb3VLbm93R2FtaW5cblxu4pa2IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5cblZpZGVvIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9yYXRlZHNnYW1lcyIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDEwTTM2UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE2NzY0OTAiLAogICAgICAgICJsaWtlQ291bnQiOiAiMjk5MDgiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiMzgzIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjE2MTQiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:33 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=3HuUa4Lnw9I&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:33 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIlN5eFA2NG56WmNvOFFMLVduT21BYzIwYVNVWSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiMng0dHgzQ2M5bkRNS1Q2X3dKZjdHQkFVa1NvIiwKICAgICAgImlkIjogIjNIdVVhNExudzlJIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMTEtMTVUMjA6NDg6MjlaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlBsYXlTdGF0aW9uIDIgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBDYWRkaWNhcnVzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3Vic2NyaWJlIGZvciBtb3JlIGdhbWluZyB0cml2aWEhIGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuXG5GYWNlYm9vazogRmFjZWJvb2suY29tL0RpZFlvdUtub3dHYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5cblZvaWNlIG92ZXIgYnkgaHR0cDovL3lvdXR1YmUuY29tL0NhZGRpY2FydXNcblRoZSBvcmlnaW5hbCBkcmFmdCBvZiB0aGlzIHNjcmlwdCB3YXMgd3JpdHRlbiBieSBJbm5hZ2FkYWRhdmlkYS4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8zSHVVYTRMbnc5SS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNIdVVhNExudzlJL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNIdVVhNExudzlJL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8zSHVVYTRMbnc5SS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNIdVVhNExudzlJL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAiR2FtaW5nIiwKICAgICAgICAgICJkaWR5b3Vrbm93IiwKICAgICAgICAgICJkaWR5b3Vrbm93Z2FtaW5nIiwKICAgICAgICAgICJkeWtnIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImZhY3RzIiwKICAgICAgICAgICJzZWNyZXRzIiwKICAgICAgICAgICJlYXN0ZXIgZWdncyIsCiAgICAgICAgICAiY2FkZGljYXJ1cyIsCiAgICAgICAgICAicHMyIGdhbWVzIiwKICAgICAgICAgICJwczIgZW11bGF0b3IiLAogICAgICAgICAgInBzMiBjaGVhdHMiLAogICAgICAgICAgImJlc3QgcHMyIGdhbWVzIiwKICAgICAgICAgICJ0b3AgcHMyIGdhbWVzIiwKICAgICAgICAgICJwczIgaW50cm8iLAogICAgICAgICAgInBzMiBzdGFydHVwIiwKICAgICAgICAgICJwbGF5c3RhdGlvbiAyIHN0YXJ0dXAiLAogICAgICAgICAgInBsYXlzdGF0aW9uIDIgY29tbWVyY2lhbCIsCiAgICAgICAgICAicHMyIiwKICAgICAgICAgICJwczMiLAogICAgICAgICAgInBzNCIsCiAgICAgICAgICAicHMxIiwKICAgICAgICAgICJwbGF5c3RhdGlvbiA0IiwKICAgICAgICAgICJwbGF5c3RhdGlvbiAyIGdhbWVzIiwKICAgICAgICAgICJwbGF5c3RhdGlvbiBnYW1lcyIsCiAgICAgICAgICAicGxheXN0YXRpb24gMyIsCiAgICAgICAgICAicGxheXN0YXRpb24gMiBlbXVsYXRvciIsCiAgICAgICAgICAicGxheXN0YXRpb24gMiBjaGVhdHMiLAogICAgICAgICAgInBsYXlzdGF0aW9uIDIgY2hlYXQgY29kZXMiLAogICAgICAgICAgInNhbiBhbmRyZWFzIiwKICAgICAgICAgICJwbGF5c3RhdGlvbiIsCiAgICAgICAgICAicGxheXN0YXRpb24gMiIsCiAgICAgICAgICAicHMyIG9uIHBzNCIsCiAgICAgICAgICAiZ3JhbmQgdGhlZnQgYXV0byIsCiAgICAgICAgICAicHMyIGhpc3RvcnkiLAogICAgICAgICAgInlvdSIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJQbGF5U3RhdGlvbiAyIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gQ2FkZGljYXJ1cyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3Vic2NyaWJlIGZvciBtb3JlIGdhbWluZyB0cml2aWEhIGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuXG5GYWNlYm9vazogRmFjZWJvb2suY29tL0RpZFlvdUtub3dHYW1pbmdcblR3aXR0ZXI6ICAgICBARGlkWW91S25vd0dhbWluXG5cblZvaWNlIG92ZXIgYnkgaHR0cDovL3lvdXR1YmUuY29tL0NhZGRpY2FydXNcblRoZSBvcmlnaW5hbCBkcmFmdCBvZiB0aGlzIHNjcmlwdCB3YXMgd3JpdHRlbiBieSBJbm5hZ2FkYWRhdmlkYS4iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTFTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMjM5Mzg2MiIsCiAgICAgICAgImxpa2VDb3VudCI6ICIzNjc0MCIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI1MDEiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiNDA3MyIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:33 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=3WY1TUJal0E&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:34 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImJGNVVDbzBCb3pXOG84ajBNZ2VJbng2a0pEUSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiX2M5UnFGUy1BbUN3Q1pKMWNmb2c3WVZGeU5jIiwKICAgICAgImlkIjogIjNXWTFUVUphbDBFIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMDgtMjVUMjE6NDg6MDZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkNhc3RsZXZhbmlhICYgSGlzdG9yeSBTcGVjaWFsIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gTWFya2lwbGllciIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhISBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxu4pa2IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5cblxuVm9pY2Ugb3ZlciBieSBodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL21hcmtpcGxpZXJHQU1FXG5cblRoZSBvcmlnaW5hbCBkcmFmdCBvZiB0aGlzIHZpZGVvIHdhcyB3cml0dGVuIGJ5IElubmFnYWRhZGF2aWRhLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNXWTFUVUphbDBFL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvM1dZMVRVSmFsMEUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvM1dZMVRVSmFsMEUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNXWTFUVUphbDBFL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvM1dZMVRVSmFsMEUvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3ciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZmFjdHMiLAogICAgICAgICAgInNlY3JldHMiLAogICAgICAgICAgInRyaXZpYSIsCiAgICAgICAgICAibm9ybWFsYm9vdHMiLAogICAgICAgICAgIk1hcmtpcGxpZXIiLAogICAgICAgICAgImNhc3RsZXZhbmlhIiwKICAgICAgICAgICJjYXN0bGV2YW5pYSAyIiwKICAgICAgICAgICJjYXN0bGV2YW5pYSBtdXNpYyIsCiAgICAgICAgICAiY2FzdGxldmFuaWEgMSIsCiAgICAgICAgICAiY2FzdGxldmFuaWEgdGhlbWUiLAogICAgICAgICAgIkNhc3RsZXZhbmlhOiBMb3JkcyBvZiBTaGFkb3ciLAogICAgICAgICAgIkxvcmRzIG9mIFNoYWRvdyIsCiAgICAgICAgICAic3ltcGhvbnkgb2YgdGhlIG5pZ2h0IiwKICAgICAgICAgICJjYXN0bGV2YW5pYSBzeW1waG9ueSBvZiB0aGUgbmlnaHQiLAogICAgICAgICAgImNhc3RsZXZhbmlhIGJsb29keSB0ZWFycyIsCiAgICAgICAgICAiY2FzdGxldmFuaWEgdmFtcGlyZSBraWxsZXIiLAogICAgICAgICAgImNhc3RsZXZhbmlhIGxvcmRzIG9mIHNoYWRvdyAyIiwKICAgICAgICAgICJ2YW1waXJlIiwKICAgICAgICAgICJkcmFjdWxhIiwKICAgICAgICAgICJHYW1lcyIsCiAgICAgICAgICAiYWx1Y2FyZCIsCiAgICAgICAgICAiYmVsbW9udCIsCiAgICAgICAgICAibWFya2lwbGllcmdhbWUiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiQ2FzdGxldmFuaWEgJiBIaXN0b3J5IFNwZWNpYWwgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBNYXJraXBsaWVyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTVUJTQ1JJQkUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSEgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5cblZvaWNlIG92ZXIgYnkgaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9tYXJraXBsaWVyR0FNRVxuXG5UaGUgb3JpZ2luYWwgZHJhZnQgb2YgdGhpcyB2aWRlbyB3YXMgd3JpdHRlbiBieSBJbm5hZ2FkYWRhdmlkYS4iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTI3UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjE0NzQ4MjEiLAogICAgICAgICJsaWtlQ291bnQiOiAiMzE4MDUiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNDAxIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjI3MjUiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=CWGOYKBP5DM&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:34 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIjRtdjZZOXRUQ2J2eHRSb0xvTG5ld1NzU245VSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAic2pNUVQzOG11UmZ4bDBPYkRfeXVaU3FZMjcwIiwKICAgICAgImlkIjogIkNXR09ZS0JQNURNIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMDctMjlUMjE6MzY6MDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlplbGRhIFBhcnQgNCAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIEpvblRyb24iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdWJzY3JpYmUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSEgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5cblZvaWNlIG92ZXIgYnkgaHR0cDovL3lvdXR1YmUuY29tL2pvbnRyb25zaG93XG5cblVuc2NyYW1ibGVkIE1pZG5hIGF1ZGlvOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTZZTGFrU3MwbWxVIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQ1dHT1lLQlA1RE0vZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9DV0dPWUtCUDVETS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9DV0dPWUtCUDVETS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQ1dHT1lLQlA1RE0vc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9DV0dPWUtCUDVETS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vdyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJmYWN0cyIsCiAgICAgICAgICAic2VjcmV0cyIsCiAgICAgICAgICAidHJpdmlhIiwKICAgICAgICAgICJub3JtYWxib290cyIsCiAgICAgICAgICAiVGhlIExlZ2VuZCBPZiBaZWxkYSBTZXJpZXMgKFZpZGVvIEdhbWUgU2VyaWVzKSIsCiAgICAgICAgICAiemVsZGEiLAogICAgICAgICAgInplbGRhIHdpaSB1IiwKICAgICAgICAgICJ6ZWxkYSByYXAiLAogICAgICAgICAgInplbGRhIHRoZW1lIiwKICAgICAgICAgICJvY2FyaW5hIG9mIHRpbWUiLAogICAgICAgICAgIndpbmQgd2FrZXIiLAogICAgICAgICAgIk5pbnRlbmRvIiwKICAgICAgICAgICJMaW5rIiwKICAgICAgICAgICJhIGxpbmsgYmV0d2VlbiB3b3JsZHMiLAogICAgICAgICAgImh5cnVsZSB3YXJyaW9ycyIsCiAgICAgICAgICAiSm9uVHJvbiIsCiAgICAgICAgICAibWlkbmEiLAogICAgICAgICAgIm1pZG5hJ3Mgdm9pY2UgdW5zY3JhbWJsZWQiLAogICAgICAgICAgInplbGRhIHR3aWxpZ2h0IHByaW5jZXNzIG1pZG5hJ3Mgdm9pY2UgdW5zY3JhbWJsZWQiLAogICAgICAgICAgIm1pZG5hIHVuc2NyYW1ibGVkIHZvaWNlIiwKICAgICAgICAgICJ6ZWxkYSBvb3Qgdm9pY2Ugb3ZlcnMiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiWmVsZGEgUGFydCA0IC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSm9uVHJvbiIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3Vic2NyaWJlIGZvciBtb3JlIGdhbWluZyB0cml2aWEhIGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHA6Ly95b3V0dWJlLmNvbS9qb250cm9uc2hvd1xuXG5VbnNjcmFtYmxlZCBNaWRuYSBhdWRpbzogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj02WUxha1NzMG1sVSIKICAgICAgICB9LAogICAgICAgICJkZWZhdWx0QXVkaW9MYW5ndWFnZSI6ICJlbiIKICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJkdXJhdGlvbiI6ICJQVDZNMTFTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMjg0MjE5MiIsCiAgICAgICAgImxpa2VDb3VudCI6ICIzODk0NiIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICI1NDUiLAogICAgICAgICJmYXZvcml0ZUNvdW50IjogIjAiLAogICAgICAgICJjb21tZW50Q291bnQiOiAiMjk4MSIKICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDEsCiAgICAicmVzdWx0c1BlclBhZ2UiOiAxCiAgfQp9Cg==
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=MCPJGt3m_v8&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:34 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIlE4RkpySHNRajlUdUpsNWcwVXRjaEpDN3pBWSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiZlllUlh6YmxGMmRkNXpPYkYzSVNNcW05LWJVIiwKICAgICAgImlkIjogIk1DUEpHdDNtX3Y4IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMDYtMjhUMjA6MjY6MTdaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIkRvb20gLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBNYXJraXBsaWVyIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3Vic2NyaWJlIGZvciBtb3JlIGdhbWluZyB0cml2aWEhIGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuXG5Wb2ljZSBvdmVyIGJ5IGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvbWFya2lwbGllckdBTUVcblRoZSBvcmlnaW5hbCBkcmFmdCBvZiB0aGlzIHZpZGVvIHdhcyB3cml0dGVuIGJ5IElubmFnYWRhZGF2aWRhLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL01DUEpHdDNtX3Y4L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTUNQSkd0M21fdjgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTUNQSkd0M21fdjgvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL01DUEpHdDNtX3Y4L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTUNQSkd0M21fdjgvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3ciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZmFjdHMiLAogICAgICAgICAgInNlY3JldHMiLAogICAgICAgICAgInRyaXZpYSIsCiAgICAgICAgICAibm9ybWFsYm9vdHMiLAogICAgICAgICAgImRvb20iLAogICAgICAgICAgImRvb20gMiIsCiAgICAgICAgICAiZG9vbSAzIiwKICAgICAgICAgICJkb29tIDQiLAogICAgICAgICAgImJydXRhbCBkb29tIiwKICAgICAgICAgICJkb29tIDEiLAogICAgICAgICAgImRvb20gZ2FtZXBsYXkiLAogICAgICAgICAgImRvb20gdGhlbWUiLAogICAgICAgICAgImRvb20gY2xhbiIsCiAgICAgICAgICAiZG9vbSBiZXRhIiwKICAgICAgICAgICJ3b2xmZW5zdGVpbiIsCiAgICAgICAgICAiTWFya2lwbGllciIsCiAgICAgICAgICAiV29sZmVuc3RlaW4gM0QgKFZpZGVvIEdhbWUpIiwKICAgICAgICAgICJEb29tIChWaWRlbyBHYW1lKSIsCiAgICAgICAgICAiZG9vbSBzb25nIiwKICAgICAgICAgICJkb29tIG11c2ljIiwKICAgICAgICAgICJlYXN0ZXIgZWdncyIsCiAgICAgICAgICAiZG9vbSBleHBsYWluZWQiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiRG9vbSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIE1hcmtpcGxpZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlN1YnNjcmliZSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhISBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG7ilrwgTU9SRSBMSU5LUyBCRUxPVyDilrxcblxu4pa2IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5cblxuVm9pY2Ugb3ZlciBieSBodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL21hcmtpcGxpZXJHQU1FXG5UaGUgb3JpZ2luYWwgZHJhZnQgb2YgdGhpcyB2aWRlbyB3YXMgd3JpdHRlbiBieSBJbm5hZ2FkYWRhdmlkYS4iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTQ1UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAic2QiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjMzODMwODUiLAogICAgICAgICJsaWtlQ291bnQiOiAiNjE5NDAiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiODAxIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjUwMzYiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=QpU_JbAO_Cg&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:34 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogImVTaUl1Y3E0bUZpcVJENmVrOUo2ckZRRmpsOCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiZVVCTGFXVzlnWFRkWkJmU3B6dW9EenRPVHVjIiwKICAgICAgImlkIjogIlFwVV9KYkFPX0NnIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMDUtMDNUMTk6Mzc6NTVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlRlYW0gRm9ydHJlc3MgMiAoVEYyKSAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIE1hcmtpcGxpZXIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdWJzY3JpYmUgZm9yIG1vcmUgZ2FtaW5nIHRyaXZpYSEgaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuXG5JbiB0aGlzIGVwaXNvZGUgd2UgbG9vayBhdCBzb21lIG9mIHRoZSBmYWN0cyBhbmQgRWFzdGVyIGVnZ3Mgc2VlbiBpbiBUZWFtIEZvcnRyZXNzIDIgKFRGMikgd2l0aCBNYXJraXBsaWVyISBcblxu4pa2IE5JTlRFTkRPIFZpZGVvc1xuWmVsZGEgLSBodHRwOi8vYml0Lmx5LzFHV0o1YXBcblBva2Vtb24gLSBodHRwOi8vYml0Lmx5LzFrb09iQ3Bcbk1hcmlvIC0gaHR0cDovL2JpdC5seS8xWTRlOFdhXG5TbWFzaCBCcm9zIC0gaHR0cDovL2JpdC5seS8xTUE3eFBiXG5cbuKWuiBQQyBHQU1JTkcgVmlkZW9zXG5TaG9vdGVycyAtIGh0dHA6Ly9iaXQubHkvMVNJaU9PZVxuTWluZWNyYWZ0IC0gaHR0cDovL2JpdC5seS8xaVRETFpEXG5GTkFGIC0gaHR0cDovL2JpdC5seS8xTW55Y3ZiXG5cbuKWuiBTRUdBIFZpZGVvc1xuU29uaWMgLSBodHRwOi8vYml0Lmx5LzFrb092a0JcbkRyZWFtY2FzdCAtIGh0dHA6Ly9iaXQubHkvMU9EVmpZNVxuXG7ilrogU09OWSBWaWRlb3NcblBsYXlTdGF0aW9uIC0gaHR0cDovL2JpdC5seS8xUG94U0M3XG5cbuKWuiBPdGhlciBWaWRlb3Ncbk1hcmlvIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xTUtsWElqXG5NZXRhbCBHZWFyIEVhc3RlciBFZ2dzIC0gaHR0cDovL2JpdC5seS8xUEM1VWw0XG5cbkdhbWVwbGF5IGZvb3RhZ2UgY2FwdHVyZWQgb24gUEMgd2l0aCB1cGRhdGVcblxuVm9pY2Ugb3ZlciBieSBodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL21hcmtpcGxpZXJHQU1FXG5cblRoZSBvcmlnaW5hbCBkcmFmdCBmb3IgdGhpcyBzY3JpcHQgd2FzIHdyaXR0ZW4gYnkgVml0YXMgVmFybmFzLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1FwVV9KYkFPX0NnL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUXBVX0piQU9fQ2cvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUXBVX0piQU9fQ2cvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1FwVV9KYkFPX0NnL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUXBVX0piQU9fQ2cvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIkRpZFlvdUtub3dHYW1pbmc/IiwKICAgICAgICAidGFncyI6IFsKICAgICAgICAgICJHYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZmFjdHMiLAogICAgICAgICAgInNlY3JldHMiLAogICAgICAgICAgInRyaXZpYSIsCiAgICAgICAgICAiVGVhbSBGb3J0cmVzcyAyIiwKICAgICAgICAgICJURjIiLAogICAgICAgICAgIm1lZXQgdGhlIiwKICAgICAgICAgICJUZWFtdCBGb3J0cmVzcyIsCiAgICAgICAgICAiVGVhbSBGb3J0cmVzcyAxIiwKICAgICAgICAgICJUZWFtIEZvcnRyZXNzIENsYXNzaWMiLAogICAgICAgICAgInRlYW0gZm9ydHJlc3MgZ2FtZXBsYXkiLAogICAgICAgICAgImVhc3RlciBlZ2dzIiwKICAgICAgICAgICJzZm0iLAogICAgICAgICAgImdtb2QiLAogICAgICAgICAgInZhbHZlIiwKICAgICAgICAgICJ0aGUgbWVkaWMiLAogICAgICAgICAgIk1hcmtpcGxpZXIiLAogICAgICAgICAgIm1hcmtpcGxpZXJHQU1FIiwKICAgICAgICAgICJnYW1lcGxheSIsCiAgICAgICAgICAicGMiLAogICAgICAgICAgInN0ZWFtIiwKICAgICAgICAgICJtdWx0aXBsYXllciIsCiAgICAgICAgICAicGMgZ2FtaW5nIiwKICAgICAgICAgICJ2aWRlbyBnYW1lcyIsCiAgICAgICAgICAidXBkYXRlIiwKICAgICAgICAgICJlYXN0ZXIgZWdnIiwKICAgICAgICAgICJ0ZWFtIiwKICAgICAgICAgICJmb3J0cmVzcyIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAic2NvdXQiLAogICAgICAgICAgIm1lZGljIiwKICAgICAgICAgICJzcHkiLAogICAgICAgICAgImhlYXZ5IiwKICAgICAgICAgICJzb2xkaWVyIiwKICAgICAgICAgICJlbmdpbmVlciIsCiAgICAgICAgICAicHlybyIsCiAgICAgICAgICAic25pcGVyIiwKICAgICAgICAgICJkZW1vbWFuIiwKICAgICAgICAgICJzb3VyY2UiLAogICAgICAgICAgInNvdXJjZSBmaWxtbWFrZXIiLAogICAgICAgICAgImdhcnJ5J3MgbW9kIiwKICAgICAgICAgICJ0ZjIgdGhlb3J5IiwKICAgICAgICAgICJnYW1lIHRoZW9yeSB0ZjIiCiAgICAgICAgXSwKICAgICAgICAiY2F0ZWdvcnlJZCI6ICIyMCIsCiAgICAgICAgImxpdmVCcm9hZGNhc3RDb250ZW50IjogIm5vbmUiLAogICAgICAgICJsb2NhbGl6ZWQiOiB7CiAgICAgICAgICAidGl0bGUiOiAiVGVhbSBGb3J0cmVzcyAyIChURjIpIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gTWFya2lwbGllciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3Vic2NyaWJlIGZvciBtb3JlIGdhbWluZyB0cml2aWEhIGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblxuSW4gdGhpcyBlcGlzb2RlIHdlIGxvb2sgYXQgc29tZSBvZiB0aGUgZmFjdHMgYW5kIEVhc3RlciBlZ2dzIHNlZW4gaW4gVGVhbSBGb3J0cmVzcyAyIChURjIpIHdpdGggTWFya2lwbGllciEgXG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5HYW1lcGxheSBmb290YWdlIGNhcHR1cmVkIG9uIFBDIHdpdGggdXBkYXRlXG5cblZvaWNlIG92ZXIgYnkgaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9tYXJraXBsaWVyR0FNRVxuXG5UaGUgb3JpZ2luYWwgZHJhZnQgZm9yIHRoaXMgc2NyaXB0IHdhcyB3cml0dGVuIGJ5IFZpdGFzIFZhcm5hcy4iCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ3TTQ0UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogInRydWUiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiNDEzOTk5MiIsCiAgICAgICAgImxpa2VDb3VudCI6ICI2Njc2NiIsCiAgICAgICAgImRpc2xpa2VDb3VudCI6ICIxMDcyIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjgzNjUiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=xGvvulC1EDk&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:35 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIi1QRGhKX1VTOUd0RVlUaEYyMlhsRGQ0WGh1RSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiNThPdkIyc0xmVUdxb1N5aW9oeEp0bENzZzBRIiwKICAgICAgImlkIjogInhHdnZ1bEMxRURrIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMDItMTZUMDA6MzU6MTZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlBva2Vtb24gJiBTY2llbmNlIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSm9uVHJvbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBnYW1pbmcgdHJpdmlhISBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5Kb25Ucm9uJ3MgQm9vdGxlZyBQb2tlbW9uIFZpZGVvOiBodHRwOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LXpKRDlCMHphOWtcbuKWvCBNT1JFIExJTktTIEJFTE9XIOKWvFxuXG7ilrYgTklOVEVORE8gVmlkZW9zXG5aZWxkYSAtIGh0dHA6Ly9iaXQubHkvMUdXSjVhcFxuUG9rZW1vbiAtIGh0dHA6Ly9iaXQubHkvMWtvT2JDcFxuTWFyaW8gLSBodHRwOi8vYml0Lmx5LzFZNGU4V2FcblNtYXNoIEJyb3MgLSBodHRwOi8vYml0Lmx5LzFNQTd4UGJcblxu4pa6IFBDIEdBTUlORyBWaWRlb3NcblNob290ZXJzIC0gaHR0cDovL2JpdC5seS8xU0lpT09lXG5NaW5lY3JhZnQgLSBodHRwOi8vYml0Lmx5LzFpVERMWkRcbkZOQUYgLSBodHRwOi8vYml0Lmx5LzFNbnljdmJcblxu4pa6IFNFR0EgVmlkZW9zXG5Tb25pYyAtIGh0dHA6Ly9iaXQubHkvMWtvT3ZrQlxuRHJlYW1jYXN0IC0gaHR0cDovL2JpdC5seS8xT0RWalk1XG5cbuKWuiBTT05ZIFZpZGVvc1xuUGxheVN0YXRpb24gLSBodHRwOi8vYml0Lmx5LzFQb3hTQzdcblxu4pa6IE90aGVyIFZpZGVvc1xuTWFyaW8gRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFNS2xYSWpcbk1ldGFsIEdlYXIgRWFzdGVyIEVnZ3MgLSBodHRwOi8vYml0Lmx5LzFQQzVVbDRcblxuRnVydGhlciBSZWFkaW5nOlxuXG5QaWthY2h1cmluXG5lbi53aWtpcGVkaWEub3JnL3dpa2kvUGlrYWNodXJpblxuWmJ0YjdcbmVuLndpa2lwZWRpYS5vcmcvd2lraS9aYnRiN1xuUG9rZXdhbGtlciBTdHVkeVxuYXJjaGl2ZS5uZXdzLmlhc3RhdGUuZWR1L25ld3MvMjAxMS9hcHIvUG9rZXdhbGtlclxuT24gdGhlIE9yaWdpbiBvZiBTcGVjaWVzIGJ5IEdlb3JnZSBIdXRjaGVvblxuYnVsYmFuZXdzLmJ1bGJhZ2FyZGVuLm5ldC93aWtpL09uX3RoZV9PcmlnaW5fb2ZfU3BlY2llczpfQ2hhcm1hbmRlclxuYnVsYmFuZXdzLmJ1bGJhZ2FyZGVuLm5ldC93aWtpL09uX3RoZV9PcmlnaW5fb2ZfU3BlY2llczpfTWV3XG5idWxiYW5ld3MuYnVsYmFnYXJkZW4ubmV0L3dpa2kvT25fdGhlX09yaWdpbl9vZl9TcGVjaWVzOl9QYXJhc19hbmRfUGFyYXNlY3RcbkNvcmR5Y2VwcyBBbnRcbnd3dy55b3V0dWJlLmNvbS93YXRjaD92PVh1S2pCSUJCQUw4IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveEd2dnVsQzFFRGsvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94R3Z2dWxDMUVEay9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94R3Z2dWxDMUVEay9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveEd2dnVsQzFFRGsvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS94R3Z2dWxDMUVEay9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIkdhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vdyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAibm9ybWFsYm9vdHMiLAogICAgICAgICAgIkpvblRyb24iLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAicG9rZW1vbiIsCiAgICAgICAgICAibWV3IiwKICAgICAgICAgICJtZXd0d28iLAogICAgICAgICAgInBpa2FjaHUiLAogICAgICAgICAgImNoYXJpemFyZCIsCiAgICAgICAgICAiYmxhc3RvaXNlIiwKICAgICAgICAgICJzZWNyZXQiLAogICAgICAgICAgInNlY3JldHMiLAogICAgICAgICAgIlBva8OpbW9uIChWaWRlbyBHYW1lIFNlcmllcykiLAogICAgICAgICAgImdhbWV0aGVvcnkiLAogICAgICAgICAgImdhbWUgdGhlb3J5IiwKICAgICAgICAgICJ2c2F1Y2UzIiwKICAgICAgICAgICJQb2vDqW1vbiAoVFYgUHJvZ3JhbSkiLAogICAgICAgICAgInZzYXVjZSIsCiAgICAgICAgICAiUG9rZW1vbiAmIFNjaWVuY2UiLAogICAgICAgICAgIkJvb3RsZWcgUG9rZW1vbiBHYW1lcyIsCiAgICAgICAgICAiZWFzdGVyIGVnZyIsCiAgICAgICAgICAiZWFzdGVyIGVnZ3MiLAogICAgICAgICAgImZhY3QiLAogICAgICAgICAgImZhY3RzIiwKICAgICAgICAgICJ0cml2aWEiLAogICAgICAgICAgIkpvbiBKYWZhcmkiLAogICAgICAgICAgIlBva8OpbW9uIChBbmltZS9NYW5nYSBGcmFuY2hpc2UpIgogICAgICAgIF0sCiAgICAgICAgImNhdGVnb3J5SWQiOiAiMjAiLAogICAgICAgICJsaXZlQnJvYWRjYXN0Q29udGVudCI6ICJub25lIiwKICAgICAgICAibG9jYWxpemVkIjogewogICAgICAgICAgInRpdGxlIjogIlBva2Vtb24gJiBTY2llbmNlIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gSm9uVHJvbiIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIGdhbWluZyB0cml2aWEhIGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcbkpvblRyb24ncyBCb290bGVnIFBva2Vtb24gVmlkZW86IGh0dHA6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tekpEOUIwemE5a1xu4pa8IE1PUkUgTElOS1MgQkVMT1cg4pa8XG5cbuKWtiBOSU5URU5ETyBWaWRlb3NcblplbGRhIC0gaHR0cDovL2JpdC5seS8xR1dKNWFwXG5Qb2tlbW9uIC0gaHR0cDovL2JpdC5seS8xa29PYkNwXG5NYXJpbyAtIGh0dHA6Ly9iaXQubHkvMVk0ZThXYVxuU21hc2ggQnJvcyAtIGh0dHA6Ly9iaXQubHkvMU1BN3hQYlxuXG7ilrogUEMgR0FNSU5HIFZpZGVvc1xuU2hvb3RlcnMgLSBodHRwOi8vYml0Lmx5LzFTSWlPT2Vcbk1pbmVjcmFmdCAtIGh0dHA6Ly9iaXQubHkvMWlURExaRFxuRk5BRiAtIGh0dHA6Ly9iaXQubHkvMU1ueWN2YlxuXG7ilrogU0VHQSBWaWRlb3NcblNvbmljIC0gaHR0cDovL2JpdC5seS8xa29PdmtCXG5EcmVhbWNhc3QgLSBodHRwOi8vYml0Lmx5LzFPRFZqWTVcblxu4pa6IFNPTlkgVmlkZW9zXG5QbGF5U3RhdGlvbiAtIGh0dHA6Ly9iaXQubHkvMVBveFNDN1xuXG7ilrogT3RoZXIgVmlkZW9zXG5NYXJpbyBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMU1LbFhJalxuTWV0YWwgR2VhciBFYXN0ZXIgRWdncyAtIGh0dHA6Ly9iaXQubHkvMVBDNVVsNFxuXG5GdXJ0aGVyIFJlYWRpbmc6XG5cblBpa2FjaHVyaW5cbmVuLndpa2lwZWRpYS5vcmcvd2lraS9QaWthY2h1cmluXG5aYnRiN1xuZW4ud2lraXBlZGlhLm9yZy93aWtpL1pidGI3XG5Qb2tld2Fsa2VyIFN0dWR5XG5hcmNoaXZlLm5ld3MuaWFzdGF0ZS5lZHUvbmV3cy8yMDExL2Fwci9Qb2tld2Fsa2VyXG5PbiB0aGUgT3JpZ2luIG9mIFNwZWNpZXMgYnkgR2VvcmdlIEh1dGNoZW9uXG5idWxiYW5ld3MuYnVsYmFnYXJkZW4ubmV0L3dpa2kvT25fdGhlX09yaWdpbl9vZl9TcGVjaWVzOl9DaGFybWFuZGVyXG5idWxiYW5ld3MuYnVsYmFnYXJkZW4ubmV0L3dpa2kvT25fdGhlX09yaWdpbl9vZl9TcGVjaWVzOl9NZXdcbmJ1bGJhbmV3cy5idWxiYWdhcmRlbi5uZXQvd2lraS9Pbl90aGVfT3JpZ2luX29mX1NwZWNpZXM6X1BhcmFzX2FuZF9QYXJhc2VjdFxuQ29yZHljZXBzIEFudFxud3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WHVLakJJQkJBTDgiCiAgICAgICAgfSwKICAgICAgICAiZGVmYXVsdEF1ZGlvTGFuZ3VhZ2UiOiAiZW4iCiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAiZHVyYXRpb24iOiAiUFQ2TTM0UyIsCiAgICAgICAgImRpbWVuc2lvbiI6ICIyZCIsCiAgICAgICAgImRlZmluaXRpb24iOiAiaGQiLAogICAgICAgICJjYXB0aW9uIjogImZhbHNlIiwKICAgICAgICAibGljZW5zZWRDb250ZW50IjogdHJ1ZSwKICAgICAgICAiY29udGVudFJhdGluZyI6IHt9LAogICAgICAgICJwcm9qZWN0aW9uIjogInJlY3Rhbmd1bGFyIgogICAgICB9LAogICAgICAic3RhdGlzdGljcyI6IHsKICAgICAgICAidmlld0NvdW50IjogIjI3Njg1NzYiLAogICAgICAgICJsaWtlQ291bnQiOiAiNDIxNjUiLAogICAgICAgICJkaXNsaWtlQ291bnQiOiAiNzIzIiwKICAgICAgICAiZmF2b3JpdGVDb3VudCI6ICIwIiwKICAgICAgICAiY29tbWVudENvdW50IjogIjI5MTQiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:35 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=WbADp8j6XiA&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:35 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIk15TE45QW1wQW9ZTVZRWWdaN0ZZenlwWTY4NCIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiU2lZaE5QSWo5MU9DR2xOQ0I5dU9OYkIxcnBzIiwKICAgICAgImlkIjogIldiQURwOGo2WGlBIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDYtMjNUMTk6MjU6NTRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIktvamkgS29uZG86IEZyb20gUHVuY2gtT3V0ISEgdG8gU3VwZXIgTWFyaW8gTWFrZXIgMiAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZ0LiBGdXJzdCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBGYWN0cyDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuUmVnZ2llIEZpbHMtQWltZSDilrogaHR0cDovL2JpdC5seS8yUmtFcFRoXG5Tb3VyY2VHYW1pbmcg4pa6IGh0dHA6Ly9iaXQubHkvMm5OaFBFWlxuXG5JbiB0aGlzIHZpZGVvLCBEaWQgWW91IEtub3cgR2FtaW5nIHRha2VzIGEgbG9vayBhdCB0aGUgY2FyZWVyIG9mIGxlZ2VuZGFyeSBjb21wb3NlciBLb2ppIEtvbmRvLiBLb25kbyBoYXMgc3BlbnQgaGlzIGVudGlyZSB3b3JraW5nIGxpZmUgYXQgTmludGVuZG8sIHN0YXJ0aW5nIHdpdGggUHVuY2gtT3V0ISEgYW5kIG1vdmluZyBvbiB0byBUaGUgTGVnZW5kIG9mIFplbGRhIGFuZCBTdXBlciBNYXJpbyBCcm9zLiBIaXMgbW9zdCByZWNlbnQgd29yayBpcyBTdXBlciBNYXJpbyBNYWtlciAyLCBhbmQgaGUgc2hvd3Mgbm8gc2lnbnMgb2Ygc3RvcHBpbmcuXG5cblNwZWNpYWwgdGhhbmtzIHRvIER5bGFuIEN1dGhiZXJ0IChodHRwczovL3R3aXR0ZXIuY29tL2R5bGFuY3V0aGJlcnQpLCBNYXJrIExlbnR6IChodHRwczovL3R3aXR0ZXIuY29tL3RoZUhlbnJ5RGVtb3MpIGFuZCBMaWFtIEVkd2FyZHMgKGh0dHBzOi8vdHdpdHRlci5jb20vTGlhbUJNRSkuXG5cbkZvbGxvdyBEWUtHIG9uOlxuVHdpdHRlcjogaHR0cDovL2JpdC5seS8yb09hdnMyXG5JbnN0YWdyYW06IGh0dHA6Ly9iaXQubHkvMm9PNGpqQVxuRmFjZWJvb2s6IGh0dHA6Ly9iaXQubHkvMm5JckZwOVxuV2Vic2l0ZTogaHR0cDovL2JpdC5seS9OcFlEYkRcblxuUmVzZWFyY2gvV3JpdGluZyBieSBQdXNoRHVzdEluIG9mIFNvdXJjZUdhbWluZ1xuQWRkaXRpb25hbCBSZXNlYXJjaC9Xcml0aW5nIGJ5IEZ1cnN0XG5WaWRlbyBFZGl0aW5nIGJ5IEZ1cnN0XG5cblNvdXJjZXMvRnVydGhlciBSZWFkaW5nOlxuaHR0cDovL3d3dy52Z21vbmxpbmUubmV0L2tvamlrb25kby9cbmh0dHBzOi8vd3d3LndpcmVkLmNvbS8yMDA3LzAzL3ZnbC1rb2ppLWtvbmRvLS8gIChNYWtpbmcgYSBtdXNpYyBnYW1lLCB0YWxrcyBhYm91dCBPc3UsIGV0Yylcbmh0dHA6Ly9hcmNoaXZlLnZpZGVvZ2FtZXNkYWlseS5jb20vZmVhdHVyZXMva29qaV9rb25kb19pdl9wMS5hc3Bcbmh0dHBzOi8vd3d3Lmlnbi5jb20vYXJ0aWNsZXMvMjAxNC8xMi8xMC9hLW11c2ljLXRyaXZpYS10b3VyLXdpdGgtbmludGVuZG9zLWtvamkta29uZG9cbmh0dHA6Ly9zaG11cGxhdGlvbnMuY29tL3N1cGVybWFyaW93b3JsZC9cbmh0dHBzOi8vd3d3LmdkY3ZhdWx0LmNvbS9wbGF5Lzc1NC9QYWludGluZy1hbi1JbnRlcmFjdGl2ZS1NdXNpY2FsIChHREMgVGFsaylcbmh0dHBzOi8vd3d3LmdhbWFzdXRyYS5jb20vdmlldy9uZXdzLzIzMTk4Ny9UaGVfTWFyaW9fTWFlc3Ryb19zcGVha3NfS29qaV9Lb25kb19vbl9jb21wb3NpbmdfY2xhc3NpY3MucGhwXG5odHRwczovL3d3dy5nYW1hc3V0cmEuY29tL3ZpZXcvbmV3cy8xMDQwMDIvR0RDX0tvamlfS29uZG9zX0ludGVyYWN0aXZlX011c2ljYWxfTGFuZHNjYXBlcy5waHBcbmh0dHA6Ly93d3cubmludGVuZG93b3JsZHJlcG9ydC5jb20vZmVhdHVyZS8xMzExOC9rb2ppLWtvbmRvcy1nZGMtMjAwNy1wcmVzZW50YXRpb25cbmh0dHBzOi8vd3d3LmdsaXR0ZXJiZXJyaS5jb20vb2NhcmluYS1vZi10aW1lL3NwZWNpYWwtaW50ZXJ2aWV3LWtvamkta29uZG8vXG4gXG4jS29qaUtvbmRvICNaZWxkYSAjTWFyaW8iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XYkFEcDhqNlhpQS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1diQURwOGo2WGlBL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1diQURwOGo2WGlBL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XYkFEcDhqNlhpQS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1diQURwOGo2WGlBL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJEaWRZb3VLbm93R2FtaW5nPyIsCiAgICAgICAgInRhZ3MiOiBbCiAgICAgICAgICAia29qaSBrb25kbyIsCiAgICAgICAgICAic3VwZXIgbWFyaW8gbWFrZXIgMiIsCiAgICAgICAgICAibWFyaW8gbWFrZXIgMiIsCiAgICAgICAgICAibWFyaW8gbWFrZXIiLAogICAgICAgICAgInN1cGVyIG1hcmlvIiwKICAgICAgICAgICJtYXJpbyIsCiAgICAgICAgICAiemVsZGEiLAogICAgICAgICAgImRpZCB5b3Uga25vdyBnYW1pbmciLAogICAgICAgICAgImRpZHlvdWtub3dnYW1pbmciLAogICAgICAgICAgImR5a2dhbWluZyIsCiAgICAgICAgICAiZHlrZyIsCiAgICAgICAgICAiZ2FtaW5nIiwKICAgICAgICAgICJrb2ppIGtvbmRvIG1hcmlvIiwKICAgICAgICAgICJrb2ppIGtvbmRvIHplbGRhIiwKICAgICAgICAgICJuaW50ZW5kbyIsCiAgICAgICAgICAidGhlIGxlZ2VuZCBvZiB6ZWxkYSIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJLb2ppIEtvbmRvOiBGcm9tIFB1bmNoLU91dCEhIHRvIFN1cGVyIE1hcmlvIE1ha2VyIDIgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGdC4gRnVyc3QiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBGYWN0cyDilrogaHR0cDovL2JpdC5seS9EWUtHX1N1YnNjcmliZVxuUmVnZ2llIEZpbHMtQWltZSDilrogaHR0cDovL2JpdC5seS8yUmtFcFRoXG5Tb3VyY2VHYW1pbmcg4pa6IGh0dHA6Ly9iaXQubHkvMm5OaFBFWlxuXG5JbiB0aGlzIHZpZGVvLCBEaWQgWW91IEtub3cgR2FtaW5nIHRha2VzIGEgbG9vayBhdCB0aGUgY2FyZWVyIG9mIGxlZ2VuZGFyeSBjb21wb3NlciBLb2ppIEtvbmRvLiBLb25kbyBoYXMgc3BlbnQgaGlzIGVudGlyZSB3b3JraW5nIGxpZmUgYXQgTmludGVuZG8sIHN0YXJ0aW5nIHdpdGggUHVuY2gtT3V0ISEgYW5kIG1vdmluZyBvbiB0byBUaGUgTGVnZW5kIG9mIFplbGRhIGFuZCBTdXBlciBNYXJpbyBCcm9zLiBIaXMgbW9zdCByZWNlbnQgd29yayBpcyBTdXBlciBNYXJpbyBNYWtlciAyLCBhbmQgaGUgc2hvd3Mgbm8gc2lnbnMgb2Ygc3RvcHBpbmcuXG5cblNwZWNpYWwgdGhhbmtzIHRvIER5bGFuIEN1dGhiZXJ0IChodHRwczovL3R3aXR0ZXIuY29tL2R5bGFuY3V0aGJlcnQpLCBNYXJrIExlbnR6IChodHRwczovL3R3aXR0ZXIuY29tL3RoZUhlbnJ5RGVtb3MpIGFuZCBMaWFtIEVkd2FyZHMgKGh0dHBzOi8vdHdpdHRlci5jb20vTGlhbUJNRSkuXG5cbkZvbGxvdyBEWUtHIG9uOlxuVHdpdHRlcjogaHR0cDovL2JpdC5seS8yb09hdnMyXG5JbnN0YWdyYW06IGh0dHA6Ly9iaXQubHkvMm9PNGpqQVxuRmFjZWJvb2s6IGh0dHA6Ly9iaXQubHkvMm5JckZwOVxuV2Vic2l0ZTogaHR0cDovL2JpdC5seS9OcFlEYkRcblxuUmVzZWFyY2gvV3JpdGluZyBieSBQdXNoRHVzdEluIG9mIFNvdXJjZUdhbWluZ1xuQWRkaXRpb25hbCBSZXNlYXJjaC9Xcml0aW5nIGJ5IEZ1cnN0XG5WaWRlbyBFZGl0aW5nIGJ5IEZ1cnN0XG5cblNvdXJjZXMvRnVydGhlciBSZWFkaW5nOlxuaHR0cDovL3d3dy52Z21vbmxpbmUubmV0L2tvamlrb25kby9cbmh0dHBzOi8vd3d3LndpcmVkLmNvbS8yMDA3LzAzL3ZnbC1rb2ppLWtvbmRvLS8gIChNYWtpbmcgYSBtdXNpYyBnYW1lLCB0YWxrcyBhYm91dCBPc3UsIGV0Yylcbmh0dHA6Ly9hcmNoaXZlLnZpZGVvZ2FtZXNkYWlseS5jb20vZmVhdHVyZXMva29qaV9rb25kb19pdl9wMS5hc3Bcbmh0dHBzOi8vd3d3Lmlnbi5jb20vYXJ0aWNsZXMvMjAxNC8xMi8xMC9hLW11c2ljLXRyaXZpYS10b3VyLXdpdGgtbmludGVuZG9zLWtvamkta29uZG9cbmh0dHA6Ly9zaG11cGxhdGlvbnMuY29tL3N1cGVybWFyaW93b3JsZC9cbmh0dHBzOi8vd3d3LmdkY3ZhdWx0LmNvbS9wbGF5Lzc1NC9QYWludGluZy1hbi1JbnRlcmFjdGl2ZS1NdXNpY2FsIChHREMgVGFsaylcbmh0dHBzOi8vd3d3LmdhbWFzdXRyYS5jb20vdmlldy9uZXdzLzIzMTk4Ny9UaGVfTWFyaW9fTWFlc3Ryb19zcGVha3NfS29qaV9Lb25kb19vbl9jb21wb3NpbmdfY2xhc3NpY3MucGhwXG5odHRwczovL3d3dy5nYW1hc3V0cmEuY29tL3ZpZXcvbmV3cy8xMDQwMDIvR0RDX0tvamlfS29uZG9zX0ludGVyYWN0aXZlX011c2ljYWxfTGFuZHNjYXBlcy5waHBcbmh0dHA6Ly93d3cubmludGVuZG93b3JsZHJlcG9ydC5jb20vZmVhdHVyZS8xMzExOC9rb2ppLWtvbmRvcy1nZGMtMjAwNy1wcmVzZW50YXRpb25cbmh0dHBzOi8vd3d3LmdsaXR0ZXJiZXJyaS5jb20vb2NhcmluYS1vZi10aW1lL3NwZWNpYWwtaW50ZXJ2aWV3LWtvamkta29uZG8vXG4gXG4jS29qaUtvbmRvICNaZWxkYSAjTWFyaW8iCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTZNMzVTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiMzAwMjQ4IiwKICAgICAgICAibGlrZUNvdW50IjogIjEzNjI2IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjEyMiIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI4ODEiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:35 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=O-kw80fZ8pU&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:35 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:35 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=YhgMLn6uNzA&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:36 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogInM0ZHd0cHY3dlZXRVJ2TmlucmJTRHdQa01jRSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiTUxxZ1VGLU5hT2N2RXFzby05emtOUThTWFM0IiwKICAgICAgImlkIjogIlloZ01MbjZ1TnpBIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMTItMTVUMTk6NDc6MjJaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIk5pbnRlbmRvIFN3aXRjaCBSdW1vcnMgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBSZW1peCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkZvb2QgaW4gVmlkZW8gR2FtZXMg4pa6IGh0dHBzOi8vYml0Lmx5LzJSUklXaWxcblNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBTd2l0Y2ggRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblxuSW4gdGhpcyB2aWRlbywgRGlkIFlvdSBLbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgdGhlIGhpc3Rvcnkgb2YgTmludGVuZG8gU3dpdGNoIHJ1bW9ycywgaW5jbHVkaW5nIHRoZSAnTmludGVuZG8gRnVzaW9uJyBob2F4LCBhbmQgcnVtb3JzIG9mIE5pbnRlbmRvIGNvbGxhYm9yYXRpbmcgd2l0aCBYYm94LlxuXG5Gb2xsb3cgRFlLRyBvbjpcblR3aXR0ZXI6IGh0dHA6Ly9iaXQubHkvMm9PYXZzMlxuSW5zdGFncmFtOiBodHRwOi8vYml0Lmx5LzJvTzRqakFcbkZhY2Vib29rOiBodHRwOi8vYml0Lmx5LzJuSXJGcDlcbldlYnNpdGU6IGh0dHA6Ly9iaXQubHkvTnBZRGJEXG5cblJlc2VhcmNoL1dyaXRpbmcgYnkgU2V1bWlkaCBNYWNEb25hbGRcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5cblNvdXJjZXMvRnVydGhlciBSZWFkaW5nOlxuaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xZzhRdWZEX2VLWldLNW5DVVpwcTF1ZW16Y3k4TFQzTVM3dEhCX1luRC1ZTS9lZGl0P3VzcD1zaGFyaW5nXG5cbihTb3VyY2VzIGFyZSBpbiBhIGRvY3VtZW50IGR1ZSB0byBZb3VUdWJlIGxpbWl0aW5nIGRlc2NyaXB0aW9ucyB0byA1MDAwIGNoYXJhY3RlcnMuKVxuIFxuI1N3aXRjaCAjTmludGVuZG9Td2l0Y2ggI05pbnRlbmRvIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWWhnTUxuNnVOekEvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZaGdNTG42dU56QS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZaGdNTG42dU56QS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWWhnTUxuNnVOekEvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZaGdNTG42dU56QS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgIm5pbnRlbmRvIHN3aXRjaCBydW1vcnMiLAogICAgICAgICAgInN3aXRjaCBydW1vcnMiLAogICAgICAgICAgInN3aXRjaCIsCiAgICAgICAgICAibmludGVuZG8gc3dpdGNoIiwKICAgICAgICAgICJuaW50ZW5kbyIsCiAgICAgICAgICAibmludGVuZG8gcnVtb3JzIiwKICAgICAgICAgICJzd2l0Y2ggbGl0ZSIsCiAgICAgICAgICAiZGlkIHlvdSBrbm93IGdhbWluZyIsCiAgICAgICAgICAiZGlkeW91a25vd2dhbWluZyIsCiAgICAgICAgICAiZHlrZ2FtaW5nIiwKICAgICAgICAgICJkeWtnIiwKICAgICAgICAgICJnYW1pbmciLAogICAgICAgICAgInN3aXRjaCBuZXdzIiwKICAgICAgICAgICJuaW50ZW5kbyBuZXdzIiwKICAgICAgICAgICJuaW50ZW5kbyBzd2l0Y2ggbmV3cyIsCiAgICAgICAgICAieGJveCIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJOaW50ZW5kbyBTd2l0Y2ggUnVtb3JzIC0gRGlkIFlvdSBLbm93IEdhbWluZz8gRmVhdC4gUmVtaXgiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkZvb2QgaW4gVmlkZW8gR2FtZXMg4pa6IGh0dHBzOi8vYml0Lmx5LzJSUklXaWxcblNVQlNDUklCRSBmb3IgbW9yZSBOaW50ZW5kbyBTd2l0Y2ggRmFjdHMg4pa6IGh0dHA6Ly9iaXQubHkvRFlLR19TdWJzY3JpYmVcblxuSW4gdGhpcyB2aWRlbywgRGlkIFlvdSBLbm93IEdhbWluZyB0YWtlcyBhIGxvb2sgYXQgdGhlIGhpc3Rvcnkgb2YgTmludGVuZG8gU3dpdGNoIHJ1bW9ycywgaW5jbHVkaW5nIHRoZSAnTmludGVuZG8gRnVzaW9uJyBob2F4LCBhbmQgcnVtb3JzIG9mIE5pbnRlbmRvIGNvbGxhYm9yYXRpbmcgd2l0aCBYYm94LlxuXG5Gb2xsb3cgRFlLRyBvbjpcblR3aXR0ZXI6IGh0dHA6Ly9iaXQubHkvMm9PYXZzMlxuSW5zdGFncmFtOiBodHRwOi8vYml0Lmx5LzJvTzRqakFcbkZhY2Vib29rOiBodHRwOi8vYml0Lmx5LzJuSXJGcDlcbldlYnNpdGU6IGh0dHA6Ly9iaXQubHkvTnBZRGJEXG5cblJlc2VhcmNoL1dyaXRpbmcgYnkgU2V1bWlkaCBNYWNEb25hbGRcblZpZGVvIEVkaXRpbmcgYnkgTHVpcyBJbGxpbmd3b3J0aCBASGV5UmFndWlvXG5cblNvdXJjZXMvRnVydGhlciBSZWFkaW5nOlxuaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xZzhRdWZEX2VLWldLNW5DVVpwcTF1ZW16Y3k4TFQzTVM3dEhCX1luRC1ZTS9lZGl0P3VzcD1zaGFyaW5nXG5cbihTb3VyY2VzIGFyZSBpbiBhIGRvY3VtZW50IGR1ZSB0byBZb3VUdWJlIGxpbWl0aW5nIGRlc2NyaXB0aW9ucyB0byA1MDAwIGNoYXJhY3RlcnMuKVxuIFxuI1N3aXRjaCAjTmludGVuZG9Td2l0Y2ggI05pbnRlbmRvIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMjZNMzVTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiNDk1NjA0IiwKICAgICAgICAibGlrZUNvdW50IjogIjEwMDg3IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjM0OSIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICI2MDUiCiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiAxLAogICAgInJlc3VsdHNQZXJQYWdlIjogMQogIH0KfQo=
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:36 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=47dNILcpP4I&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:36 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjdmlkZW9MaXN0UmVzcG9uc2UiLAogICJldGFnIjogIk9sdnI5SFZ1R1U5VDB1all6Uk1LaGR2TDd4ayIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgImV0YWciOiAiczNsb001bHQ0SjFwaE96ODU2a2gxR3VaeHhzIiwKICAgICAgImlkIjogIjQ3ZE5JTGNwUDRJIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDEtMTFUMjA6MDA6MDJaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDeVM0eFFFNkRLNF9wM3FYUXdKUUF5QSIsCiAgICAgICAgInRpdGxlIjogIlRoZSBIaXN0b3J5IG9mIFNwZWVkcnVubmluZyAtIERpZCBZb3UgS25vdyBHYW1pbmc/IEZlYXQuIFJlbWl4IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIEdhbWluZyBIaXN0b3J5IOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5aZWxkYSBSdW1vcnMg4pa6IGh0dHBzOi8vYml0Lmx5LzJUZjdoUFZcblBva2Vtb24gUnVtb3JzIOKWuiBodHRwczovL2JpdC5seS8zMGE0b1JFXG5cbkluIHRoaXMgdmlkZW8sIERpZCBZb3UgS25vdyBHYW1pbmcgdGFrZXMgYSBsb29rIGF0IHRoZSBoaXN0b3J5IG9mIHNwZWVkcnVubm5pbmcsIGZyb20gdGhlIHNwb3J0J3MgZWFybHkgb3JpZ2lucyB3aXRoIEF0YXJpIGFuZCBOaW50ZW5kbyBXb3JsZCBDaGFtcGlvbnNoaXBzLCB0aHJvdWdoIERvb20gYW5kIFF1YWtlLCBhbGwgdGhlIHdheSB0byB0aGUgbW9kZXJuIGRheSBsaXZlLXN0cmVhbWluZyBhbmQgbWFyYXRob24gY3VsdHVyZSB3aXRoIEFHRFEsIFNHRFEsIGFuZCBHYW1lcyBEb25lIFF1aWNrIGluIGdlbmVyYWwuXG5cblRoaXMgdmlkZW8gd291bGRuJ3QgaGF2ZSBiZWVuIHBvc3NpYmxlIHdpdGhvdXQgdGhlIGJvb2sgU3BlZWRydW4gU2NpZW5jZTogQSBMb25nIEd1aWRlIHRvIFNob3J0IFBsYXl0aHJvdWdocyDilrogaHR0cHM6Ly93d3cuZmFuZ2FtZXIuY29tL3Byb2R1Y3RzL3NwZWVkcnVuLWJvb2tcblxuRm9sbG93IERZS0cgb246XG5Ud2l0dGVyOiBodHRwOi8vYml0Lmx5LzJvT2F2czJcbkluc3RhZ3JhbTogaHR0cDovL2JpdC5seS8yb080ampBXG5GYWNlYm9vazogaHR0cDovL2JpdC5seS8ybklyRnA5XG5XZWJzaXRlOiBodHRwOi8vYml0Lmx5L05wWURiRFxuXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuUmVzZWFyY2gvV3JpdGluZyBieSBMLkQuIE11cnBoeVxuXG5Tb3VyY2VzL0Z1cnRoZXIgUmVhZGluZzpcbmh0dHBzOi8vYXJjaGl2ZS5vcmcvZGV0YWlscy9EcmFnc3Rlcl8xOTgwX0FjdGl2aXNpb24vcGFnZS9uMVxuaHR0cHM6Ly93d3cudmlld3NvbmljLmNvbS91cy9kaXNjb3Zlci9uZXdzL2EtYnJpZWYtaGlzdG9yeS1vZi1zcGVlZHJ1bm5pbmdcbktvemllbCwgRS4gKDIwMTkpLiBTcGVlZHJ1biBTY2llbmNlOiBBIExvbmcgR3VpZGUgdG8gU2hvcnQgUGxheXRocm91Z2hzLiBUdXNjb24sIEFaOiBGYW5nYW1lci5cbmh0dHBzOi8vcmVhZG9ubHltZW1vcnkudmcvYS1icmllZi1oaXN0b3J5LW9mLXNwZWVkcnVubmluZy9cbmh0dHBzOi8vZ2FtZXNkb25lcXVpY2suY29tL3RyYWNrZXIvZXZlbnQvYWdkcTIwMTFcbmh0dHBzOi8vZ2FtZXNkb25lcXVpY2suY29tL3RyYWNrZXIvZXZlbnQvYWdkcTIwMTRcbmh0dHBzOi8vZ2FtZXNkb25lcXVpY2suY29tL3RyYWNrZXIvZXZlbnQvc2dkcTIwMTlcbmh0dHBzOi8vd3d3LnBvbHlnb24uY29tLzIwMTkvMS8xMy8xODE4MDkzNS9hZ2RxLTIwMTktYmVzdC1zcGVlZHJ1bnMtdmlkZW8tb24tZGVtYW5kLW1vbmV5LXJhaXNlZFxuaHR0cHM6Ly9rb3Rha3UuY29tL3N1bW1lci1nYW1lcy1kb25lLXF1aWNrLTIwMTktcmFpc2VkLW92ZXItMy1taWxsaW9uLWRvbC0xODM1OTkxNTg3XG5odHRwczovL3d3dy5wb2x5Z29uLmNvbS8yMDE5LzYvMzAvMjA1Mzg4NzEvc3VtbWVyLWdhbWVzLWRvbmUtcXVpY2stMjAxOS1oaWdobGlnaHRzLWZ1bmRyYWlzaW5nLXRvdGFsXG5cbiNTcGVlZHJ1bm5pbmcgI1NwZWVkcnVuICNEaWRZb3VLbm93R2FtaW5nIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNDdkTklMY3BQNEkvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80N2ROSUxjcFA0SS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80N2ROSUxjcFA0SS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNDdkTklMY3BQNEkvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80N2ROSUxjcFA0SS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiRGlkWW91S25vd0dhbWluZz8iLAogICAgICAgICJ0YWdzIjogWwogICAgICAgICAgInNwZWVkcnVubmluZyIsCiAgICAgICAgICAic3BlZWQgcnVubmluZyIsCiAgICAgICAgICAiaGlzdG9yeSIsCiAgICAgICAgICAic3BlZWRydW4iLAogICAgICAgICAgInNwZWVkIHJ1biIsCiAgICAgICAgICAiaGlzdG9yeSBvZiBzcGVlZHJ1bm5pbmciLAogICAgICAgICAgImFnZHEiLAogICAgICAgICAgInNnZHEiLAogICAgICAgICAgImdkcSIsCiAgICAgICAgICAic3BlZWRydW5zIiwKICAgICAgICAgICJhd2Vzb21lIGdhbWVzIGRvbmUgcXVpY2siLAogICAgICAgICAgInN1bW1lciBnYW1lcyBkb25lIHF1aWNrIiwKICAgICAgICAgICJnYW1lcyBkb25lIHF1aWNrIiwKICAgICAgICAgICJkaWQgeW91IGtub3cgZ2FtaW5nIiwKICAgICAgICAgICJkaWR5b3Vrbm93Z2FtaW5nIiwKICAgICAgICAgICJkeWtnYW1pbmciLAogICAgICAgICAgImR5a2ciLAogICAgICAgICAgImdhbWluZyIKICAgICAgICBdLAogICAgICAgICJjYXRlZ29yeUlkIjogIjIwIiwKICAgICAgICAibGl2ZUJyb2FkY2FzdENvbnRlbnQiOiAibm9uZSIsCiAgICAgICAgImxvY2FsaXplZCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJUaGUgSGlzdG9yeSBvZiBTcGVlZHJ1bm5pbmcgLSBEaWQgWW91IEtub3cgR2FtaW5nPyBGZWF0LiBSZW1peCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU1VCU0NSSUJFIGZvciBtb3JlIEdhbWluZyBIaXN0b3J5IOKWuiBodHRwOi8vYml0Lmx5L0RZS0dfU3Vic2NyaWJlXG5aZWxkYSBSdW1vcnMg4pa6IGh0dHBzOi8vYml0Lmx5LzJUZjdoUFZcblBva2Vtb24gUnVtb3JzIOKWuiBodHRwczovL2JpdC5seS8zMGE0b1JFXG5cbkluIHRoaXMgdmlkZW8sIERpZCBZb3UgS25vdyBHYW1pbmcgdGFrZXMgYSBsb29rIGF0IHRoZSBoaXN0b3J5IG9mIHNwZWVkcnVubm5pbmcsIGZyb20gdGhlIHNwb3J0J3MgZWFybHkgb3JpZ2lucyB3aXRoIEF0YXJpIGFuZCBOaW50ZW5kbyBXb3JsZCBDaGFtcGlvbnNoaXBzLCB0aHJvdWdoIERvb20gYW5kIFF1YWtlLCBhbGwgdGhlIHdheSB0byB0aGUgbW9kZXJuIGRheSBsaXZlLXN0cmVhbWluZyBhbmQgbWFyYXRob24gY3VsdHVyZSB3aXRoIEFHRFEsIFNHRFEsIGFuZCBHYW1lcyBEb25lIFF1aWNrIGluIGdlbmVyYWwuXG5cblRoaXMgdmlkZW8gd291bGRuJ3QgaGF2ZSBiZWVuIHBvc3NpYmxlIHdpdGhvdXQgdGhlIGJvb2sgU3BlZWRydW4gU2NpZW5jZTogQSBMb25nIEd1aWRlIHRvIFNob3J0IFBsYXl0aHJvdWdocyDilrogaHR0cHM6Ly93d3cuZmFuZ2FtZXIuY29tL3Byb2R1Y3RzL3NwZWVkcnVuLWJvb2tcblxuRm9sbG93IERZS0cgb246XG5Ud2l0dGVyOiBodHRwOi8vYml0Lmx5LzJvT2F2czJcbkluc3RhZ3JhbTogaHR0cDovL2JpdC5seS8yb080ampBXG5GYWNlYm9vazogaHR0cDovL2JpdC5seS8ybklyRnA5XG5XZWJzaXRlOiBodHRwOi8vYml0Lmx5L05wWURiRFxuXG5WaWRlbyBFZGl0aW5nIGJ5IEx1aXMgSWxsaW5nd29ydGggQEhleVJhZ3Vpb1xuUmVzZWFyY2gvV3JpdGluZyBieSBMLkQuIE11cnBoeVxuXG5Tb3VyY2VzL0Z1cnRoZXIgUmVhZGluZzpcbmh0dHBzOi8vYXJjaGl2ZS5vcmcvZGV0YWlscy9EcmFnc3Rlcl8xOTgwX0FjdGl2aXNpb24vcGFnZS9uMVxuaHR0cHM6Ly93d3cudmlld3NvbmljLmNvbS91cy9kaXNjb3Zlci9uZXdzL2EtYnJpZWYtaGlzdG9yeS1vZi1zcGVlZHJ1bm5pbmdcbktvemllbCwgRS4gKDIwMTkpLiBTcGVlZHJ1biBTY2llbmNlOiBBIExvbmcgR3VpZGUgdG8gU2hvcnQgUGxheXRocm91Z2hzLiBUdXNjb24sIEFaOiBGYW5nYW1lci5cbmh0dHBzOi8vcmVhZG9ubHltZW1vcnkudmcvYS1icmllZi1oaXN0b3J5LW9mLXNwZWVkcnVubmluZy9cbmh0dHBzOi8vZ2FtZXNkb25lcXVpY2suY29tL3RyYWNrZXIvZXZlbnQvYWdkcTIwMTFcbmh0dHBzOi8vZ2FtZXNkb25lcXVpY2suY29tL3RyYWNrZXIvZXZlbnQvYWdkcTIwMTRcbmh0dHBzOi8vZ2FtZXNkb25lcXVpY2suY29tL3RyYWNrZXIvZXZlbnQvc2dkcTIwMTlcbmh0dHBzOi8vd3d3LnBvbHlnb24uY29tLzIwMTkvMS8xMy8xODE4MDkzNS9hZ2RxLTIwMTktYmVzdC1zcGVlZHJ1bnMtdmlkZW8tb24tZGVtYW5kLW1vbmV5LXJhaXNlZFxuaHR0cHM6Ly9rb3Rha3UuY29tL3N1bW1lci1nYW1lcy1kb25lLXF1aWNrLTIwMTktcmFpc2VkLW92ZXItMy1taWxsaW9uLWRvbC0xODM1OTkxNTg3XG5odHRwczovL3d3dy5wb2x5Z29uLmNvbS8yMDE5LzYvMzAvMjA1Mzg4NzEvc3VtbWVyLWdhbWVzLWRvbmUtcXVpY2stMjAxOS1oaWdobGlnaHRzLWZ1bmRyYWlzaW5nLXRvdGFsXG5cbiNTcGVlZHJ1bm5pbmcgI1NwZWVkcnVuICNEaWRZb3VLbm93R2FtaW5nIgogICAgICAgIH0sCiAgICAgICAgImRlZmF1bHRBdWRpb0xhbmd1YWdlIjogImVuIgogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgImR1cmF0aW9uIjogIlBUMTVNNTVTIiwKICAgICAgICAiZGltZW5zaW9uIjogIjJkIiwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJoZCIsCiAgICAgICAgImNhcHRpb24iOiAiZmFsc2UiLAogICAgICAgICJsaWNlbnNlZENvbnRlbnQiOiB0cnVlLAogICAgICAgICJjb250ZW50UmF0aW5nIjoge30sCiAgICAgICAgInByb2plY3Rpb24iOiAicmVjdGFuZ3VsYXIiCiAgICAgIH0sCiAgICAgICJzdGF0aXN0aWNzIjogewogICAgICAgICJ2aWV3Q291bnQiOiAiNDU4NzAwIiwKICAgICAgICAibGlrZUNvdW50IjogIjE1MjI2IiwKICAgICAgICAiZGlzbGlrZUNvdW50IjogIjIzMiIsCiAgICAgICAgImZhdm9yaXRlQ291bnQiOiAiMCIsCiAgICAgICAgImNvbW1lbnRDb3VudCI6ICIxMDExIgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMSwKICAgICJyZXN1bHRzUGVyUGFnZSI6IDEKICB9Cn0K
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:36 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=5KCmBLN301w&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:36 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:36 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/videos?id=H5W0yrloIww&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails,statistics
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:37 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:37 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlists?id=PLBO8M-O_dTPEdv9xixE4oH1hequU63wpJ&key=<YOUTUBE_API_KEY>&part=snippet
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 13 May 2020 20:41:37 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "kind": "youtube#playlistListResponse",
          "etag": "3pCG6gdPOUYeovQEHklWJ7Zu5WY",
          "pageInfo": {
            "totalResults": 1,
            "resultsPerPage": 5
          },
          "items": [
            {
              "kind": "youtube#playlist",
              "etag": "ih7zd0qzK7aPGzsDmEGQQdmo120",
              "id": "PLBO8M-O_dTPEdv9xixE4oH1hequU63wpJ",
              "snippet": {
                "publishedAt": "2019-06-29T19:33:52Z",
                "channelId": "UCyS4xQE6DK4_p3qXQwJQAyA",
                "title": "The Best of DidYouKnowGaming!",
                "description": "",
                "thumbnails": {
                  "default": {
                    "url": "https://i.ytimg.com/vi/LDqvzhPOSqA/default.jpg",
                    "width": 120,
                    "height": 90
                  },
                  "medium": {
                    "url": "https://i.ytimg.com/vi/LDqvzhPOSqA/mqdefault.jpg",
                    "width": 320,
                    "height": 180
                  },
                  "high": {
                    "url": "https://i.ytimg.com/vi/LDqvzhPOSqA/hqdefault.jpg",
                    "width": 480,
                    "height": 360
                  },
                  "standard": {
                    "url": "https://i.ytimg.com/vi/LDqvzhPOSqA/sddefault.jpg",
                    "width": 640,
                    "height": 480
                  },
                  "maxres": {
                    "url": "https://i.ytimg.com/vi/LDqvzhPOSqA/maxresdefault.jpg",
                    "width": 1280,
                    "height": 720
                  }
                },
                "channelTitle": "DidYouKnowGaming?",
                "localized": {
                  "title": "The Best of DidYouKnowGaming!",
                  "description": ""
                }
              }
            }
          ]
        }
    http_version: null
  recorded_at: Wed, 13 May 2020 20:41:37 GMT
recorded_with: VCR 5.1.0
